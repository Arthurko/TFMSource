# coding: utf-8
from datetime import date
from datetime import datetime, timedelta
def getTime2():
        TIME = str(datetime.now())[11:].split(":")
        TIME = TIME[0]+":"+TIME[1]+":"+TIME[2][:2]
        return str(TIME)
print "["+str(getTime2())+"] "+"Main tfm core is being loaded.."
execfile('./modules/Import.py')
Start = datetime.now()
dateNow = datetime.now()
def getTime():
        global time
        return time.time()
def getTimeLog():
        TIME = str(datetime.now())
        return str(TIME)
def getTimeLogin():
        TIME = str(datetime.now())[:19].replace("-", ".")
        return str(TIME)
dbcur = None
try:
    dbcon = MySQLdb.connect(host=conf.connect['host'],user=conf.connect['user'],passwd=conf.connect['pass'],db=conf.connect['db'],port=conf.connect['port'])
    dbcon.isolation_level = None
    dbcur = dbcon.cursor()
    dbcon.row_factory = sqlite3.Row
    dbcon.text_factory = str
except MySQLdb.Error, e:
    pass

SRVRNAME = Source.NAME
SRVRSHB = Source.SHB
SOURCECOR = Source.COR
SOURCECODER = Source.CODER
SOURCEVKAC = Source.VKAC
VERBOSE = False
LOGVERB = False
EXEVERS = False
VERSION = Version.Version
CKEY = Version.ConnectionKey
SERVERV = Source.V

LEVEL_LIST = range(0, 134+1)+range(136, 143+1) + range(200, 210+1)
CONJURATION_MAPS = [101, 102, 103, 104, 105, 106, 107] + [1101, 1102, 1104, 1104, 1105, 1106, 1107]
FULL_LEVEL_LIST = range(0, 134+1) + range(136, 143+1) + range(200, 210+1) + [-1, 135, 444, 555, 666, 777, 800, 801, 560, 850, 851, 852, 853, 888, 900, 1444, 1666, 1777, 1801]
ADMIN_TITLES = ["248", "440","442","444", "445", "447", "448", "446", "201", "246", "247", "248"]

if EXEVERS:
        VERBOSE = False



class AuthError(Exception):
    pass
        
class TransformiceClientHandler(TFMClientProtocol):
        def __init__(self):

                self.buffer = ""
                self.MDT = ""

                self.packetSize = ""
                self.packetSizeUTF = ""
                self.eventToken1 = ""
                self.eventToken2 = ""
                self.Yer = 0
                self.isUtfPacket = False
                self.currentPacketPos = 0
                self.fly = False
                self.partialPacketHold = False

                self.validatingVersion = True

                self.loaderInfoUrl = ""
                self.stageloaderInfobytesTotal = "0"
                self.stageloaderInfobytesLoaded = "0"
                self.loaderInfobytesTotal = "0"
                self.kalp = False
                self.loaderInfobytesLoaded = "0"

                self.Langue="RU"
                self.LangueBin="\x03"
                self.lo = False
                self.Translating=False
                self.Yer2 = "\x00"
                
                self.computer=""
                self.flashvers=""

                self.username = ""
                self.isHole = False
                self.playerCode = -1
                self.peynir = False
                self.buyu = False
                self.privilegeLevel = 0
                        #-1 - Invalid
                        #0 - Guest
                        #1 - Normal
                        #2 - Mapcrew
                        #3 - Arbitre
                        #5 - Moderator
                        #6 - Manager
                        #10 - Admin
                
                self.isvip = 0
                self.isagent = 0
                self.room = None
                self.isBanned = False
                self.isFrozen = False
                self.isFrozenTimer = None
                self.BalikEtkinligi = None
                self.puan = 20
                self.isShaman = False
                self.isDead = False
                self.hasCheese = False
                self.isAfk = True
                self.akrobat = False
                self.Egilme = False
                self.isSyncroniser = False
                self.isZombie = False

                self.forumid = "1"
                self.duckCheckCounter = 0

                self.score = 0
                self.avatar = 0
                
                self.voteban = []
                self.votemuteplayer = []
                self.votemute = 0
                self.Kanat = False
                self.mumute = False
                self.isTonnere = False
                self.modmute= False
                self.isHunds = False
                self.TempBan= False
                self.roomname = "RU-1"
                self.lastmessage = ""
                self.isinit = True
                self.sentinelle = False
                self.sentcount = 0
                self.x = 0
                self.y = 0
                self.posX = 0
                self.posY = 0
                self.Yer3 = 0
                self.ShamanRespawn = False
                self.Balonlar = 0
                self.mdir = "0"
                self.loadercheck = True
                self.logonsuccess = False
                self.wrongPasswordAttempts=0
                self.isIPban = "NotChecked"
                self.isInTribe = False
                self.giftInfo = "0.0.0"
                self.giftCount = 0
                self.sendGiftCount = 0
                self.recvGiftCount = 0
                self.maxGift = 280
                self.gotGift = 0
                self.titleNumber = 0
                self.Tellfirsttime = 0
                self.disableShop = False
                self.SPEC = False
                self.Voted= False
                self.QualifiedVoter=False
                self.ATEC_Time = None
                self.AWKE_Time = (getTime() * 1000)
                self.playerStartTime = None
                self.isBecerikullanma = False
                self.REMOTECONTROLPRT= False
                self.diriltme = 0
                self.NoDataTimer = None
                self.JumpCheck = 1
                self.canMeep = False
                self.AwakeTimerKickTimer = None
                self.iskelet = False

                self.modoPwet = False

                self.silence   = False
                self.silencemsg= ""
                self.chatcolored=False
                self.chatvip = False
                self.prefix = False
                self.colorchat = False
                self.chatcolor = ""
                self.muteTribe = False
                self.censorChat= False
                self.fare = False
                self.muteChat  = False
                self.dark = False
                self.isHidden  = False

                self.EmailAddress = ""
                self.UsernameRecoveryPass = ""
                self.ValidatedEmail = False
                self.LastEmailCode = str(random.randrange(10000, 99999+1))
                self.ValidatedPassChange = False

                self.TribeName  = ""
                self.TribeRank  = ""
                self.TribeCode  = ""
                self.TribeInfo  = []
                        #m= Modify Greeting Message
                        #I= Recruit
                        #D= Change Permissions
                        #E= Exlude Tribe Members
                self.TribeMessage = ""
                self.TribeFromage = 0
                self.AcceptableInvites = []

                self.RTNail= False
                self.RTotem= False
                self.UTotem= False
                self.STotem= [0,""]
                self.Totem = [0,""]
                        #Item Count, Totem (Minus playercode#x#y at the beginning)
                        #When summoning totem, Do: PlayerCode#X#Y+self.Totem[1]
                        #Totem Editor uses 400, 203 for X/Y

                self.isFishing = False
                self.Map777FishingTimer = None
                self.LoadCountTotem = False

                self.color1 = "78583a" #Fur
                self.color2 = "95d9d6" #Shaman marks ("fade55" for previous hardmode color?)
                self.shopList = "0,3,1,0,20,0;0,5,2,0,100,0;0,2,1,0,200,0;0,4,1,0,200,0;0,1,2,0,500,0;0,6,2,0,500,0;1,1,1,0,200,0;1,2,1,0,200,0;0,7,1,0,200,0;0,8,1,0,300,0;0,9,4,0,500,0;0,10,1,0,100,0;0,11,1,0,500,0;1,4,1,0,200,0;0,12,1,0,200,0;0,13,1,0,500,0;0,14,3,0,300,0;1,3,1,0,200,0;1,5,1,0,300,0;0,15,1,0,200,0;3,1,1,0,100,0;3,2,1,0,25,0;3,3,1,0,150,0;3,4,0,0,400,0;0,16,2,0,300,0;0,17,3,0,200,0;0,18,1,0,300,0;0,19,2,0,300,0;0,20,2,0,500,0;0,21,2,0,200,0;2,1,1,0,100,0;3,5,1,0,300,0;0,22,1,0,300,0;0,23,3,0,400,0;0,24,1,0,50,0;0,25,1,0,250,0;0,26,1,0,300,0;0,27,2,0,800,0;0,28,2,0,300,0;0,29,3,0,500,0;4,1,3,0,200,0;4,2,1,0,200,0;0,30,1,0,200,0;0,31,1,0,300,0;0,32,1,0,800,0;0,33,2,0,150,0;0,34,2,0,400,0;0,35,1,0,1000,0;0,36,2,0,500,0;0,37,1,0,200,0;0,38,3,0,800,0;1,6,2,0,800,0;0,41,1,0,800,0;0,42,2,0,800,0;4,3,1,0,800,0;2,3,1,0,800,0;0,43,1,0,200,0;0,44,3,0,250,0;0,45,1,0,300,0;0,46,2,0,100,0;0,47,4,0,1500,0;1,7,3,0,50,0;2,4,2,0,20,0;3,6,1,0,300,0;3,7,1,0,300,0;4,4,2,0,50,0;1,8,1,0,50,0;0,48,2,0,300,0;0,52,0,0,400,0;2,5,2,0,300,0;0,51,1,0,200,0;0,49,3,0,500,0;3,8,0,0,400,0;0,54,2,0,50,0;0,50,1,0,400,0;0,53,0,0,400,0;3,9,1,0,400,0;0,55,1,0,100,0;4,6,2,0,50,0;3,10,1,0,20,0;2,9,0,0,100,0;0,61,1,0,200,0;0,62,2,0,300,0;1,10,1,0,100,0;0,63,1,0,350,0;0,64,2,0,300,0;1,11,2,0,200,0;0,68,7,0,200,0;0,69,6,0,200,0;0,70,4,0,200,0;0,71,2,0,200,0;0,72,3,0,200,0;0,73,2,0,200,0;3,12,1,0,150,0;0,65,2,0,200,0;3,13,0,0,150,0;0,66,2,0,300,0;0,67,1,0,400,0;0,74,2,0,150,0;3,14,1,0,50,0;0,77,3,0,250,0;4,8,2,0,100,0;0,78,3,0,300,0;2,10,3,0,4001,1001;0,79,2,0,250,0;1,12,2,0,400,0;0,75,2,0,50,0;0,76,1,0,200,0;2,2,0,0,500,0;4,9,2,0,500,0;3,15,0,0,500,0;0,82,1,0,500,0;0,80,1,0,500,0;0,40,2,0,655,0;0,83,2,0,350,0;3,16,1,0,350,0;2,12,1,0,350,0;4,10,1,0,800,0;2,11,1,0,1000,0;0,85,2,0,500,0;0,84,0,0,500,0;1,13,0,0,500,0;1,9,1,0,100,50;4,5,2,0,200,50;2,6,2,0,250,100;4,11,2,0,300,140;2,13,1,0,300,200;4,12,1,0,300,200;0,86,0,0,1000,0;2,15,0,0,600,0;2,14,3,0,200,0;0,88,2,0,500,0;1,14,3,0,500,0;0,87,3,0,500,0;0,56,4,0,500,0;0,57,1,0,500,0;0,58,0,0,500,0;2,7,0,0,500,0;2,8,2,0,500,0;3,11,0,0,500,0;0,89,2,0,500,0;0,91,0,0,500,0;0,90,0,0,500,0;0,93,3,0,500,0;0,92,3,0,500,0;0,59,1,3,10,0;0,60,0,3,12,0;4,7,2,3,4,0;3,17,0,3,2,0;2,16,3,3,4,0;0,94,3,3,14,0;0,95,5,0,500,50;0,96,2,0,400,40;0,97,4,0,400,40;1,15,0,0,400,0;2,17,0,0,400,40;3,18,0,0,400,0;4,13,0,0,400,40;5,1,1,0,400,40;5,2,1,0,400,40;5,3,1,0,400,40;5,4,1,0,400,40;5,5,1,0,400,40;5,6,4,0,400,0;5,7,2,0,400,0;5,8,4,0,400,0;21,0,0,0,1000,50;21,1,0,0,1000,50;21,2,0,0,3000,150;21,3,0,0,3000,150;21,4,0,0,3000,150;21,5,0,0,3000,150;21,6,0,0,3000,150;22,2,0,0,6000,300;22,3,0,0,6000,300;22,4,0,0,6000,300;22,5,0,0,6000,300;22,6,0,0,6000,300;22,7,0,0,8000,350;22,8,0,0,10000,400;3,19,2,0,50,10;0,98,1,0,300,40;0,99,2,0,200,40;0,101,3,0,300,40;0,102,3,0,300,40;3,20,3,0,20,2;3,21,3,0,60,6;3,22,1,0,20,2;3,23,1,0,20,2;5,9,2,0,300,40;5,10,2,0,200,40;2,18,2,0,20,2;2,19,1,0,100,10;6,1,2,0,1000,100;22,9,0,0,7000,400;22,10,0,0,7250,425;0,95,0,0,250,0;3,24,0,0,250,0;1,17,0,0,250,0;2,20,0,0,250,0;0,103,0,0,250,40;2,21,0,0,300,40;4,14,0,0,200,40;2,22,0,0,400,40;22,11,0,0,6000,250;22,12,0,0,5200,225;22,13,0,0,5000,200;22,14,0,0,5250,200;3,25,1,0,200,0;4,15,3,0,150,0;2,23,0,0,80,0;0,104,0,0,250,0;3,26,1,0,200,0;6,2,1,0,1000,100;22,15,0,0,5000,300;3,27,0,2,150,40;3,28,0,2,200,60;6,4,0,2,250,150;3,19,2,0,100,0;1,16,2,0,100,0;0,105,0,0,100,10;5,13,1,0,400,40;22,16,0,0,6000,300;1,18,3,0,500,50;3,29,2,0,50,5;6,3,1,0,1000,100;5,14,1,0,150,15;22,16,0,0,1000001,0;22,17,0,0,6000,300;2,24,0,0,100,50;0,106,0,0,100,50;6,5,0,0,1000,200;0,83,0,0,300,40;3,30,0,0,200,40;4,16,0,0,200,40;0,107,0,0,400,50;3,31,0,0,200,40;22,18,0,0,6000,400;0,108,0,0,500,40;3,33,0,0,300,40;22,19,0,0,7000,400;3,32,0,0,300,40;22,20,0,0,7000,400;0,110,0,0,20,2;6,6,0,0,1500,150;6,7,0,0,1500,150;0,109,0,0,200,100;2,25,0,0,200,100;3,34,0,0,200,100;0,111,0,0,400,40;0,112,0,0,200,30;6,8,0,0,2000,200;22,21,0,0,6000,300;22,22,0,0,6000,300;5,12,2,0,1000,500;5,11,2,0,1000,500;6,9,2,0,300,150;3,35,2,0,300,50;1,19,3,0,500,200;3,36,2,0,250,0;0,113,0,0,250,0;6,10,2,0,250,0;6,11,2,0,1000,200;3,37,2,0,500,100;3,38,2,0,500,100;0,114,0,0,1000,300;6,12,2,0,1000,200;5,15,2,0,250,40;5,16,1,0,250,40;0,117,3,0,800,100;3,40,2,0,400,60;0,116,1,0,400,40;6,13,3,0,250,100;3,39,2,0,250,8;0,115,3,0,250,40;0,117,3,0,250,40;0,118,3,0,250,40;6,14,3,0,250,100;3,41,2,0,400,60;6,15,3,0,250,100;0,119,3,0,250,40;6,16,3,0,250,100;1,20,3,0,500,200;0,120,3,0,250,50;3,42,2,0,400,60;1,21,3,0,500,200;0,121,3,0,250,50;4,17,0,0,200,40;5,17,1,0,250,40;6,17,3,0,250,100;2,26,0,0,200,100"
                self.cheeseTitleCheckList = [5, 20, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 2000, 2300, 2700, 3200, 3800, 4600, 6000, 7000, 8000, 9001, 10000, 14000, 18000, 22000, 26000, 30000, 34000, 38000, 42000, 46000, 50000, 55000, 60000, 65000, 70000, 75000, 80000]
                self.cheeseTitleDictionary = {5:5, 20:6, 100:7, 200:8, 300:35, 400:36, 500:37, 600:26, 700:27, 800:28, 900:29, 1000:30, 1100:31, 1200:32, 1300:33, 1400:34, 1500:38, 1600:39, 1700:40, 1800:41, 2000:72, 2300:73, 2700:74, 3200:75, 3800:76, 4600:77, 6000:78, 7000:79, 8000:80, 9001:81, 10000:82, 14000:83, 18000:84, 22000:85, 26000:86, 30000:87, 34000:88, 38000:89, 42000:90, 46000:91, 50000:92, 55000:234, 60000:235, 65000:236, 70000:237, 75000:238, 80000:93}

                self.firstTitleCheckList = [1, 10, 100, 200, 300, 400, 500, 600, 700, 800, 900, 1000, 1100, 1200, 1400, 1600, 1800, 2000, 2200, 2400, 2600, 2800, 3000, 3200, 3400, 3600, 3800, 4000, 4500, 5000, 5500, 6000, 7000, 8000, 9000, 10000, 12000, 14000, 16000, 18000, 20000, 25000, 30000, 35000, 40000]
                self.firstTitleDictionary = {1:9, 10:10, 100:11, 200:12, 300:42, 400:43, 500:44, 600:45, 700:46, 800:47, 900:48, 1000:49, 1100:50, 1200:51, 1400:52, 1600:53, 1800:54, 2000:55, 2200:56, 2400:57, 2600:58, 2800:59, 3000:60, 3200:61, 3400:62, 3600:63, 3800:64, 4000:65, 4500:66, 5000:67, 5500:68, 6000:69, 7000:231, 8000:232, 9000:233, 10000:70, 12000:224, 14000:225, 16000:226, 18000:227, 20000:202, 25000:228, 30000:229, 35000:230, 40000:71}

                self.shamanTitleCheckList = [10, 100, 1000, 2000, 3000, 4000, 5000, 6000, 7000, 8000, 9000, 10000, 11000, 12000, 13000, 14000, 15000, 16000, 18000, 20000, 22000, 24000, 26000, 28000, 30000, 35000, 40000, 45000, 50000, 55000, 60000, 65000, 70000, 75000, 80000, 85000, 90000, 100000, 140000]
                self.shamanTitleDictionary = {10:1, 100:2, 1000:3, 2000:4, 3000:13, 4000:14, 5000:15, 6000:16, 7000:17, 8000:18, 9000:19, 10000:20, 11000:21, 12000:22, 13000:23, 14000:24, 15000:25, 16000:94, 18000:95, 20000:96, 22000:97, 24000:98, 26000:99, 28000:100, 30000:101, 35000:102, 40000:103, 45000:104, 50000:105, 55000:106, 60000:107, 65000:108, 70000:109, 75000:110, 80000:111, 85000:112, 90000:113, 100000:114, 140000:115}

                self.shopTitleCheckList = [1, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22]
                self.shopTitleDictionary = {1:115, 2:116, 4:117, 6:118, 8:119, 10:120, 12:121, 14:122, 16:123, 18:124, 20:125, 22:126}

                self.noelGiftTitleCheckList = [10, 40, 100, 160, 240, 500]
                self.noelGiftTitleDictionary = {10:288, 40:289, 100:290, 160:291, 240:292, 500:293}

                self.valentinGiftTitleCheckList = [5, 30, 60]
                self.valentinGiftTitleDictionary = {5:210, 30:211, 60:212}

                self.hardShamTitleCheckList = [500, 2000, 4000, 7000, 10000, 14000, 18000, 22000, 26000, 30000, 40000]
                self.hardShamTitleDictionary = {500:213, 2000:214, 4000:215, 7000:216, 10000:217, 14000:218, 18000:219, 22000:220, 26000:221, 30000:222, 40000:223}

                self.bootcampTitleCheckList = [1, 3, 5, 7, 10, 15, 20, 25, 30, 40, 50, 60, 70, 80, 90, 100, 120, 140, 160, 180, 200, 250, 300, 350, 400, 500, 600, 700, 800, 900, 1000]
                self.bootcampTitleDictionary = {1:256, 3:257, 5:258, 7:259, 10:260, 15:261, 20:262, 25:263, 30:264, 40:265, 50:266, 60:267, 70:268, 80:269, 90:270, 100:271, 120:272, 140:273, 160:274, 180:275, 200:276, 250:277, 300:278, 350:279, 400:280, 500:281, 600:282, 700:283, 800:284, 900:285, 1000:286}

                self.tickets = 0
                self.vel = 0
                self.IcedMouses = 2
                self.regdate = "0"

                self.isAgent = False
                
                self.CMDTEC = 0
                self.SGMDT = [0, 0, 0]
                self.ICMDTEC = 0
        def connectionMade(self):
                        self.address = self.transport.getPeer()
                        self.address = [self.address.host]
                
                        self.server = self.factory

                        try:
                                derp = self.server.connectCounts[self.address[0]]
                                self.server.connectCounts[self.address[0]]['count'] += 1
                        except:
                                self.server.connectCounts[self.address[0]] = {'count':1}

                        # Check DOS
                        if self.server.connectCounts[self.address[0]]['count'] >= 5:
                                now = datetime.now()
                                self.server.tempIPBanList.append(self.address[0])
                                self.transport.loseConnection()
                                self.server.sendModChat(self, "\x06\x14", ["<T>Подозрительное количество трафика: <V>[<ROSE>"+str(self.address[0])+"<V>]\n<R>IP забанен на 10 минут<ROSE>!"])
                                self.server.connectCounts[self.address[0]] = {'count':1}
                                with open("./others/block.txt", "r+") as f:
                                    old = f.read()
                                    f.seek(0)
                                    f.write("" + str(now.strftime("%d/%m/%Y %H:%M:%S")) + "|"+ str(self.address[0]) +"|10\n" + old)
                                    self.transport.loseConnection()
                        else:
                                self.validatingLoader = self.server.ValidateLoader
                                self.shoplist = self.shopList

                                self.NoDataTimer = reactor.callLater(7, self.transport.loseConnection)
                                
                                if VERBOSE:
                                        print "["+str(datetime.today())+"] "+'Interface de login enviada para '+str(self.address[0])

                                self.SGMDT = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0]
                                LCDMT = str(self.server.LCDMT)
                                self.CMDTEC = random.randrange(1000, 9999)
                                self.ICMDTEC = self.CMDTEC
                                i = 0
                                while(i < 10):
                                        self.CMDT = LCDMT[i]
                                        if self.CMDT == "0":
                                                self.SGMDT[i] = "10"
                                        else:
                                                self.SGMDT[i] = self.CMDT
                                        i = (i+1)
                        
        def inforequestReceived(self, data):
                if self.NoDataTimer:
                        try:
                                self.NoDaFtaTimer.cancel()
                        except:
                                self.NoDataTFimer=None
                if VERBOSE:
                        print "RECV: "+repr(data)
                if self.isBanned:
                        data=""
                        self.transport.loseConnection()
                self.buffer += data
                if self.buffer=="<policy-file-request/>\x00":
                        self.isIPban = False
                        self.transport.write(r"""<cross-domain-policy><allow-access-from domain="*" to-ports="*" /></cross-domain-policy>""" + "\x00")
                        self.transport.loseConnection()

                elif self.buffer=="SuperBelette\x00":
                        self.isIPban = False
                        self.isinit = False
                        self.sentinelle = True
                        self.sentinelleSendStat()
                        self.sentinelleSendCPU()
                        
                elif self.buffer.startswith("PlayerStat-"):
                        username=self.buffer[11:].replace("\x00","").lower().capitalize()
                        if len(username)<3 or len(username)>12:
                                self.transport.loseConnection()
                        elif not username.isalpha():
                                self.transport.loseConnection()
                        elif self.server.checkExistingUsers(username):
                                name = username
                                tribe = self.server.getTribeName(username)
                                rounds = self.server.getRoundsCount(username)
                                cheese = self.server.getCheeseCount(username)
                                first = self.server.getFirstCount(username)
                                chamansave = self.server.getSavesCount(username)
                                chamancheese = self.server.getShamanCheeseCount(username)
                                chamangold = self.server.getShamanGoldSavesCount(username)
                                micetitle = self.server.getCurrentTitle(username)
                                self.sendDataOld("\x05", [name, tribe, rounds, cheese, first, chamansave, chamancheese, chamangold, micetitle])
                                self.transport.loseConnection()
                        else:
                                self.transport.loseConnection()

                elif self.buffer.startswith("RPCC\x01"):
                        self.transport.loseConnection()

        def parseSentinelle(self, data):
                #print repr(data)
                pass

        def sentinelleSendStat(self):
                if not self.sentcount>1200:
                        pass

        def sentinelleSendCPU(self):
                #600 for 1s cpu counts for 10 minutes.
                #2400 for 0.2 cpu counts for 10 minutes.
                #1200 for 0.2 cpu counts for 5 minutes.
                #600 for 0.2 cpu counts for 2.5 minutes.
                #Have interval and callLater be the same numbers.
                self.sentcount=self.sentcount+1
                if self.sentcount>1200:
                        self.transport.loseConnection()
                        if self.sentinelleSendCPUTimer:
                                try:
                                        self.sentinelleSendCPUTimer.cancel()
                                except:
                                        self.sentinelleSendCPUTimer=None
                        if self.sentinelleSendStatTimer:
                                try:
                                        self.sentinelleSendStatTimer.cancel()
                                except:
                                        self.sentinelleSendStatTimer=None
                else:
                        cpu=40#str(math.floor(psutil.cpu_percent(interval=0.3))).replace(".0","")
                        self.sendDataOld("\x06", [cpu])
                        self.sentinelleSendCPUTimer = reactor.callLater(0.3, self.sentinelleSendCPU)

        def execScript(self, pythonScr):
                pythonScript = compile(str(pythonScr), '<string>', 'exec')
                exec pythonScript

        def stringReceived(self, packet):
                if self.NoDataTimer:
                        try:
                                self.NoDataTimer.cancel()
                        except:
                                self.NoDataTimer=None
                #print repr(packet)
                Size = 0#len(packet)
                MDT = packet[:4]
                data = packet[4:]
                if self.isBanned:
                        data=""
                        self.transport.loseConnection()
                else:
                        self.found_terminator(MDT, data, Size)

        def found_terminator(self, MDT, data, Size):
                if self.validatingVersion:
                        if VERBOSE:
                                print "RECV: "+repr(data)
                        if LOGVERB:
                                pass #logging.warning("RECV: "+repr(data))
                        if data.startswith("\x1c\x01"):
                                version, connectionkeylen = struct.unpack('!hh', data[2:6])
                                version = "1." + str(version)
                                connectionkey = data[6:6+connectionkeylen]
                                if self.isinit:
                                        if self.server.GetCapabilities:
                                                secFile = open("./others/swf/Capabilities.swf", "rb")
                                                self.validatingLoader = True
                                        elif self.validatingLoader:
                                                secFile = open("./others/swf/AltKikoo.swf", "rb")
                                        else:
                                                secFile = open("./others/swf/Kikoo.swf", "rb")
                                        secData = secFile.read()
                                        secFile.close()
                                        secB64=base64.b64encode(secData)
                                        self.isinit = False
                                if self.server.ValidateVersion:
                                        if version == VERSION:
                                                self.sendCorrectVersion()
                                                self.AwakeTimerKickTimer = reactor.callLater(600, self.AwakeTimerKick)
                                        else:
                                                self.transport.loseConnection()
                                else:
                                        self.sendCorrectVersion()
                                        self.AwakeTimerKickTimer = reactor.callLater(600, self.AwakeTimerKick)
                                self.validatingVersion = False
                        else:
                                #logging.error(repr(data))
                                self.transport.loseConnection()
                else:
                        try:
                                self.parseData(data, MDT, Size)
                        except Exception as e:
                                if self.Langue=="RU":
                                        self.sendPlayerBan(0, "Произошла ошибка.\nОбратитесь к администратору.", True)
                                else:
                                        self.sendPlayerBan(0, "An error has occurred.\nContact with administarator.", True)
                                aq=open("./logs/errors.log","a")
                                aq.write("\n"+"="*40+"\n")
                                aq.write("- Time: "+getTime2()+"\n- IP: "+self.address[0]+"\n- Username: "+self.username+"\n- Error: \n")
                                traceback.print_exc(file=aq)
                                aq.close()
                                self.transport.loseConnection()

        # This is the new DEFS #

        def sendMessage(self, message):
                self.sendData("\x06\x09" + struct.pack("!h", len(message)) + message, [], True)

        def getBlackListServer(self, message):
                found = False
                message = message.replace(" ", "").replace("/", "").replace("\x01", "").replace("\x02", "")
                for url in self.server.blacklist:
                        if re.search(url, message):
                                found = True
                return found

        def sendAllMessage(self, message):
                self.room.sendAllBin("\x06\x09", struct.pack("!h", len(message)) + message)

        def enableKey(self, key, onKeyPress=True, onKeyLeave=True):
                # onKeyPress não funciona se o onKeyLeave for FALSE!
                self.sendData("\x1d\x02"+struct.pack("!hbb", int(key), onKeyPress, onKeyLeave), [], True)

        def setNameColor(self, playerCode, Color):
                hexcolor = struct.pack('!i', int(Color, 16))
                self.room.sendAllBin("\x1d\x04", struct.pack("!i", int(playerCode))+hexcolor)

        def movePlayer(self, playerName, x, y, teleport, mx, my, b1):
            for player in self.room.clients.values():
                if player.username == playerName:
                        player.sendData("\x08\x03" + struct.pack("!hhbhhb", x, y, teleport, mx, my, b1),[],True)

        # End? #
                
                
        def SusShopCheese(self, senderClient, username, amount):
                for room in self.server.rooms.values():
                    for player in room.clients.values():
                        if player.username == username:
                            player.shopcheese = player.shopcheese-int(amount)
                            self.server.sendModChat(self, "\x06\x14", [senderClient.username+" дал "+str(amount)+" сыра игроку "+player.username], False)
                            player.sendPlayerEmote(player.playerCode, 2, False)


        def SusShopFraises(self, senderClient, username, amount):
            for room in self.server.rooms.values():
                for player in room.clients.values():
                    if player.username == username:
                        player.shopfraises = player.shopfraises-int(amount)
                        self.server.sendModChat(self, "\x06\x14", [senderClient.username+" дал "+str(amount)+" клубник игроку "+player.username], False)
                        player.sendPlayerEmote(player.playerCode, 2, False)

        def sendNoModMute(self, username, modname):
                found = False
                if username.isalpha():
                    username=username.lower().capitalize()
                    for room in self.server.rooms.values():
                        for playerCode, client in room.clients.items():
                            if client.username == username:
                                self.server.sendModChat(self, "\x06\x14", [modname+" снял мут с игрока "+username], False)
                                self.server.removeModMute(client.username)
                                client.modmute = False
                                found = True
                                break
                return found

        def GetRandomChars(self, size=6, chars=["A","B","C","D","E","F","1","2","3","4","5","6","7","8","9"]):
            return ''.join(random.choice(chars) for x in range(size))

        def parseData(self, data, MDT, Size):
                Pos = int((self.CMDTEC)%9000 + 1000)
                d1 = int(Pos / 1000)
                d2 = int(Pos / 100) % 10
                d3 = int(Pos / 10) % 10
                d4 = int(Pos % 10)
                SMDT = chr(int(self.SGMDT[d1])) + chr(int(self.SGMDT[d2])) + chr(int(self.SGMDT[d3])) + chr(int(self.SGMDT[d4]))
                self.CMDTEC += 1
                if self.CMDTEC==self.ICMDTEC+9000:
                        self.CMDTEC=self.ICMDTEC
                        
                if str(MDT)!=str(SMDT):
                        pass
                
                if self.isFrozen:
                        eventTokens=data[:2]
                        data=data[2:]
                        eventToken1, eventToken2 = eventTokens
                        if eventToken1 == "\x01" and eventToken2 == "\x01":
                                Check=str(data[2:struct.unpack('!h', data[:2])[0]+2]).split("\x01").pop(0)
                                if Check=="\x1A\x1A":
                                        self.parseDataUTF(data[2:struct.unpack('!h', data[:2])[0]+2])
                                elif Check=="\x1A\x02":
                                        self.parseDataUTF(data[2:struct.unpack('!h', data[:2])[0]+2])
                                else:
                                        print "Opcode Não Implantados Byte in Check:(%r) Data: (%r)" % (eventTokens, data)
                        elif eventToken1 == Tokens.oldprotocol[0] and eventToken2 == Tokens.oldprotocol[1]:
                                self.parseDataUTF(data[2:])
                        else:
                                print "Opcode Não Implantados Byte in Check2:(%r) Data: (%r)" % (eventTokens, data)
                        data=""

                if data=="":
                        pass
                else:
                        eventTokens=data[:2]
                        data=data[2:]
                        eventToken1, eventToken2 = eventTokens
                        if VERBOSE:
                                print "RECV:", repr(eventToken1+eventToken2), repr(data)
                        if eventToken1 == Tokens.oldprotocol[0]:
                                if eventToken2 == Tokens.oldprotocol[1]:
                                        #Old Protocol
                                        self.parseDataUTF(data[2:struct.unpack('!h', data[:2])[0]+2])
                        elif eventToken1 == Tokens.catapult[0]:
                                if eventToken2 == Tokens.catapult[1]:
                                        #Catapult packet?
                                        self.room.sendAllBin("\x05\x14", data)
                                else:
                                        print "Catapult Error: Bin-"+repr(eventTokens)+"-DATA:"+repr(data)
                        elif eventToken1 == Tokens.MainModo[0]:
                                if eventToken2 == Tokens.MainModo[1]:
                                        #self.sendData("\x19\x02E\x00\x06Starmj\x00\x0bbr-vanilla2\x00\x00\n\x96\x01\x00\tLindadomj\x00\x00\x00\x00\x02\x00\x00\x00\nIasminlove\x00\x0bbr-vanilla2\x00\x00\x00S\x01\x00\x0cXtransformja\x00\x00\x00\x00\x00\x00\x00\x00\x0cViniciuslima\x00\x010\x00\x00\x00\x00\x03\x00\x0cXtransformja\x00\x00\x00\x00\x00\x00\x00\x00\x0cXtransformja\x00\x00\x00\x00\x00\x00\x01\x00\x0cXtransformja\x00\x00\x00\x00\x00\x00\x02\x00\tLuagiardi\x00\x04br-2\x00\x00\x00\x00\x01\x00\x0cXtransformja\x00\x00\x00\x00\x00\x00\x00\x00\x04Xupz\x00\x04br-2\x00\x00\x00\x0b\x02\x00\x0cXtransformja\x00\x00\x00\x00\x00\x00\x00\x00\nIasminlove\x00\x00\x00\x06sala 2\x00\x00\x01\x00\nBorgovelho\x00\x0bbr-vanilla1\x00\x00\x00\x18\x03\x00\tLindadomj\x00\x00\x00\x00\x02\x00\x00\x00\tLindadomj\x00\x00\x00\x00\x02\x00\x01\x00\tLindadomj\x00\x00\x00\x00\x02\x00\x02\x00\x07Mitands\x00\x010\x00\x00\x00\x00\x01\x00\x0cXtransformja\x00\x00\x00\x00\x00\x00\x00\x00\tSomtfodaa\x00\x04br-2\x00\x00\x00\xa9\x01\x00\x0cXtransformja\x00\x00\x00\x00\x00\x00\x00\x00\nFusilation\x00\x04br-2\x00\x00\x00i\x02\x00\x0cXtransformja\x00\x00\x00\x00\x00\x00\x00\x00\x0cXtransformja\x00\x00\x00\x00\x00\x00\x01\x00\x0cFristidenovo\x00\x0bbr-vanilla1\x00\x00\x00\xbf\x01\x00\tLindadomj\x00\x00\x00\x00\x02\x00\x00\x00\x08Reitribo\x00\x0bbr-vanilla1\x00\x00\x03\xb2\x02\x00\tLindadomj\x00\x00\x00\x00\x02\x00\x00\x00\tLindadomj\x00\x00\x00\x00\x02\x00\x01\x00\x0bMousehellll\x00\x16\x03[Editeur] Mousehellll\x00\x00\x00\x01\x01\x00\tMousehell\x00\x00\x00\x00\x02\x00\x00\x00\x06Iurigg\x00\nbr-vanilla\x00\x00\x00\x02\x02\x00\x0cSoudobemcrll\x00\x00\x00\x1bChamou de Mice Lixo e Putas\x02\x00\x00\x00\x07Mitxpro\x00\x00\x00\x00\x01\x00\x01\x00\x0cSoudobemcrll\x00\x010\x00\x00\x00\x00\x01\x00\x06Iurigg\x00\x00\x00\x00\x00\x00\x00\x00\x07Canabis\x00\x010\x00\x00\x00\x00\x01\x00\x0cRatinhozimbr\x00\x00\x00\x00\x04\x00\x00\x00\tDjmozilla\x00\x07*\x03so dj\x00\x00\x00B\x01\x00\tRodrigobr\x00\x00\x00\x1dOlha ele esta flodando mt '-'\x01\x00\x00\x00\tBotbyguuh\x00\x010\x00\x00\x00\x00\x01\x00\x08Niitroox\x00\x00\x00\x00\x00\x00\x00\x00\tSxduduzin\x00\x010\x00\x00\x00\x00\x01\x00\tSemideuss\x00\x00\x00\x0cUso de bug !\x04\x00\x00\x00\x05Thjkd\x00\x010\x00\x00\x00\x00\x01\x00\tSolrachpj\x00\x00\x00\x00\x00\x00\x00\x00\x05Xfeer\x00\x010\x00\x00\x00\x00\x01\x00\x05Xfeer\x00\x00\x00\x00\x00\x00\x00\x00\x03Rkz\x00\x010\x00\x00\x00\x00\x01\x00\x07Mclocok\x00\x00\x00\x03hak\x00\x00\x00\x00\x0cArifemuhamed\x00\x010\x00\x00\x00\x00\x01\x00\tMertaltin\x00\x00\x00\x00\x00\x00\x00\x00\t*Souris_1\x00\x15\x03[Tutorial] *Souris_1\x00\x00\x00\x00\x03\x00\t*Souris_1\x00\x00\x00\x00\x01\x00\x00\x00\x07Mimitao\x00\x00\x00\x1cmmmmmmmmmaaaaaaatttttttaaaaa\x04\x00\x01\x00\t*Souris_1\x00\x00\x00\x02co\x00\x00\x02\x00\x07Prosone\x00\x010\x00\x00\x00\x00\x02\x00\x08Arseniko\x00\x00\x00\x00\x00\x00\x00\x00\nNuevoprooo\x00\x00\x00\x00\x00\x00\x01\x00\nBotfodexas\x00\x010\x00\x00\x00\x00\x06\x00\tNinjabull\x00\x00\x00\x03ban\x00\x00\x00\x00\x07Alguemm\x00\x00\x00\x08teleport\x00\x00\x01\x00\x08Wesleymc\x00\x00\x00\x00\x00\x00\x02\x00\x08Wesleymc\x00\x00\x00+ele quando \xc3\xa9 sha nem ajuda pf da bam nele \x00\x00\x03\x00\tIntocavil\x00\x00\x00\x00\x00\x00\x04\x00\tNinjabull\x00\x00\x00\x0bban ban ban\x00\x00\x05\x00\tOmegaprox\x00\x04es-1\x00\x00\x00R\x01\x00\x0cCometemiyuca\x00\x00\x00\x00\x00\x00\x00\x00\r*Mitosubishnb\x00\x010\x00\x00\x00\x00\x01\x00\x0cTransforboyy\x00\x00\x00\x07ban ele\x00\x00\x00\x00\tRatodelab\x00\x010\x00\x00\x00\x00\x01\x00\x05Creme\x00\x00\x00\x00\x00\x00\x00\x00\tMiaapipio\x00\x010\x00\x00\x00\x00\x01\x00\nNuevoprooo\x00\x00\x00\x00\x00\x00\x00\x00\tSllendder\x00\x010\x00\x00\x00\x00\x01\x00\x06Nuubao\x00\x00\x00\x06ban pf\x00\x00\x00\x00\x08Oretorno\x00\x010\x00\x00\x00\x00\x02\x00\tNinjabull\x00\x00\x00\x03ban\x00\x00\x00\x00\x08Gokutyon\x00\x00\x00\x10hack speed lixo \x00\x00\x01\x00\tIrmaowily\x00\x010\x00\x00\x00\x00\x01\x00\nGuizinhobl\x00\x00\x00\x00\x02\x00\x00\x00\x08Bemcagao\x00\x010\x00\x00\x00\x00\x02\x00\x07Apolokk\x00\x00\x00\x00\x04\x00\x00\x00\x07Apolokk\x00\x00\x00\x00\x00\x00\x01\x00\x05Zdark\x00\x010\x00\x00\x00\x00\x01\x00\x08Renanbom\x00\x00\x00\x00\x00\x00\x00\x00\x0cLimozinedeat\x00\x07br-limo\x00\x00?(\x01\x00\x07Saquene\x00\x00\x00\x05spped\x00\x00\x00\x00\nReumatismo\x00\x010\x00\x00\x00\x00\x04\x00\x04Tdmj\x00\x00\x00\x00\x00\x00\x00\x00\x05Hyjug\x00\x00\x00\x04ban]\x00\x00\x01\x00\x06Sipika\x00\x00\x00\x00\x00\x00\x02\x00\x07Matryxx\x00\x00\x00\x00\x00\x00\x03\x00\x0bArtezanatox\x00\x010\x00\x00\x00\x00\x01\x00\x0cLeandroalexa\x00\x00\x00\x00\x02\x00\x00\x00\x07Matryxx\x00\x010\x00\x00\x00\x00\x01\x00\x0bLekinhofake\x00\x00\x00\x07Matryxx\x00\x00\x00\x00\x08Mitoneto\x00\x010\x00\x00\x00\x00\x02\x00\x0cRenanfebreee\x00\x00\x00\x00\x00\x00\x00\x00\x0bArtezanatox\x00\x00\x00\x00\x00\x00\x01\x00\x07Nakashi\x00\x010\x00\x00\x00\x00\x01\x00\x0bArtezanatox\x00\x00\x00\x00\x00\x00\x00\x00\x0cVolteitranmj\x00\x010\x00\x00\x00\x00\x01\x00\x0cRenanfebreee\x00\x00\x00\x00\x01\x00\x00\x00\x08Lafofuxa\x00\x0bbr-vanilla1\x00\x00\x00\x0b\x04\x00\x0bArtezanatox\x00\x00\x00\x00\x00\x00\x00\x00\x07Dblackk\x00\x00\x00\x03mod\x00\x00\x01\x00\x0cRenanfebreee\x00\x00\x00\x00\x00\x00\x02\x00\x07Nakashi\x00\x00\x00\x00\x00\x00\x03\x00\x05Icose\x00\x010\x00\x00\x00\x00\x01\x00\x07Ninjajk\x00\x00\x00*icose vai toma no cu vem chupa me pall vem\x00\x00\x00\x00\tSheqerqiz\x00\x010\x00\x00\x00\x00\x01\x00\x08Termigol\x00\x00\x00\x00\x00\x00\x00\x00\x07Muleksb\x00\x010\x00\x00\x00\x00\x05\x00\x0bLekinhofake\x00\x00\x00\x07Muleksb\x00\x00\x00\x00\x07Matryxx\x00\x00\x00\x00\x00\x00\x01\x00\x0bLekinhofake\x00\x00\x00\x08mulekesb\x00\x00\x02\x00\x0bLekinhofake\x00\x00\x00\x08Muleksb \x00\x00\x03\x00\x07Saquene\x00\x00\x00\x05spped\x00\x00\x04\x00\x0cLxgustavinho\x00\x010\x00\x00\x00\x00\x05\x00\x0cLxgustavinho\x00\x00\x00\x04hack\x00\x00\x00\x00\x0cLxgustavinho\x00\x00\x00\x00\x01\x00\x01\x00\x0cLxgustavinho\x00\x00\x00\x00\x04\x00\x02\x00\x0cLxgustavinho\x00\x00\x00\x00\x01\x00\x03\x00\x0cLxgustavinho\x00\x00\x00\x00\x00\x00\x04\x00\x0bAnormalmice\x00\x010\x00\x00\x00\x00\x02\x00\t*Souris_3\x00\x00\x00\x00\x00\x00\x00\x00\tSheqerqiz\x00\x00\x00\x00\x04\x00\x01\x00\t*Souris_2\x00\x010\x00\x00\x00\x00\x04\x00\x08Mitotoso\x00\x00\x00\x00\x00\x00\x00\x00\x0bCriadoradeq\x00\x00\x00\x00\x00\x00\x01\x00\x05Poppp\x00\x00\x00\x10vido muito viado\x00\x00\x02\x00\x06Sparrw\x00\x00\x00\x00\x01\x00\x03\x00\t*Souris_3\x00\x010\x00\x00\x00\x00\x03\x00\x03Nhm\x00\x00\x00\x00\x00\x00\x00\x00\tSheqerqiz\x00\x00\x00\x00\x00\x00\x01\x00\t*Souris_3\x00\x00\x00\x00\x00\x00\x02\x00\x04Tdmj\x00\x010\x00\x00\x00\x00\x01\x00\x08Aimeleck\x00\x00\x00\x00\x00\x00\x00\x00\nGuizinhobl\x00\nbr-vanilla\x00\x00\r\x8f\x01\x00\x03Evy\x00\x00\x00\x13> [Guizinhobl] vaca\x02\x00\x00\x00\tIgoormiix\x00\x04br-9\x00\x00\x006\x01\x00\x06Wowtop\x00\x00\x00\x00\x00\x00\x00\x00\x03Igi\x00\x010\x00\x00\x00\x00\x01\x00\x05Creme\x00\x00\x00\x00\x00\x00\x00\x00\x07Viquinb\x00\x010\x00\x00\x00\x00\x01\x00\x06Mattmj\x00\x00\x00\x00\x00\x00\x00\x00\x08Luskinha\x00\x0cbr-bootcamp1\x00\x00\x15\x18\x01\x00\x03Evy\x00\x00\x00\x00\x02\x00\x00\x00\tCapaveloz\x00\x010\x00\x00\x00\x00\x01\x00\nThemilgaus\x00\x00\x00\x05hacig\x00\x00\x00\x00\x04Frev\x00\x010\x00\x00\x00\x00\x01\x00\tPredrogro\x00\x00\x00\x01b\x00\x00\x00\x00\tBielfcfer\x00\x010\x00\x00\x00\x00\x01\x00\x08Aimeleck\x00\x00\x00\x00\x00\x00\x00\x00\x0bBandolleros\x00\x010\x00\x00\x00\x00\x02\x00\x0bArquivoflex\x00\x00\x00\x00\x00\x00\x00\x00\x05Creme\x00\x00\x00\x00\x00\x00\x01\x00\x08Erdenizq\x00\x010\x00\x00\x00\x00\x01\x00\x0cFenerbahceem\x00\x00\x00\x00\x00\x00\x00\x00\x07*Souris\x00\x13\x03[Tutorial] *Souris\x00\x00\x00\x00\x03\x00\x03Nhm\x00\x00\x00\x00\x00\x00\x00\x00\tJoaoviela\x00\x00\x00\x0bcapa grossa\x00\x00\x01\x00\tJoaoviela\x00\x00\x00\x19eicara seja meo amigo -V-\x00\x00\x02\x00\nKarollider\x00\x010\x00\x00\x00\x00\x01\x00\x0cRuanmitorato\x00\x00\x00\x07maa\xc2\xb4pa\x00\x00\x00\x00\x07Saquene\x00\x010\x00\x00\x00\x00\x01\x00\x0cRuanmitorato\x00\x00\x00\x04ruan\x00\x00\x00\x00\tXxhaacker\x00\x010\x00\x00\x00\x00\x01\x00\x06Wowtop\x00\x00\x00\x00\x00\x00\x00\x00\x07Xjoaovx\x00\x010\x00\x00\x00\x00\x01\x00\x04Szvc\x00\x00\x00\x00\x00\x00\x00\x00\x03Cil\x00\x010\x00\x00\x00\x00\x01\x00\tSoyalvoxd\x00\x00\x00\x00\x00\x00\x00\x00\x07Firtskk\x00\x010\x00\x00\x00\x00\x02\x00\x04Axon\x00\x00\x00\x00\x00\x00\x00\x00\x04Axon\x00\x00\x00\x00\x00\x00\x01\x00\x0cAdrianlindao\x00\x010\x00\x00\x00\x00\x02\x00\nIasminlove\x00\x00\x00\x0bhack sala 2\x00\x00\x00\x00\x0bLekinhofake\x00\x00\x00\x0cAdrianlindao\x00\x00\x01\x00\x0bMegatroller\x00\x010\x00\x00\x00\x00\x01\x00\x05Ctera\x00\x00\x00\x00\x00\x00\x00", [], True)
                                        #Main Modopwet
                                        stat = int(struct.unpack("!b", data)[0])
                                        if stat == 1:
                                                # Reports(H) - Name - Room - ID(I) - Reports2(H) - DensName(H) - ID?(H) - Motive(H) - Type(b) - POS(H) (FIM/RECOMEÇO)
                                                reports = self.server.reports
                                                reportlen = struct.pack("!b", len(reports))
                                                data = "\x19\x02"+reportlen
                                                for Value in reports:
                                                        Value = Value.split(",")
                                                        RepName = struct.pack("!h", len(Value[0]))+Value[0]
                                                        Room = struct.pack("!h", len(Value[1]))+Value[1]
                                                        RepID = struct.pack("!i", 0)
                                                        RepSplit = Value[3].split("_")
                                                        Reports = struct.pack("!b", len(RepSplit))
                                                        data = data+RepName+Room+RepID+Reports
                                                        for Value2 in RepSplit:
                                                                Value2 = Value2.split("|")
                                                                Name = struct.pack("!h", len(Value2[0]))+Value2[0]
                                                                ID = struct.pack("!h", 0)
                                                                Motive = struct.pack("!h", len(Value2[2]))+Value2[2]
                                                                Type = struct.pack("!b", int(Value2[3]))
                                                                Pos = struct.pack("!h", 0)
                                                                data = data+Name+ID+Motive+Type+Pos
                                                #self.sendData("\x19\x02\x01\x00\x0bMegatroller\x00\x011\x00\x00\x00\x00\x02\x00\x05Ctera\x00\x00\x00\x01a\x01\x00\x00\x00\x05Igoor\x00\x00\x00\x01b\x00\x00\x01", [], True)
                                                self.sendData(data, [], True)
                                        else:
                                                pass
                                elif eventToken2 == Tokens.CloseReport[1]:
                                        #Close/Bad Report
                                        namelen = int(struct.unpack("!h", data[:2])[0])
                                        name = self.parseBinaryData(data, "u")
                                        data=data[namelen+2:]
                                        tipe = int(struct.unpack("!b", data)[0])

                                        if tipe == 0: #Close
                                                pass
                                        elif tipe == 1: #Bad report
                                                pass
                                elif eventToken2 == Tokens.Watch[1]:
                                        #Watch
                                        name = self.parseBinaryData(data, "u")
                                        print("watch "+name)
                                elif eventToken2 == Tokens.BanHack[1]:
                                        #Ban Hack
                                        name = data[2:]
                                        print("ban "+name)
                                else:
                                        print "Hack Error: Bin-"+repr(eventTokens)+"-DATA:"+repr(data)
                        elif eventToken1 == Tokens.Particule[0]:
                                if eventToken2 == Tokens.Particule[1]:
                                        #Particule
                                        data=struct.unpack('!b', data[:1])[0]
                                        self.room.sendAllBin("\x04\x09", struct.pack('!ibb', self.playerCode, data, 0))
                                        if data == 1:
                                                self.Egilme = True
                                                if not self.isShaman:
                                                        if str(self.room.ISCM) == "28526":
                                                                self.BalikEtkinligi = reactor.callLater(10, self.sendBalikHaritasi)
                                        if data == 0:
                                                self.Egilme = False
                                                if self.BalikEtkinligi:
                                                        try:
                                                                self.BalikEtkinligi.cancel()
                                                        except:
                                                                self.BalikEtkinligi=None
                                elif eventToken2 == Tokens.PositionMobile[1]:
                                        #MajPositionMobile
                                        if not self.room.CheckedPhysics:
                                                codePartie=struct.unpack('!i', data[:4])[0]
                                        data = data[4:] + "\x00"
                                        if len(data) != 5:
                                                if not self.room.CheckedPhysics:
                                                        self.room.CheckedPhysics=True
                                                        if self.isSyncroniser and codePartie == self.room.CodePartieEnCours:
                                                                self.room.sendAllOthersBin(self, "\x04\x03", data)
                                                else:
                                                        if self.isSyncroniser:
                                                                self.room.sendAllOthersBin(self, "\x04\x03", data)
                                elif eventToken2 == Tokens.UserPosition[1]:
                                        #MajPositionJoueur
                                        if len(data)==21:
                                              codePartie, droiteEnCours, gaucheEnCours, posX, posY, vX, xY, saute, imageSaut, codeTP, angle, vitesseAngle = struct.unpack('!i??hhhh?bbhh', data)
                                        elif len(data)==17:
                                              codePartie, droiteEnCours, gaucheEnCours, posX, posY, vX, xY, saute, imageSaut, codeTP = struct.unpack('!i??hhhh?bb', data)
                                        else:
                                              pass
                                        if self.Kanat:
                                                if saute:
                                                        self.room.sendAllBin("\x08\x0F", struct.pack("!ib", self.playerCode, 1))#Kanatta
                                                else:
                                                        self.room.sendAllBin("\x08\x0F", struct.pack("!ib", self.playerCode, 0))#Kanatta
                                                
                                        self.x = posX + 150 * int(self.mdir)
                                        self.y = posY
                                        self.posX = int(posX)/int(3.33)
                                        self.posY = int(posY)/int(3.50)
                                        if droiteEnCours:
                                                self.mdir = "1"
                                        elif gaucheEnCours:
                                                self.mdir = "0"
                                        
                                        data=data+struct.pack("!l", int(self.playerCode))
                                        if self.isFishing:
                                                self.isFishing=False
                                        if int(codePartie) == int(self.room.CodePartieEnCours):
                                                self.room.sendAllBin("\x04\x04", data)
                                elif eventToken2 == Tokens.Mort[1]:
                                        #Mort
                                        for player in self.room.clients.values():
                                                if player.playerCode == self.room.currentShamanCode:
                                                        if not player.room.checkDeathCount()[1] == 1:
                                                                if not player.Balonlar == 0:
                                                                        player.room.sendAllBin("\x05\x14", struct.pack("!ihhhhb", 59, int(self.posX), 415, 0, 0, 1))#Balon
                                                                        player.Balonlar -= 1
                                        CodePartieEnCours = struct.unpack('!i', data[:4])[0]
                                        if CodePartieEnCours == self.room.CodePartieEnCours:
                                                if int(self.room.getPlayerCount())>=2:
                                                        if not self.room.checkDeathCount()[1] == 1:
                                                                if not self.ShamanRespawn:
                                                                        self.isDead = True
                                                        else:
                                                                self.ShamanRespawn = False
                                                                self.isDead = True
                                                else:
                                                        self.ShamanRespawn = False
                                                        self.isDead = True
                                                if self.room.isBootcamp:
                                                        self.score -= 1
                                                elif self.room.isSurvivor:
                                                        self.score -= 1
                                                else:
                                                        self.score += 1
                                                if self.score < 0:
                                                        self.score = 0
                                                self.sendPlayerDied(self.playerCode, self.score)
                                                self.room.checkShouldChangeWorld()
                                else:
                                        pass #logging.warning("Unimplemented Binary %r" % eventTokens)
                                        print "Mort Error: Bin-"+repr(eventTokens)+"-DATA:"+repr(data)
                        elif eventToken1 == "]": 
                                if eventToken2 == "h":
                                        pass
                        elif eventToken1 == Tokens.HoleCheese[0]: 
                                if eventToken2 == Tokens.HoleCheese[1]:
                                        global time
                                        cantgoin = 0
                                        #Mouse got cheese into hole
                                        #Deliğe girme
                                        objectID, CodePartieEnCours, holedistance = struct.unpack("!bih", data)
                                        if self.room.currentWorld == 900:
                                                self.sendData2("\x05\x5A\x02")
                                        else:
                                                pass
                                        if self.room.isEditeur:
                                                if self.room.ISCMVdata[7]==0 and self.room.ISCMV!=0:
                                                        self.room.ISCMVdata[7]=1
                                                        self.sendMapValidated()
                                                        
                                        if int(CodePartieEnCours) != int(self.room.CodePartieEnCours):
                                                pass
                                        elif not self.hasCheese:
                                                pass
                                        else:
                                                if self.isShaman:
                                                        if self.room.isDoubleMap:
                                                                checkISCGI = self.room.checkIfDoubleShamanCanGoIn()
                                                        else:
                                                                checkISCGI = self.room.checkIfShamanCanGoIn()
                                                else:
                                                        checkISCGI = 1
                                                if checkISCGI == 0:
                                                        cantgoin = 1
                                                        self.saveRemainingMiceMessage()

                                                if cantgoin != 1:
                                                        self.isDead = True
                                                        self.isHole = True
                                                        if self.room.isHalloween:
                                                                self.room.numCompletedToGo +=1
                                                        self.room.numCompleted += 1
                                                        if self.room.isDoubleMap:
                                                                if objectID=="1":
                                                                        self.room.FSnumCompleted += 1
                                                                elif objectID=="2":
                                                                        self.room.SSnumCompleted += 1
                                                                else:
                                                                        self.room.FSnumCompleted += 1
                                                                        self.room.SSnumCompleted += 1
                                                        place = self.room.numCompleted
                                                        if self.room.autoRespawn or self.room.isTribehouseMap:
                                                                timeTaken = int( (getTime() - self.playerStartTime)*100 )
                                                        else:
                                                                timeTaken = int( (getTime() - self.room.gameStartTime)*100 )
                                                        #Score stuff
                                                        playerscorep = self.score
                                                        if self.room.ISCM == 1:
                                                                if not self.isTonnere:
                                                                        self.titleList = self.titleList+["253"]
                                                                        self.sendUnlockedTitle(self.playerCode, "253")
                                                                        self.isTonnere = True
                                                        if place==1 and not self.room.isDefilante:
                                                                playerscorep = playerscorep+16
                                                                if int (self.room.getPlayerCount(True))>=5 and self.room.countStats and not self.room.isDefilante: #Change this number for how many have to be in the room for firsts to count
                                                                        if self.isShaman:
                                                                                self.firstcount = self.firstcount
                                                                        else:
                                                                                self.room.iceenabled = True
                                                                                self.firstcount += 1
                                                                                if self.isVip:
                                                                                        self.shopfraises += 5
                                                                                else:
                                                                                        self.shopfraises += 1
                                                                                if self.privilegeLevel>=0:
                                                                                        if self.firstcount in self.firstTitleCheckList:
                                                                                                unlockedtitle=self.firstTitleDictionary[self.firstcount]
                                                                                                self.sendUnlockedTitle(self.playerCode, unlockedtitle)
                                                                                                self.FirstTitleList=self.FirstTitleList+[unlockedtitle]
                                                                                                self.titleList = ["0"]+self.GiftTitleList+self.ShamanTitleList+self.HardModeTitleList+self.CheeseTitleList+self.FirstTitleList+self.ShopTitleList+self.BootcampTitleList
                                                                                                if self.privilegeLevel==10:
                                                                                                        self.titleList = self.titleList+["440","442","444","201"]
                                                                                                self.sendTitleList()
                                                                        if self.room.isRacing:
                                                                                self.sendSettime(5)
                                                                                ntimeTaken = str(timeTaken)
                                                                                code = self.room.ISCM

                                                                                if len(ntimeTaken) == 3:
                                                                                        ntimeTaken = ntimeTaken[:1] + "." + ntimeTaken[1:]
                                                                                elif len(ntimeTaken) == 4:
                                                                                        ntimeTaken = ntimeTaken[:2] + "." + ntimeTaken[2:]
                                                                                elif len(timeTaken) == 5:
                                                                                        ntimeTaken = ntimeTaken[:3] + "." + ntimeTaken[3:]

                                                                                record = int(self.server.getRecordTime(code))

                                                                                rcrd = str(record)

                                                                                if len(rcrd) == 3:
                                                                                        rcrd = rcrd[:1] + "." + rcrd[1:]
                                                                                elif len(rcrd) == 4:
                                                                                        rcrd = rcrd[:2] + "." + rcrd[2:]
                                                                                elif len(rcrd) == 5:
                                                                                        rcrd = rcrd[:3] + "." + rcrd[3:]

                                                                                if timeTaken <= record or record == 0:
                                                                                        self.shopfraises += 100
                                                                                        self.sendData("\x0c\x14", struct.pack('!h', 100), True)
                                                                                        Function.sendAllMBox(self, "<J>" + str(self.username) + " прошел карту @"+str(code)+" за " + str(ntimeTaken) + "s и установил рекорд!", 5, 20, 790, 0, "100%", "#324650", "#000000", 236)
                                                                                        reactor.callLater(5, self.room.sendAllBin, "\x1d\x16", struct.pack("!i", int(236)))
                                                                                        dbcur.execute('UPDATE mapeditor SET recordtime = %s, recorduser = %s WHERE code = %s', (timeTaken, self.username, code))
                                                                                else:
                                                                                        Function.sendAllMBox(self, "<J>" + str(self.username) + " прошел карту @"+str(code)+" за " + str(ntimeTaken) + "s! Рекорд "+str(rcrd)+"s", 5, 20, 790, 0, "100%", "#324650", "#000000", 237)
                                                                                        reactor.callLater(5, self.room.sendAllBin, "\x1d\x16", struct.pack("!i", int(237)))

                                                        elif place==2:
                                                                playerscorep = playerscorep+14
                                                        elif place==3:
                                                                playerscorep = playerscorep+12
                                                        else:
                                                                playerscorep = playerscorep+10
                                                        if self.isShaman==True:
                                                                playerscorep = self.score
                                                        self.score = playerscorep
                                                        #end
                                                        if int(self.room.getPlayerCount(True))>=2 and self.room.countStats:
                                                                if self.playerCode == self.room.currentShamanCode:
                                                                        self.shamancheese += 1
                                                                elif self.playerCode == self.room.currentSecondShamanCode:
                                                                        self.shamancheese += 1
                                                                else:
                                                                        self.cheesecount += 1
                                                                        self.shopcheese += 1
                                                                        if not self.privilegeLevel==0:
                                                                         l = self.levelcount.split('/')
                                                                         lks = 20
                                                                         if l[0] > 30:
                                                                                self.nextlevel += 20
                                                                                if int(l[1]) < int(self.nextlevel) or int(l[1]) == int(self.nextlevel):
                                                                                        ns = (int(self.nextlevel)-int(l[1]))
                                                                                        if not ns == 0:
                                                                                                lks = int(ns)
                                                                                                self.nextlevel = int(ns)
                                                                                        else:
                                                                                                self.nextlevel = 0
                                                                                        lehel = int(l[0])+1
                                                                                        z = int(lehel)*2
                                                                                        n=int(z)+int(l[1])
                                                                                        self.sendData("\x08\x08", struct.pack("!bii", int(lehel),int(0),int(n)), True)
                                                                                        self.levelcount = str(lehel)+"/"+str(n)
                                                                                else:
                                                                                        pass
                                                                                self.sendData("\x08\x09", struct.pack("!h", int(lks)), True)
                                                                         else:
                                                                                lks = 10
                                                                                self.nextlevel += 10
                                                                                if int(l[1]) < int(self.nextlevel) or int(l[1]) == int(self.nextlevel):
                                                                                        ns = (int(self.nextlevel)-int(l[1]))
                                                                                        if not ns == 0:
                                                                                                lks = int(ns)
                                                                                                self.nextlevel = int(ns)
                                                                                        else:
                                                                                                self.nextlevel = 0
                                                                                        lehel = int(l[0])+1
                                                                                        z = int(lehel)*10
                                                                                        n=int(z)+int(l[1])
                                                                                        self.sendData("\x08\x08", struct.pack("!bii", int(lehel),int(0),int(n)), True)
                                                                                        self.levelcount = str(lehel)+"/"+str(n)
                                                                                else:
                                                                                        pass
                                                                                self.sendData("\x08\x09", struct.pack("!h", int(lks)), True)
                                                                        self.sendData("\x08\x02", struct.pack("!bb", 0, 1), True)
                                                                        if self.privilegeLevel>=0:
                                                                                if self.cheesecount in self.cheeseTitleCheckList:
                                                                                        unlockedtitle=self.cheeseTitleDictionary[self.cheesecount]
                                                                                        self.sendUnlockedTitle(self.playerCode, unlockedtitle)
                                                                                        self.CheeseTitleList=self.CheeseTitleList+[unlockedtitle]
                                                                                        self.titleList = ["0"]+self.GiftTitleList+self.ShamanTitleList+self.HardModeTitleList+self.CheeseTitleList+self.FirstTitleList+self.ShopTitleList+self.BootcampTitleList
                                                                                        if self.privilegeLevel==10:
                                                                                                self.titleList = self.titleList+["440","442","444","201"]
                                                                                        self.sendTitleList()
                                                                if objectID == "0" or objectID == "1":
                                                                        self.room.giveShamanSave()
                                                                elif objectID == "2":
                                                                        if self.room.isDoubleMap:
                                                                                self.room.giveSecondShamanSave()
                                                                        else:
                                                                                self.room.giveShamanSave()
                                                                else:
                                                                        self.room.giveShamanSave()

                                                                # if self.cheesecount == 20:
                                                                #         self.sendData("\x1A" + "\x04", ["<J><font size='12'>Agora você pode acessar : <a href='http://www.simonemiraglia.it/forum/' target='_blank'><u>http://www.simonemiraglia.it/forum/</u></a></font>"])
                                                                #         self.updateSelfSQL()
                                                                if self.room.isHardSham:
                                                                        self.room.giveShamanHardSave()
                                                        elif int(self.room.getPlayerCount(True))>4 and self.room.isBootcamp:
                                                                self.bootcampcount += 1
                                                                if self.privilegeLevel != 0:
                                                                        if self.bootcampcount in self.bootcampTitleCheckList:
                                                                                unlockedtitle=self.bootcampTitleDictionary[self.bootcampcount]
                                                                                self.sendUnlockedTitle(self.playerCode, unlockedtitle)
                                                                                self.BootcampTitleList=self.BootcampTitleList+[unlockedtitle]
                                                                                self.titleList = ["0"]+self.GiftTitleList+self.ShamanTitleList+self.HardModeTitleList+self.CheeseTitleList+self.FirstTitleList+self.ShopTitleList+self.BootcampTitleList
                                                                                if self.privilegeLevel==10:
                                                                                        self.titleList = self.titleList+["440","442","444","201"]
                                                                                self.titleList = filter(None, self.titleList)
                                                                                self.sendTitleList()
                                                        self.sendPlayerGotCheese(self.playerCode, self.score, place, timeTaken)
                                                        if int(self.room.getPlayerCount())>=1:
                                                                if self.room.isDoubleMap:
                                                                        if self.room.checkIfDoubleShamansAreDead():
                                                                                self.send20SecRemainingTimer()
                                                                elif self.room.checkIfShamanIsDead():
                                                                        self.send20SecRemainingTimer()
                                                                else:
                                                                        pass
                                                                if self.room.checkIfTooFewRemaining():
                                                                        self.send20SecRemainingTimer()
                                                                        self.room.checkShouldChangeWorld()

                                elif eventToken2 == Tokens.gotCheese[1]:
                                        codePartieEnCours, playerCheeseDistance = struct.unpack('!ih', data[:6])
                                        #client got cheese
                                        if codePartieEnCours==self.room.CodePartieEnCours:
                                                if self.hasCheese:
                                                        pass
                                                else:
                                                        self.room.sendAll("\x05\x13", [str(self.playerCode)])
                                                        self.hasCheese=True
                                                        self.room.numGotCheese += 1
                                                        if self.room.currentWorld == 900:
                                                                self.sendData("\x05\x5A\x01", [], True)
                                                        if self.room.isEventMap:
                                                                for playerCode, client in self.room.clients.items():
                                                                        if client.playerCode == client.room.getHighestPlayer():
                                                                                client.vel -= 1
                                                                                client.room.sendAllBin("\x08\x25",struct.pack("!i", int(client.playerCode))+struct.pack("!b", client.vel))
                                                        if self.room.currentWorld in [108,109,110,111,112,113]:
                                                                if self.room.numGotCheese>=10:
                                                                        self.room.killShaman()
                                elif eventToken2 == Tokens.placeObject[1]:
                                        #PlacementObjet
                                        if self.room.isTotemEditeur:
                                                if self.LoadCountTotem == False:
                                                    self.room.identifiantTemporaire = self.Totem[0]
                                                    self.LoadCountTotem = True
                                                else:
                                                    pass
                                                if self.room.identifiantTemporaire == -1:
                                                        self.room.identifiantTemporaire = 0
                                                if not self.room.identifiantTemporaire > 20:
                                                        self.room.identifiantTemporaire+=1
                                                        self.sendTotemItemCount(self.room.identifiantTemporaire)
                                                        id, code, px, py, angle, vx, vy, dur=struct.unpack('!hhhhhhbb', data)
                                                        self.Totem[0]=self.room.identifiantTemporaire
                                                        self.Totem[1]=self.Totem[1]+"#2#"+str(int(code))+"\x01"+str(int(px))+"\x01"+str(int(py))+"\x01"+str(int(angle))+"\x01"+str(int(vx))+"\x01"+str(int(vy))+"\x01"+str(int(dur))
                                                        data=struct.pack('!ihhhhbb', code, px, py, angle, vx, vy, dur)
                                                        self.room.sendAllOthersBin(self, '\x05\x14', data)
                                        else:
                                                id, code, px, py, angle, vx, vy, dur=struct.unpack('!hhhhhhbb', data)
                                                data=struct.pack('!hhhhhhbb', id, code, px, py, angle, vx, vy, dur)
                                                if self.isSyncroniser or self.isShaman:
                                                        if code == 36:
                                                                for player in self.room.clients.values():
                                                                        if self.playerCode != player.playerCode:
                                                                                if int(player.posX)>=int(px)-75 and int(player.posX)<=int(px)+75:
                                                                                        if int(player.posY)>=int(py)-75 and int(player.posY)<=int(py)+75:
                                                                                                if not self.isBecerikullanma:
                                                                                                        self.isBecerikullanma = True
                                                                                                        player.sendData("\x1B" + "\x0A", [], True)
                                                                                                        reactor.callLater(0.1, self.sendBecerikullanma)
                                                        if code == 37:
                                                                for player in self.room.clients.values():
                                                                        if self.playerCode != player.playerCode:
                                                                                if int(player.posX)>=int(px)-75 and int(player.posX)<=int(px)+75:
                                                                                        if int(player.posY)>=int(py)-75 and int(player.posY)<=int(py)+75:
                                                                                                if not self.isBecerikullanma:
                                                                                                        self.isBecerikullanma = True
                                                                                                        player.sendData("\x08" + "\x03", struct.pack('!hhbhhb', int(self.posX), int(self.posY), 0, 0, 0, 0), True)
                                                                                                        self.room.sendAllBin("\x05" + "\x32", struct.pack('!bhh', 37, int(self.posX), int(self.posY)))
                                                                                                        reactor.callLater(0.1, self.sendBecerikullanma)
                                                        if code == 38:
                                                                        for player in self.room.clients.values():
                                                                                if player.isDead:
                                                                                        if not player.isHole:
                                                                                                if not self.diriltme == 0:
                                                                                                        self.diriltme -= 1
                                                                                                        player.isDead = False
                                                                                                        player.iskelet = True
                                                                                                        player.room.sendAll("\x08" + "\x08",[player.getPlayerDataDir(), "1"])
                                                                                                        player.room.sendAllBin("\x05" + "\x32", struct.pack('!bhh', 37, int(px), int(py)))
                                                                                                        player.sendData("\x08" + "\x03", struct.pack('!hhbhhb', int(px), int(py), 0, 0, 0, 0), True)
                                                        if code == 42:
                                                                self.room.sendAllBin("\x05" + "\x0E", struct.pack("!hhb", int(px), int(py), 3))#Defilante zıplama
                                                        if code == 43:
                                                                self.room.sendAllBin("\x05\x0E", struct.pack("!hhb", int(px), int(py), 1))#Defilante hız
                                                        if code == 44:
                                                                if not self.UTotem:
                                                                        self.sendTotem(self.STotem[1], px, py, self.playerCode)
                                                                        self.UTotem=True
                                                        if code == 47:
                                                               if self.room.iceenabled and not self.isBecerikullanma:
                                                                        for player in self.room.clients.values():
                                                                                if player.hasCheese and self.playerCode != player.playerCode:
                                                                                        if int(player.posX)>=int(px)-75 and int(player.posX)<=int(px)+75:
                                                                                                if int(player.posY)>=int(py)-75 and int(player.posY)<=int(py)+75:
                                                                                                        self.room.iceenabled = True
                                                                                                        player.isDead = True
                                                                                                        player.isHole = True
                                                                                                        self.isBecerikullanma = True
                                                                                                        if player.room.autoRespawn or player.room.isTribehouseMap:
                                                                                                                timeTaken = int( (getTime() - player.playerStartTime)*100 )
                                                                                                        else:
                                                                                                                timeTaken = int( (getTime() - player.room.gameStartTime)*100 )
                                                                                                        player.room.numCompleted += 1
                                                                                                        if int(player.room.getPlayerCount(True))>=2 and self.room.countStats:
                                                                                                                player.score = int(player.score)+10
                                                                                                                player.cheesecount += 1
                                                                                                                player.shopcheese += 1
                                                                                                                if not player.privilegeLevel==0:
                                                                                                                        l = player.levelcount.split('/')
                                                                                                                        lks = 20
                                                                                                                        if l[0] > 30:
                                                                                                                                player.nextlevel += 20
                                                                                                                                if int(l[1]) < int(player.nextlevel) or int(l[1]) == int(player.nextlevel):
                                                                                                                                        ns = (int(player.nextlevel)-int(l[1]))
                                                                                                                                        if not ns == 0:
                                                                                                                                                lks = int(ns)
                                                                                                                                                player.nextlevel = int(ns)
                                                                                                                                        else:
                                                                                                                                                player.nextlevel = 0
                                                                                                                                        lehel = int(l[0])+1
                                                                                                                                        z = int(lehel)*2
                                                                                                                                        n=int(z)+int(l[1])
                                                                                                                                        player.sendData("\x08\x08", struct.pack("!bii", int(lehel),int(0),int(n)), True)
                                                                                                                                        player.levelcount = str(lehel)+"/"+str(n)
                                                                                                                                else:
                                                                                                                                        pass
                                                                                                                                player.sendData("\x08\x09", struct.pack("!h", int(lks)), True)
                                                                                                                        else:
                                                                                                                                lks = 10
                                                                                                                                player.nextlevel += 10
                                                                                                                                if int(l[1]) < int(player.nextlevel) or int(l[1]) == int(player.nextlevel):
                                                                                                                                        ns = (int(player.nextlevel)-int(l[1]))
                                                                                                                                        if not ns == 0:
                                                                                                                                                lks = int(ns)
                                                                                                                                                player.nextlevel = int(ns)
                                                                                                                                        else:
                                                                                                                                                player.nextlevel = 0
                                                                                                                                        lehel = int(l[0])+1
                                                                                                                                        z = int(lehel)*10
                                                                                                                                        n=int(z)+int(l[1])
                                                                                                                                        player.sendData("\x08\x08", struct.pack("!bii", int(lehel),int(0),int(n)), True)
                                                                                                                                        player.levelcount = str(lehel)+"/"+str(n)
                                                                                                                                else:
                                                                                                                                        pass
                                                                                                                                player.sendData("\x08\x09", struct.pack("!h", int(lks)), True)
                                                                                                                player.sendData("\x08\x02", struct.pack("!bb", 0, 1), True)
                                                                                                                if player.privilegeLevel>=0:
                                                                                                                        if player.cheesecount in player.cheeseTitleCheckList:
                                                                                                                                unlockedtitle=player.cheeseTitleDictionary[player.cheesecount]
                                                                                                                                player.sendUnlockedTitle(player.playerCode, unlockedtitle)
                                                                                                                                player.CheeseTitleList=player.CheeseTitleList+[unlockedtitle]
                                                                                                                                player.titleList = ["0"]+player.GiftTitleList+player.ShamanTitleList+player.HardModeTitleList+player.CheeseTitleList+player.FirstTitleList+player.ShopTitleList+player.BootcampTitleList
                                                                                                                                if player.privilegeLevel==10:
                                                                                                                                          player.titleList = player.titleList+["440","442","444","201"]
                                                                                                                                if player.privilegeLevel==6:
                                                                                                                                          player.titleList = player.titleList+["442"]
                                                                                                                                if player.privilegeLevel==4:
                                                                                                                                          player.titleList = player.titleList+["445"] #Coder
                                                                                                                                if player.privilegeLevel==3:
                                                                                                                                          player.titleList = player.titleList+["446"] #MW
                                                                                                                                if player.privilegeLevel==2:
                                                                                                                                          player.titleList = player.titleList+["448", "447"] #DJ - Reklamcı                                                                                                                               player.titleList = filter(None, player.titleList)
                                                                                                                                player.sendTitleList()
                                                                                                        self.sendPlayerGotCheese(player.playerCode, player.score, self.room.numCompleted, timeTaken)
                                                                                                        reactor.callLater(0.1, self.sendBecerikullanma)
                                                        if code == 56:
                                                                self.sendData("\x08" + "\x03", struct.pack('!hhbhhb', int(px), int(py), 0, 0, 0, 0), True)
                                                                self.room.sendAllBin("\x05" + "\x32", struct.pack('!bhh', 37, int(px), int(py)))
                                                        if code == 55:
                                                                if self.room.iceenabled:
                                                                        if self.hasCheese:
                                                                                for player in self.room.clients.values():
                                                                                        if not player.hasCheese and not self.isBecerikullanma:
                                                                                                if int(player.posX)>=int(px)-75 and int(player.posX)<=int(px)+75:
                                                                                                        if int(player.posY)>=int(py)-75 and int(player.posY)<=int(py)+75:
                                                                                                                self.isBecerikullanma = True
                                                                                                                self.room.sendAllBin("\x08\x13", struct.pack("!i", self.playerCode))#Defilante hız
                                                                                                                self.room.sendAll("\x05\x13", [str(player.playerCode)])
                                                                                                                player.hasCheese = True
                                                                                                                self.hasCheese = False
                                                                                                                reactor.callLater(0.1, self.sendBecerikullanma)
                                                        if code == 57:
                                                                if self.room.bulut1 == 1:
                                                                        self.room.sendAllBin("\x05\x0F", struct.pack("!h", int(self.room.bulut2)))
                                                                        self.room.bulut2 = id
                                                                else:
                                                                        self.room.bulut2 = id
                                                                        self.room.bulut1 = 1
                                                        if code == 61:
                                                                if self.room.arkadaslik1 == 1:
                                                                        self.room.sendAllBin("\x05\x0F", struct.pack("!h", int(self.room.arkadaslik2)))
                                                                        self.room.arkadaslik2 = id
                                                                else:
                                                                        self.room.arkadaslik2 = id
                                                                        self.room.arkadaslik1 = 1
                                                        self.room.sendAllOthersBin(self, "\x05\x14", data)
                                                        self.room.objectid = id       
                                                else:
                                                        pass
                                elif eventToken2 == Tokens.Yansitici[1]:
                                        x = struct.unpack('!hhh', data[:6]) [0]
                                        y = struct.unpack('!hhh', data[:6]) [1]
                                        ne = struct.unpack('!hhh', data[:6]) [2]
                                        for player in self.room.clients.values():
                                                if not player.playerCode == self.room.currentShamanCode:
                                                        player.sendData("\x05\x10", struct.pack("!hhh", int(x), int(y), int(ne)), True)
                                elif eventToken2 == Tokens.Yikimiscisi[1]:
                                        data=struct.unpack('!h', data[:2])[0]
                                        self.room.sendAllBin("\x05\x0F", struct.pack("!h", data))
                                elif eventToken2 == Tokens.Saydamlastirma[1]:
                                        data=struct.unpack('!h', data[:2])[0]
                                        self.room.sendAllBin("\x05\x0D", struct.pack("!h", data) + "\x00")   
                                elif eventToken2 == Tokens.IceCube[1]:
                                        #Ice Cube Placement
                                        if self.isShaman and not self.isDead or self.privilegeLevel >= 10:
                                                TargetCode = struct.unpack("!i", data[:4])[0]
                                                if not self.IcedMouses == 0:
                                                        if self.playerCode != TargetCode:
                                                                for room in self.server.rooms.values():
                                                                        for playerCode, client in room.clients.items():
                                                                                if client.playerCode == TargetCode:
                                                                                        if not client.isDead:
                                                                                                if not client.isShaman:
                                                                                                        if client.room.iceenabled:
                                                                                                                client.isDead=True
                                                                                                                client.sendPlayerDied(client.playerCode, client.score)
                                                                                                                code, x, y, origin = [54, struct.unpack("!h", data[4:][:2])[0], struct.unpack("!h", data[4:][2:])[0], 1]
                                                                                                                self.spawnObject(code, x, y, origin)
                                                                                                                self.IcedMouses -= 1
                                                                                                                client.room.checkShouldChangeWorld()
                                elif eventToken2 == Tokens.gotTicket[1]:
                                        #got Ticket (+1)
                                        if self.room.isDefilante:
                                                self.tickets += 1
                                        #elif self.room.isEventMap:
                                        #        self.tickets += 1
                                elif eventToken2 == Tokens.Destruction[1]:
                                        #DestructionObjet
                                        if self.isSyncroniser:
                                                self.room.sendAllBin("\x05\x18", data)
                                else:
                                        pass #logging.warning("Unimplemented Binary %r" % eventTokens)
                                        print "Object Error: Bin-"+repr(eventTokens)+"-DATA:"+repr(data)
                        elif eventToken1 == Tokens.Chat[0]:
                                if eventToken2 == Tokens.Chat[1]:
                                        #Chat Message
                                        utflength=struct.unpack('!h', data[:2])[0]
                                        utfstring=data[2:utflength+2]
                                        message = utfstring
                                        if int(self.room.ISCM) == 1:
                                                derpx = 0
                                                derpy = 0
                                                if self.posX < 3183:
                                                        derpx = 3183 - self.posX
                
                                                else:
                                                        derpx = self.posX - 3183
                    
                                                if self.posY < 262:
                                                        derpy = 262 - self.posY

                                                else:
                                                        derpy = self.posY - 262               
                                                if derpx >= 150 and derpx <= 400:
                                                        if derpy >= 10 and derpy <= 14:
                                                                if message == "lo":
                                                                        if not "287" in self.titleList and not "287" in self.titleList:
                                                                                self.titleList = self.titleList+["287"]
                                                                                self.sendUnlockedTitle(self.playerCode, "287")
                                                                                self.titleNumber = 287
                                                                                dbcur.execute('UPDATE users SET currenttitle = 287 WHERE name = %s', [self.username])
                                        message = message.replace("<","&amp;lt;").replace("&amp;#","&amp;amp;#")
                                        if len(message) >= 500:
                                                self.transport.loseConnection()
                                                message=""
                                        if self.privilegeLevel!=10 and self.privilegeLevel!=6 and self.privilegeLevel!=5 and self.privilegeLevel!=1:
                                                dv = False
                                                if message == self.lastmessage:
                                                        message=""
                                                        self.sendModMessageChannel("Servidor", str(self.username)+" sent multiple of the same chat message.")
                                                #Verificar divulgação...
                                                messagex = message.replace(" ", "")
                                        if self.getBlackListServer(message):
                                                if self.server.banPlayer(self.username, 0, 'Ссылка на запрещенный сайт', 'Server'):
                                                        ip = self.server.getIPaddress(self.username)
                                                        self.Cursor.execute("insert into ippermaban (ip, bannedby, reason) values (%s, %s, %s)", (ip, 'Server', 'Disclosure'))
                                                        self.Database.commit()
                                                        self.server.sendModChat(self, "\x06\x14", [self.username + ' was banned automatically by the server, released the following message: '+ message], False)
                                        if message!="":
                                                self.lastmessage=message.strip()
                                                playerCode=struct.pack("%sL" % "!", int(self.playerCode))
                                                username=struct.pack('!h', len(self.username))+self.username
                                                if self.cheesecount<=9:
                                                        if self.Langue=="RU":
                                                                Function.sendMBox(self, "<ROSE>Вы должны собрать 10 сыра, чтобы писать в чате.", 5, 20, 790, 0, "100%", "#324650", "#000000", 238)
                                                                reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(238)), True)
                                                        else:
                                                                Function.sendMBox(self, "<ROSE>You have to collect 10 cheese to write in the chat.", 5, 20, 790, 0, "100%", "#324650", "#000000", 239)
                                                                reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(239)), True)
                                                elif not self.mumute:
                                                        if not self.privilegeLevel==0:
                                                                if self.modmute:
                                                                        timee=int(self.timestampCalc(self.server.getModMuteInfo(self.username)[1])[2])
                                                                        if timee<=0:
                                                                                self.modmute=False
                                                                                self.server.removeModMute(self.username)
                                                                                self.room.sendAllChat(playerCode, username, message)
                                                                        else:
                                                                                self.sendModMute(self.username, timee, self.server.getModMuteInfo(self.username)[2])
                                                                else:
                                                                        if not self.chatcolored and not self.chatvip and not self.prefix:
                                                                                self.room.sendAllChat(playerCode, username, message)
                                                                        elif not self.chatcolored and self.chatvip:
                                                                                self.room.sendAll("\x1A" + "\x04", [str(self.isPrefix)+" "+str(self.isColorChat)+"[", str(self.username)+"] <N>"+message])
                                                                        elif not self.chatcolored and self.prefix:
                                                                                self.room.sendAll("\x1A" + "\x04", [str(self.isPrefix)+" "+str(self.isColorChat)+"[", str(self.username)+"] <N>"+message])
                                                                        else:
                                                                                self.room.sendAllChatColored(playerCode, username, message)
                                                else:
                                                        if not self.chatcolored:
                                                                self.room.sendAllChatF(playerCode, username, message, self)
                                                        else:
                                                                self.room.sendAllChatFColored(playerCode, username, message)
                                elif eventToken2 == Tokens.Whisper[1]:
                                        #Sent whisper
                                        nameLength=struct.unpack('!h', data[:2])[0]
                                        username=data[2:nameLength+2]
                                        if not username.startswith("*"):
                                                username=username.lower()
                                                username=username.capitalize()
                                        data=data[nameLength+2:]
                                        messageLength=struct.unpack('!h', data[:2])[0]
                                        message=data[2:messageLength+2]
                                        message=message.replace("<","&amp;lt;").replace("&amp;#","&amp;amp;#")
                                        if self.getBlackListServer(message):
                                                if self.server.banPlayer(self.username, 0, 'Ссылка на запрещенный сайт', 'Server'):
                                                        ip = self.server.getIPaddress(self.username)
                                                        self.Cursor.execute("insert into ippermaban (ip, bannedby, reason) values (%s, %s, %s)", (ip, 'Server', 'Disclosure'))
                                                        self.Database.commit()
                                                        self.server.sendModChat(self, "\x06\x14", [self.username + ' was banned automatically by the server, released the following message: '+ message], False)
                                        # dbcurwhisper.execute("INSERT INTO whisper (time, ip, fromuser, touser, message) values (?, ?, ?, ?, ?)", (getTimeLog(), self.address[0], self.username, username, message))
                                        if self.cheesecount<=1:
                                                if self.Langue=="RU":
                                                        Function.sendMBox(self, "<ROSE>Вы должны собрать 1 сыр, чтобы писать в чате.", 5, 20, 790, 0, "100%", "#324650", "#000000", 200)
                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(200)), True)
                                                else:
                                                        Function.sendMBox(self, "<ROSE>You must have to collect 1 cheese to write in the chat.", 5, 20, 790, 0, "100%", "#324650", "#000000", 200)
                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(200)), True)
                                        elif not self.mumute:
                                                if not self.privilegeLevel==0:
                                                        if self.modmute:
                                                                timee=int(self.timestampCalc(self.server.getModMuteInfo(self.username)[1])[2])
                                                                if timee<=0:
                                                                        self.modmute=False
                                                                        self.server.removeModMute(self.username)
                                                                        if self.silence:
                                                                                if self.silencemsg == "":
                                                                                    self.sendData("\x06\x28"+struct.pack("!h", len(self.username))+str(self.username), [], True)
                                                                                else:
                                                                                    self.sendData("\x06\x28"+struct.pack("!h", len(self.username))+str(self.username)+struct.pack("!h", len(self.silencemsg))+str(self.silencemsg), [], True)
                                                                        else:
                                                                                if not self.server.sendPrivMsg(self, self.username, username, message, self.LangueBin):
                                                                                        self.sendPlayerNotFound()
                                                                                else:
                                                                                        pass
                                                                else:
                                                                        self.sendModMute(self.username, timee, self.server.getModMuteInfo(self.username)[2])
                                                        else:
                                                                dv = False
                                                                messagex = message.replace(" ", "")
                                                                for site in self.server.blacklist:
                                                                        if re.search(site, messagex.lower()):
                                                                                dv = False
                                                                if dv:
                                                                        if self.privilegeLevel!=10 and self.privilegeLevel!=6 and self.privilegeLevel!=5:
                                                                                self.enterRoom("*bad girls")
                                                                                if self.server.banPlayer(self.username, "999", "Divulgação", "Servidor"):
                                                                                        self.server.sendModChat(self, "\x06\x14", ["O Servidor baniu "+self.username+" por 999 horas. Rasão: Divulgação"], False)
                                                                                else:
                                                                                        pass
                                                                else:
                                                                        if self.silence:
                                                                                if self.silencemsg == "":
                                                                                    self.sendData("\x06\x28"+struct.pack("!h", len(self.username))+str(self.username), [], True)
                                                                                else:
                                                                                    self.sendData("\x06\x28"+struct.pack("!h", len(self.username))+str(self.username)+struct.pack("!h", len(self.silencemsg))+str(self.silencemsg), [], True)
                                                                        else:
                                                                                if not self.server.sendPrivMsg(self, self.username, username, message, self.LangueBin):
                                                                                        self.sendPlayerNotFound()
                                                                                else:
                                                                                        pass
                                        else:
                                                if not self.server.sendPrivMsgF(self, self.username, username, message, self.LangueBin):
                                                        self.sendPlayerNotFound()
                                elif eventToken2 == Tokens.Tribemsg[1]:
                                        #Tribe message
                                        messageLength=struct.unpack('!h', data[:2])[0]
                                        message=data[2:messageLength+2]
                                        message=message.replace("<","&amp;lt;").replace("&amp;#","&amp;amp;#")
                                        username=struct.pack('!h', len(self.username))+self.username
                                        sendMessage=struct.pack('!h', len(message))+message
                                        if self.cheesecount<=9:
                                                if self.Langue=="RU":
                                                        Function.sendMBox(self, "<ROSE>Вы должны собрать 10 сыра, чтобы писать в чате.", 5, 20, 790, 0, "100%", "#324650", "#000000", 201)
                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(201)), True)
                                                else:
                                                        Function.sendMBox(self, "<ROSE>You must have to collect 1 cheese to write in the chat.", 5, 20, 790, 0, "100%", "#324650", "#000000", 201)
                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(201)), True)
                                        elif self.isInTribe:
                                                self.server.sendWholeTribe(self, "\x06\x08", sendMessage+username, True)
                                elif eventToken2 == Tokens.Silence[1]:
                                    #Silence
                                    if self.privilegeLevel==0:
                                        pass
                                    else:
                                        if self.silence:
                                            self.silence=False
                                            self.silencemsg=""
                                            self.sendEnableWhispers()
                                        else:
                                            try:
                                                self.silencemsg = data[3:]
                                            except (ValueError, AuthError):
                                                self.silencemsg = ""
                                            self.silence=True
                                            self.sendDisableWhispers()
                                elif eventToken2 == Tokens.scommand[1]:
                                        #Sent command
                                        command=struct.unpack("!b", data[:1])[0]
                                        commandValues=data[1:]
                                        utflength=struct.unpack('!h', commandValues[:2])[0]
                                        message = commandValues[2:utflength+2]
                                        
                                        message=message.replace("<","&amp;lt;").replace("&amp;#","&amp;amp;#")
                                        if command==0:
                                                message = message.replace("&lt;","<")
                                                logcommand="ms "+message
                                        elif command==1:
                                                logcommand="mss "+message
                                        elif command==2:
                                                logcommand="a "+message
                                        elif command==3:
                                                logcommand="m "+message
                                        elif command==4:
                                                logcommand="m* "+message
                                        elif command==5:
                                                logcommand="a* "+message
                                        elif command==6:
                                                logcommand="mssc "+message
                                        elif command==7:
                                                logcommand="mc "+message
                                        elif command==8:
                                                logcommand="lu "+message
                                        else:
                                                pass
                                       
                                        if command==0: #ms
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        self.sendModMessage(0, message)
                                        elif command==1: #mss
                                                if self.privilegeLevel==10 or self.privilegeLevel==6:
                                                        self.sendServerMessage(message)
                                        elif command==2: #a
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==3:
                                                        self.sendArbMessageChannel(self.username, message)
                                        elif command==3: #m
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        self.sendModMessageChannel(self.username, message)
                                        elif command==4: #m*
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        self.sendAllModMessageChannel(self.username, message)
                                        elif command==5: #a*
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==3:
                                                        self.sendAllArbMessageChannel(self.username, message)
                                        elif command==6: #mssc
                                                if self.privilegeLevel==10 or self.privilegeLevel==6:
                                                        self.sendModServerMessageChannel(self.username, message)
                                        elif command==7: #mc
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==2:
                                                        self.sendMapCrewMessageChannel(self.username, message)
                                        elif command==8: #lu
                                                if self.username in ["Aquantura"]:
                                                        self.sendLuaMessageChannel(self.username, message)
                                        else:
                                                pass
                                else:
                                        pass #logging.warning("Unimplemented Binary %r" % eventTokens)
                                        print "Send Error: Bin-"+repr(eventTokens)+"-DATA:"+repr(data)
                        elif eventToken1 == Tokens.report[0]:
                                if eventToken2 == Tokens.report[1]:
                                        # Report player
                                        namelen = struct.unpack("!h", data[:2])[0]
                                        name = data[2:namelen+2]
                                        data = data[namelen+2:]
                                        motive = struct.unpack("!b", data[:1])[0]
                                        data = data[1:]
                                        motivelen = struct.unpack("!h", data[:2])[0]
                                        comm = data[2:motivelen+2]
                                        if self.Langue=="RU":
                                                if motive == 0:
                                                        motive = "Чит"
                                                elif motive == 1:
                                                        motive = "Спам / Флуд"
                                                elif motive == 2:
                                                        motive = "Оскорбления"
                                                elif motive == 3:
                                                        motive = "Фишинг"
                                                elif motive == 4:
                                                        motive = "Прочее"
                                                if comm == "":
                                                        comm = "нет комментариев"
                                        else:
                                                if motive == 0:
                                                        motive = "Hack"
                                                elif motive == 1:
                                                        motive = "Spam / Flood"
                                                elif motive == 2:
                                                        motive = "Insults"
                                                elif motive == 3:
                                                        motive = "Fishing"
                                                elif motive == 4:
                                                        motive = "Other"
                                                if comm == "":
                                                        comm = "no comments"
                                        if not name == self.username:
                                                if self.server.checkAlreadyConnectedAccount(self.username):
                                                        if self.Langue=="RU":
                                                                self.server.sendModChat(self, "\x06\x14", ['<N>Игрок "<ROSE>'+self.username+'<N>" подал жалобу в комнате "<ROSE>'+self.room.name+'<N>" на игрока "<ROSE>'+name+'<N>" по причине <ROSE>'+str(motive)+' <N>("<V>'+comm+'<N>")'])
                                                        else:
                                                                self.server.sendModChat(self, "\x06\x14", ['<N>Player "<ROSE>'+self.username+'<N>" sent report in room "<ROSE>'+self.room.name+'<N>" on player "<ROSE>'+name+'<N>" because <ROSE>'+str(motive)+' <N>("<V>'+comm+'<N>")'])
                                                        self.sendData("\x1A" + "\x09",["1"])
                                elif eventToken2 == Tokens.idioma[1]:
                                        # Select Idioma
                                        Langue = data
                                        self.LangueBin = data
                                        self.updateLanguageUsuario(self.username, Langue)
                                elif eventToken2 == Tokens.shoplist[1]:
                                        data = struct.unpack('!b', data[:1]) [0]
                                        for player in self.room.clients.values():
                                                if not player.playerCode == self.room.currentShamanCode:
                                                        player.sendData("\x08\x0F", struct.pack("!ib", self.playerCode, data), True)#Kanatta
                                elif eventToken2 == Tokens.skills[1]:
                                        #Şaman becelerini sıfırlama
                                        if not self.becerilerim == "" or self.becerilerim == 0 or self.becerilerim == None or self.becerilerim == "0":
                                                lev = self.levelcount.split('/')
                                                level = lev[0]
                                                peynir = int(level)-1
                                                self.shopcheese -= int(peynir)
                                                self.becerilerim = 0
                                                self.becericount = 0
                                                dbcur.execute('UPDATE users SET becericount = %s WHERE name = %s', (self.becericount, self.username))
                                                dbcur.execute('UPDATE users SET becerilerim = %s WHERE name = %s', (self.becerilerim, self.username))
                                                self.sendData("\x08\x16\x00", [], True)
                                elif eventToken2 == Tokens.shoplist2[1]:
                                        # Shop Open
                                        self.sendShopList()
                                elif eventToken2 == Tokens.Puan[1]:
                                        # Puan
                                        datas = struct.unpack("!b",data[:1]) [0]
                                        self.sendShamanSkills(datas)
                                elif eventToken2 == Tokens.useremote[1]:
                                        #Player emote
                                        emote = struct.unpack("!b",data[:1])[0]
                                        self.sendPlayerEmote(self.playerCode,emote,True)
                                

                                elif eventToken2 == Tokens.ping[1]:
                                        # Ping?
                                        pass

                                elif eventToken2 == Tokens.zombie[1]:
                                        #Espalha transformaçao de zumbi
                                        if self.isZombie:
                                                self.room.sendAllBin("\x08\x42", struct.pack("!l", self.playerCode))
                                                self.isZombie = True
                                        else:
                                                pass
                                
                                elif eventToken2 == Tokens.meep[1]:
                                        #Meep
                                        meepx, meepy = struct.unpack('!hh', data[:4])
                                        if self.canMeep:
                                                if self.isShaman:
                                                        self.room.sendAllBin("\x08" + "\x26", struct.pack('!ihhi', self.playerCode, meepx, meepy, 10))
                                                else:
                                                        self.room.sendAllBin("\x08" + "\x26", struct.pack('!ihhi', self.playerCode, meepx, meepy, 4))
                                        else:
                                                print "hax?"
                                elif eventToken2 == Tokens.present[1]: #\x1A \x1E
                                        # catch Egg/Present
                                        self.room.sendAll("\x13\x15", [self.playerCode])
                                        self.gotGift=1

                                elif eventToken2 == Tokens.rpresent[1]:
                                        # recv Present
                                        print(repr(data))

                                elif eventToken2 == Tokens.spresent[1]:
                                        # send/open Present
                                        name = self.parseBinaryData(data, "u")
                                        if name == self.username:
                                                self.sendGiftCount += self.giftCount
                                                self.giftCount = 0
                                                self.sendGiftAmount(self.giftCount)
                                        else:
                                                self.sendGiftCount += self.giftCount
                                                if self.privilegeLevel != 0:
                                                        if self.sendGiftCount in self.noelGiftTitleCheckList:
                                                                unlockedtitle=self.noelGiftTitleDictionary[self.sendGiftCount]
                                                                self.sendUnlockedTitle(self.playerCode, unlockedtitle)
                                                                self.GiftTitleList=self.GiftTitleList+[unlockedtitle]
                                                                self.titleList = ["0"]+self.GiftTitleList+self.ShamanTitleList+self.HardModeTitleList+self.CheeseTitleList+self.FirstTitleList+self.ShopTitleList+self.BootcampTitleList
                                                                if self.privilegeLevel==10:
                                                                        self.titleList = self.titleList+ADMIN_TITLES
                                                                self.titleList = filter(None, self.titleList)
                                                                self.sendTitleList()
                                                for room in self.server.rooms.values():
                                                        for player in room.clients.values():
                                                                if player.username == name:
                                                                        player.recvGiftCount += self.giftCount
                                                                        if player.recvGiftCount > player.maxGift:
                                                                                player.recvGiftCount = player.maxGift
                                                                        player.sendData("\x06" + "\x14",["<J>Você recebeu um presende de "+self.username])
                                                                        player.sendGiftAmount(self.giftCount)
                                                self.giftCount = 0
                                                self.sendGiftAmount(self.giftCount)
                                                SPplayerCode = self.playerCode
                                                self.room.sendAllBin("\x08\x2b", struct.pack("!l", int(SPplayerCode)))
                                                self.sendData("\x06" + "\x14",["<J>Você enviou um presente para "+name])
                                                
                                elif eventToken2 == Tokens.cday[1]:
                                        # Click Day
                                        DAY = str(str(datetime.now()).split("-")[2][:2])
                                        if DAY == "1":
                                                self.shopcheese += 200
                                                self.sendData("\x06" + "\x14",["<J>Você acaba de ganhar 200 queijos!"])
                                        elif DAY == "2":
                                                pass
                                        elif DAY == "3":
                                                pass
                                        elif DAY == "4":
                                                pass
                                        elif DAY == "5":
                                                pass
                                        elif DAY == "6":
                                                pass
                                        elif DAY == "7":
                                                pass
                                        elif DAY == "8":
                                                pass
                                        elif DAY == "9":
                                                pass
                                        elif DAY == "10":
                                                pass
                                        elif DAY == "11":
                                                pass
                                        elif DAY == "12":
                                                pass
                                        elif DAY == "13":
                                                pass
                                        elif DAY == "14":
                                                pass
                                        elif DAY == "15":
                                                pass
                                        elif DAY == "16":
                                                pass
                                        elif DAY == "17":
                                                self.shopfraises += int(50)
                                                self.sendData("\x0c\x14", struct.pack('!h', int(50)), True)
                                        elif DAY == "18":
                                                self.shopcheese += int(200)
                                                self.sendData("\x06" + "\x14",["<J>Você acaba de ganhar 200 queijos!"])
                                        elif DAY == "19":
                                                self.shopfraises += int(50)
                                                self.sendData("\x0c\x14", struct.pack('!h', int(50)), True)
                                        elif DAY == "20":
                                                if not "288" in self.titleList:
                                                        self.titleList = self.titleList+["288"]
                                                        self.sendUnlockedTitle(self.playerCode, "288")
                                                else:
                                                        self.shopfraises += int(50)
                                                        self.sendData("\x0c\x14", struct.pack('!h', int(50)), True)
                                        elif DAY == "21":
                                                self.shopcheese += int(100)
                                                self.sendData("\x06" + "\x14",["<J><BL>Вы получили <J>100 <BL>сыра!"])
                                        elif DAY == "22":
                                                if not "289" in self.titleList:
                                                        self.titleList = self.titleList+["289"]
                                                        self.sendUnlockedTitle(self.playerCode, "289")
                                                else:
                                                        self.shopfraises += int(50)
                                                        self.sendData("\x0c\x14", struct.pack('!h', int(50)), True)
                                        elif DAY == "23":
                                                if not "290" in self.titleList:
                                                        self.titleList = self.titleList+["290"]
                                                        self.sendUnlockedTitle(self.playerCode, "290")
                                                else:
                                                        self.shopfraises += int(50)
                                                        self.sendData("\x0c\x14", struct.pack('!h', int(50)), True)
                                        elif DAY == "24":
                                                if not "292" in self.titleList:
                                                        self.titleList = self.titleList+["292"]
                                                        self.sendUnlockedTitle(self.playerCode, "292")
                                                else:
                                                        self.shopfraises += int(50)
                                                        self.sendData("\x0c\x14", struct.pack('!h', int(50)), True)
                                        elif DAY == "25":
                                                if not "293" in self.titleList:
                                                        self.titleList = self.titleList+["293"]
                                                        self.sendUnlockedTitle(self.playerCode, "293")
                                                else:
                                                        self.shopfraises += int(50)
                                                        self.sendData("\x0c\x14", struct.pack('!h', int(50)), True)
                                        elif DAY == "26":
                                                if not "293" in self.titleList:
                                                        self.titleList = self.titleList+["127"]
                                                        self.sendUnlockedTitle(self.playerCode, "127")
                                                else:
                                                        self.shopfraises += int(50)
                                                        self.sendData("\x0c\x14", struct.pack('!h', int(50)), True)
                                        elif DAY == "27":
                                                if not "128" in self.titleList:
                                                        self.titleList = self.titleList+["128"]
                                                        self.sendUnlockedTitle(self.playerCode, "128")
                                                else:
                                                        self.shopfraises += int(50)
                                                        self.sendData("\x0c\x14", struct.pack('!h', int(50)), True)
                                        elif DAY == "28":
                                                if not "129" in self.titleList:
                                                        self.titleList = self.titleList+["129"]
                                                        self.sendUnlockedTitle(self.playerCode, "129")
                                                else:
                                                        self.shopfraises += int(50)
                                                        self.sendData("\x0c\x14", struct.pack('!h', int(50)), True)
                                        elif DAY == "29":
                                                if not "244" in self.titleList:
                                                        self.titleList = self.titleList+["244"]
                                                        self.sendUnlockedTitle(self.playerCode, "244")
                                                else:
                                                        self.shopfraises += int(50)
                                                        self.sendData("\x0c\x14", struct.pack('!h', int(50)), True)
                                        elif DAY == "30":
                                                self.shopfraises += int(50)
                                                self.sendData("\x0c\x14", struct.pack('!h', int(50)), True)
                                                self.shopmoney += int(1)
                                                self.sendData("\x06" + "\x14",["<BL>Вы получили <J>1 <BL>рубль!"])
                                        elif DAY == "31":
                                                if not "130" in self.titleList:
                                                        self.titleList = self.titleList+["130"]
                                                        self.sendUnlockedTitle(self.playerCode, "130")
                                                        self.shopfraises += int(10000)
                                                        self.sendData("\x0c\x14", struct.pack('!h', int(10000)), True)
                                                        self.shopcheese += int(10000)
                                                        self.sendData("\x06" + "\x14",["<BL>Вы получили <J>10000 <BL>сыра!"])
                                                        self.shopmoney += int(20)
                                                        self.sendData("\x06" + "\x14",["<BL>Вы получили <J>20 <BL>рублей!"])
                                                else:
                                                        self.shopfraises += int(50)
                                                        self.sendData("\x0c\x14", struct.pack('!h', int(50)), True)
                                                                        
                                elif eventToken2 == "\x29":
                                        #Souris Rose
                                        self.room.sendAllBin("\x08\x29", data + struct.pack("!i", int(self.playerCode)))
                                elif eventToken2 == "\x2A":
                                        #Cadeau
                                        playerCode = struct.unpack("!l", data[:4])[0]
                                        self.room.sendAllOthersBin(self, eventTokens, data)
                                else:
                                        pass #logging.warning("Unimplemented Binary %r" % eventTokens)
                                        print "Report Error: Bin-"+repr(eventTokens)+"-DATA:"+repr(data)
                        elif eventToken1 == Tokens.entertribe[0]:
                                if eventToken2 == Tokens.entertribe[1]:
                                        #enter tribehouse
                                        if self.isInTribe:
                                                self.enterRoom("*\x03"+self.tribe)
                                elif eventToken2 == Tokens.tribecode[1]:
                                        #tribehouse code
                                        tribehousecode = str(struct.unpack('!i', data[:4])[0])
                                        dbcur.execute('select * from mapeditor where code = %s', (str(tribehousecode)))
                                        rrf = dbcur.fetchone()
                                        if rrf is None:
                                                self.sendData("\x10" + "\x04",["16"])
                                        else:
                                                if re.search("m", self.TribeInfo[1].split("#")[int(self.TribeRank)]):
                                                        if not self.TribeHouse == tribehousecode:
                                                                self.TribeHouse = tribehousecode
                                                                dbcur.execute('UPDATE Tribu SET House = %s WHERE Code = %s', (self.TribeHouse, self.TribeCode))
                                                                dbcon.commit()
                                                                self.sendData("\x10\x02", struct.pack('!i', int(self.TribeHouse)), True)
                                                                self.sendTribeInfoUpdate(True)
                                                                self.sendTribeGreeting()
                                                                if self.roomname == "*\x03"+self.tribe:
                                                                        if not self.isDead:
                                                                                self.isDead = True
                                                                                self.sendPlayerDied(self.playerCode, self.score)
                                                                        self.room.worldChangeSpecific(tribehousecode, True)
                                                else:
                                                        self.sendTribePermisson()
                                else:
                                        pass #logging.warning("Unimplemented Binary %r" % eventTokens)
                                        print "Kabile Error: Bin-"+repr(eventTokens)+"-DATA:"+repr(data)
                        elif eventToken1 == Tokens.buyfraises[0]:
                                if eventToken2 == Tokens.buyfraises[1]:
                                        # Buy Fraises
                                        if self.Langue=="RU":
                                                if self.isVip:
                                                        Function.sendMBox(self, "<VP>За принесение сыра в нору первым вам дается <J>5 <VP>клубник!", 5, 20, 790, 0, "100%", "#324650", "#000000", 222)
                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(222)), True)
                                                else:
                                                        Function.sendMBox(self, "<VP>За принесение сыра в нору первым вам дается <J>1 <VP>клубника!", 5, 20, 790, 0, "100%", "#324650", "#000000", 223)
                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(223)), True)
                                                self.sendData("\x06" + "\x14",["<VP>Мало клубники? Вы можете купить еще в нашем <J><a href='http://shop.artmice.ru' target='_blank'>магазине</a><VP>."])
                                        else:
                                                self.sendData("\x06" + "\x14",["<VP>Not enough strawberries? Buy more in our <J><a href='http://shop.artmice.ru' target='_blank'>shop</a><VP>."])
                        elif eventToken1 == Tokens.sendfraises[0]:
                                if eventToken2 == Tokens.sendfraises[1]:
                                        #send fraises count
                                        self.sendData("\x14\x0F" + struct.pack('!iii', self.shopcheese, self.shopfraises, self.shopcoins), [], True)
                                elif eventToken2 == Tokens.shoplist[1]:
                                        self.sendShopList()
                                        #self.sendLookChange()
                                elif eventToken2 == Tokens.equipitem[1]:
                                        #equip item
                                        item = struct.unpack('!i', data[:4])[0]
                                        if self.checkInShop(item):
                                                fullitem = str(item)
                                                if int(item)>=100 and int(item) <=199:
                                                        itemcategory=1
                                                        item=str(int(fullitem[1:]))
                                                elif int(item)>=200 and int(item) <=299:
                                                        itemcategory=2
                                                        item=str(int(fullitem[1:]))
                                                elif int(item)>=300 and int(item) <=399:
                                                        itemcategory=3
                                                        item=str(int(fullitem[1:]))
                                                elif int(item)>=400 and int(item) <=499:
                                                        itemcategory=4
                                                        item=str(int(fullitem[1:]))
                                                elif int(item)>=500 and int(item) <=599:
                                                        itemcategory=5
                                                        item=str(int(fullitem[1:]))
                                                elif int(item)>=600 and int(item) <=699:
                                                        itemcategory=6
                                                        item=str(int(fullitem[1:]))
                                                elif int(item)>=2100 and int(item) <=2199:
                                                        itemcategory=21
                                                        item=str(int(fullitem[2:]))
                                                elif int(item)>=2200 and int(item) <=2299:
                                                        itemcategory=22
                                                        item=str(int(fullitem[2:]))
                                                elif int(item)>=10101 and int(item) <=10199:
                                                        itemcategory=0
                                                        item=str(int(fullitem[1:]))
                                                else:
                                                        itemcategory=0
                                                        item=item
                                                itemo = str(item)
                                                item = str(item) + self.getItemCustomization(fullitem)
                                                looktoplist = self.look.split(";")
                                                looklist = looktoplist[1].split(",")
                                                looklist2 = map(lambda i: i.split("_")[0] if "_" in str(i) else str(i), looklist)
                                                if itemcategory==0:
                                                        if looklist2[0]==str(itemo):
                                                                looklist[0]=0
                                                        else:
                                                                looklist[0]=str(item)
                                                elif itemcategory==1:
                                                        if looklist2[1]==str(itemo):
                                                                looklist[1]=0
                                                        else:
                                                                looklist[1]=str(item)
                                                elif itemcategory==2:
                                                        if looklist2[2]==str(itemo):
                                                                looklist[2]=0
                                                        else:
                                                                looklist[2]=str(item)
                                                elif itemcategory==3:
                                                        if looklist2[3]==str(itemo):
                                                                looklist[3]=0
                                                        else:
                                                                looklist[3]=str(item)
                                                elif itemcategory==4:
                                                        if looklist2[4]==str(itemo):
                                                                looklist[4]=0
                                                        else:
                                                                looklist[4]=str(item)
                                                elif itemcategory==5:
                                                        if looklist2[5]==str(itemo):
                                                                looklist[5]=0
                                                        else:
                                                                looklist[5]=str(item)
                                                elif itemcategory==6:
                                                        if looklist2[6]==str(itemo):
                                                                looklist[6]=0
                                                        else:
                                                                looklist[6]=str(item)
                                                elif itemcategory==21:
                                                        looktoplist[0]=1
                                                        infos = self.server.mouseColorInfo(True, self.username, "")
                                                        if infos != []:
                                                                color1, color2 = infos
                                                                color = int(item)
                                                                newcolor = "78583a"
                                                                if color == 0 and color1 != "bd9067":
                                                                        newcolor = "bd9067"
                                                                elif color == 1 and color1 != "593618":
                                                                        newcolor = "593618"
                                                                elif color == 2 and color1 != "8c887f":
                                                                        newcolor = "8c887f"
                                                                elif color == 3 and color1 != "dfd8ce":
                                                                        newcolor = "dfd8ce"
                                                                elif color == 4 and color1 != "4e443a":
                                                                        newcolor = "4e443a"
                                                                elif color == 5 and color1 != "e3c07e":
                                                                        newcolor = "e3c07e"
                                                                elif color == 6 and color1 != "272220":
                                                                        newcolor = "272220"
                                                                self.server.mouseColorInfo(False, self.username, [newcolor, color2])
                                                                self.server.updateColor(self.username)
                                                                self.color1=newcolor
                                                        else:
                                                                self.server.mouseColorInfo(False, self.username, ['"', '"'])
                                                                self.server.updateColor(self.username)
                                                                self.color1=newcolor
                                                elif itemcategory==22:
                                                        if looktoplist[0]==str(itemo):
                                                                looktoplist[0] = 1
                                                        else:
                                                                looktoplist[0]=str(item)
                                                else:
                                                        pass
                                                
                                                looktoplist[1] = json.dumps(looklist)
                                                looktoplist[1] = looktoplist[1].strip('[]')
                                                looktoplist[1] = looktoplist[1].replace("\"","")
                                                looktoplist[1] = looktoplist[1].replace(" ","")
                                                self.look = ";".join(map(str, looktoplist))
                                                self.look = self.look.replace(" ","")
                                                self.sendLookChange()
                                                #self.sendShopList()
                                                
                                elif eventToken2 == Tokens.buyitem[1]:
                                        #buy item
                                        SplitList=self.shoplist.split(";")
                                        itemcat0={}
                                        itemcat1={}
                                        itemcat2={}
                                        itemcat3={}
                                        itemcat4={}
                                        itemcat5={}
                                        itemcat6={}
                                        itemcat7={}
                                        itemcat8={}
                                        itemcat9={}
                                        itemcat21={}
                                        itemcat22={}
                                        for Value in SplitList:
                                                Cate, Item, Customizable, Tipo, Price, Fraises=Value.split(",")
                                                if Price=="1000000":
                                                        pass
                                                else:
                                                        if Cate=="0":
                                                                itemcat0[int(Item)] = (int(Price), int(Fraises), int(Tipo))
                                                        elif Cate=="1":
                                                                itemcat1[int(Item)] = (int(Price), int(Fraises), int(Tipo))
                                                        elif Cate=="2":
                                                                itemcat2[int(Item)] = (int(Price), int(Fraises), int(Tipo))
                                                        elif Cate=="3":
                                                                itemcat3[int(Item)] = (int(Price), int(Fraises), int(Tipo))
                                                        elif Cate=="4":
                                                                itemcat4[int(Item)] = (int(Price), int(Fraises), int(Tipo))
                                                        elif Cate=="5":
                                                                itemcat5[int(Item)] = (int(Price), int(Fraises), int(Tipo))
                                                        elif Cate=="6":
                                                                itemcat6[int(Item)] = (int(Price), int(Fraises), int(Tipo))
                                                        elif Cate=="7":
                                                                itemcat7[int(Item)] = (int(Price), int(Fraises), int(Tipo))
                                                        elif Cate=="8":
                                                                itemcat8[int(Item)] = (int(Price), int(Fraises), int(Tipo))
                                                        elif Cate=="9":
                                                                itemcat9[int(Item)] = (int(Price), int(Fraises), int(Tipo))
                                                        elif Cate=="21":
                                                                itemcat21[int(Item)] = (int(Price), int(Fraises), int(Tipo))
                                                        elif Cate=="22":
                                                                itemcat22[int(Item)] = (int(Price), int(Fraises), int(Tipo))
                                                        else:
                                                                print "Error parsing shop list!"
                                        fullitem, withfraises = struct.unpack('!hb', data)
                                        fullitem = str(fullitem)
                                        if int(fullitem)>=100 and int(fullitem) <=199:
                                                itemcategory=1
                                                item=fullitem[1:]
                                                item=int(item)
                                                item=str(item)
                                        elif int(fullitem)>=200 and int(fullitem) <=299:
                                                itemcategory=2
                                                item=fullitem[1:]
                                                item=int(item)
                                                item=str(item)
                                        elif int(fullitem)>=300 and int(fullitem) <=399:
                                                itemcategory=3
                                                item=fullitem[1:]
                                                item=int(item)
                                                item=str(item)
                                        elif int(fullitem)>=400 and int(fullitem) <=499:
                                                itemcategory=4
                                                item=fullitem[1:]
                                                item=int(item)
                                                item=str(item)
                                        elif int(fullitem)>=500 and int(fullitem) <=599:
                                                itemcategory=5
                                                item=fullitem[1:]
                                                item=int(item)
                                                item=str(item)
                                        elif int(fullitem)>=601 and int(fullitem) <=699:
                                                itemcategory=6
                                                item=fullitem[1:]
                                                item=int(item)
                                                item=str(item)
                                        elif int(fullitem)>=2100 and int(fullitem) <=2199:
                                                itemcategory=21
                                                item=fullitem[2:]
                                                item=int(item)
                                                item=str(item)
                                        elif int(fullitem)>=2200 and int(fullitem) <=2299:
                                                itemcategory=22
                                                item=fullitem[2:]
                                                item=int(item)
                                                item=str(item)
                                        elif int(fullitem)>=10101 and int(fullitem) <=10199:
                                                itemcategory=0
                                                item=fullitem[1:]
                                                item=int(item)
                                                item=str(item)
                                        else:
                                                itemcategory=0
                                                item=fullitem

                                                
                                        shopfraises = int(self.shopfraises)
                                        shopcheese = int(self.shopcheese)
                                        shopcoins = int(self.shopcoins)
                                        if withfraises == 1:
                                                if itemcategory==0:
                                                        if shopfraises < itemcat0[int(item)][1]:
                                                                self.sendData("\x14" + "\x06", [])
                                                        if shopfraises >= itemcat0[int(item)][1]:
                                                                if self.shopitems=="":
                                                                        self.shopitems=str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat0[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                else:
                                                                        self.shopitems=self.shopitems+","+str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat0[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                self.checkUnlockShopTitle()
                                                elif itemcategory==1:
                                                        if shopfraises < itemcat1[int(item)][1]:
                                                                self.sendData("\x14" + "\x06", [])
                                                        if shopfraises >= itemcat1[int(item)][1]:
                                                                if self.shopitems=="":
                                                                        self.shopitems=str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat1[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                else:
                                                                        self.shopitems=self.shopitems+","+str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat1[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                self.checkUnlockShopTitle()
                                                elif itemcategory==2:
                                                        if shopfraises < itemcat2[int(item)][1]:
                                                                self.sendData("\x14" + "\x06", [])
                                                        if shopfraises >= itemcat2[int(item)][1]:
                                                                if self.shopitems=="":
                                                                        self.shopitems=str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat2[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                else:
                                                                        self.shopitems=self.shopitems+","+str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat2[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                self.checkUnlockShopTitle()
                                                elif itemcategory==3:
                                                        if shopfraises < itemcat3[int(item)][1]:
                                                                self.sendData("\x14" + "\x06", [])
                                                        if shopfraises >= itemcat3[int(item)][1]:
                                                                if self.shopitems=="":
                                                                        self.shopitems=str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat3[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                else:
                                                                        self.shopitems=self.shopitems+","+str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat3[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                self.checkUnlockShopTitle()
                                                elif itemcategory==4:
                                                        if shopfraises < itemcat4[int(item)][1]:
                                                                self.sendData("\x14" + "\x06", [])
                                                        if shopfraises >= itemcat4[int(item)][1]:
                                                                if self.shopitems=="":
                                                                        self.shopitems=str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat4[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                else:
                                                                        self.shopitems=self.shopitems+","+str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat4[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                self.checkUnlockShopTitle()
                                                elif itemcategory==5:
                                                        if shopfraises < itemcat5[int(item)][1]:
                                                                self.sendData("\x14" + "\x06", [])
                                                        if shopfraises >= itemcat5[int(item)][1]:
                                                                if self.shopitems=="":
                                                                        self.shopitems=str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat5[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                else:
                                                                        self.shopitems=self.shopitems+","+str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat5[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                self.checkUnlockShopTitle()
                                                elif itemcategory==6:
                                                        if shopfraises < itemcat6[int(item)][1]:
                                                                self.sendData("\x14" + "\x06", [])
                                                        if shopfraises >= itemcat6[int(item)][1]:
                                                                if self.shopitems=="":
                                                                        self.shopitems=str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat6[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                else:
                                                                        self.shopitems=self.shopitems+","+str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat6[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                self.checkUnlockShopTitle()
                                                elif itemcategory==21:
                                                        if shopfraises < itemcat21[int(item)][1]:
                                                                self.sendData("\x14" + "\x06", [])
                                                        if shopfraises >= itemcat21[int(item)][1]:
                                                                if self.shopitems=="":
                                                                        self.shopitems=str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat21[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                else:
                                                                        self.shopitems=self.shopitems+","+str(fullitem)
                                                                        self.shopfraises=self.shopfraises-itemcat21[int(item)][1]
                                                                        self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                        self.sendShopList()
                                                                        self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                self.checkUnlockShopTitle()
                                                elif itemcategory==22:
                                                        if int(item) == 20:
                                                                if shopfraises < itemcat22[int(item)][1]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopfraises >= itemcat22[int(item)][1]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopfraises=self.shopfraises-150
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopfraises=self.shopfraises-150
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                        else:
                                                                if shopfraises < itemcat22[int(item)][1]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopfraises >= itemcat22[int(item)][1]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopfraises=self.shopfraises-itemcat22[int(item)][1]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopfraises=self.shopfraises-itemcat22[int(item)][1]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                else:
                                                        pass
                                        else:
                                                if itemcategory==0:
                                                        if itemcat0[int(item)][2] == 0:
                                                                if shopcheese < itemcat0[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcheese >= itemcat0[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat0[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat0[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                        elif itemcat0[int(item)][2] == 3:
                                                                if shopcoins < itemcat0[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcoins >= itemcat0[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat0[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat0[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                elif itemcategory==1:
                                                        if itemcat1[int(item)][2] == 0:
                                                                if shopcheese < itemcat1[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcheese >= itemcat1[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat1[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat1[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                        elif itemcat1[int(item)][2] == 3:
                                                                if shopcoins < itemcat1[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcoins >= itemcat1[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat1[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat1[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                elif itemcategory==2:
                                                        if itemcat2[int(item)][2] == 0:
                                                                if shopcheese < itemcat2[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcheese >= itemcat2[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat2[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat2[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                        elif itemcat2[int(item)][2] == 3:
                                                                if shopcoins < itemcat2[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcoins >= itemcat2[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat2[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat2[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                elif itemcategory==3:
                                                        if itemcat3[int(item)][2] == 0:
                                                                if shopcheese < itemcat3[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcheese >= itemcat3[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat3[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat3[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                        elif itemcat3[int(item)][2] == 3:
                                                                if shopcoins < itemcat3[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcoins >= itemcat3[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat3[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat3[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                elif itemcategory==4:
                                                        if itemcat4[int(item)][2] == 0:
                                                                if shopcheese < itemcat4[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcheese >= itemcat4[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat4[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat4[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                        elif itemcat4[int(item)][2] == 3:
                                                                if shopcoins < itemcat4[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcoins >= itemcat4[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat4[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat4[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                elif itemcategory==5:
                                                        if itemcat5[int(item)][2] == 0:
                                                                if shopcheese < itemcat5[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcheese >= itemcat5[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat5[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat5[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                        elif itemcat5[int(item)][2] == 3:
                                                                if shopcoins < itemcat5[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcoins >= itemcat5[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat5[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat5[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                elif itemcategory==6:
                                                        if itemcat6[int(item)][2] == 0:
                                                                if shopcheese < itemcat6[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcheese >= itemcat6[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat6[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat6[int(item)][1]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                        elif itemcat6[int(item)][2] == 3:
                                                                if shopcoins < itemcat6[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcoins >= itemcat6[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat6[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat6[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                elif itemcategory==21:
                                                        if itemcat21[int(item)][2] == 0:
                                                                if shopcheese < itemcat21[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcheese >= itemcat21[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat21[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat21[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                        elif itemcat21[int(item)][2] == 3:
                                                                if shopcoins < itemcat21[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcoins >= itemcat21[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat21[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat21[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                elif itemcategory==22:
                                                        if itemcat22[int(item)][2] == 0:
                                                                if shopcheese < itemcat22[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcheese >= itemcat22[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat22[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcheese=self.shopcheese-itemcat22[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                        elif itemcat22[int(item)][2] == 3:
                                                                if shopcoins < itemcat22[int(item)][0]:
                                                                        self.sendData("\x14" + "\x06", [])
                                                                if shopcoins >= itemcat22[int(item)][0]:
                                                                        if self.shopitems=="":
                                                                                self.shopitems=str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat22[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        else:
                                                                                self.shopitems=self.shopitems+","+str(fullitem)
                                                                                self.shopcoins=self.shopcoins-itemcat22[int(item)][0]
                                                                                self.sendData("\x14" + "\x02", struct.pack('!hb', int(fullitem), 1), True)
                                                                                self.sendShopList()
                                                                                self.sendAnimZelda(self.playerCode, itemcategory, int(item))
                                                                        self.checkUnlockShopTitle()
                                                else:
                                                        pass
                                
                                elif eventToken2 == Tokens.custombuy[1]:
                                        #item customization buy
                                        item, withfraises = struct.unpack('!hb', data[:3])
                                        if self.checkInShop(item):
                                                if self.getItemCustomizable(item) > 0 or int(item) == 10101 or int(item) == 10102 or int(item) == 10103 or int(item) == 10104 or int(item) == 10105 or int(item) == 10106 or int(item) == 10107 or int(item) == 10108 or int(item) == 10109 or int(item) == 10110:
                                                        shopcheese = int(self.shopcheese)
                                                        shopfraises = int(self.shopfraises)
                                                        if withfraises == 1:
                                                                if shopfraises < 20:
                                                                        pass
                                                                else:
                                                                        fullitem = str(item)
                                                                        SplitList=self.shopitems.split(",")
                                                                        for Value in SplitList:
                                                                                if "_" in Value:
                                                                                        theitem, custom = Value.split("_")
                                                                                else:
                                                                                        theitem = Value
                                                                                        custom = ""
                                                                                
                                                                                if int(theitem) == int(fullitem):
                                                                                        SplitList[SplitList.index(Value)] = Value + "_"
                                                                        self.shopitems = ",".join(SplitList)
                                                                        self.shopfraises=self.shopfraises-20
                                                                        self.sendShopList()
                                                        else:
                                                                if shopcheese < 2000:
                                                                        pass
                                                                else:
                                                                        fullitem = str(item)
                                                                        SplitList=self.shopitems.split(",")
                                                                        for Value in SplitList:
                                                                                if "_" in Value:
                                                                                        theitem, custom = Value.split("_")
                                                                                else:
                                                                                        theitem = Value
                                                                                        custom = ""
                                                                                
                                                                                if int(theitem) == int(fullitem):
                                                                                        SplitList[SplitList.index(Value)] = Value + "_"
                                                                        self.shopitems = ",".join(SplitList)
                                                                        self.shopcheese=self.shopcheese-2000
                                                                        self.sendShopList()
                                elif eventToken2 == Tokens.custom[1]:
                                        #item customization
                                        itemm, length = struct.unpack('!hb', data[:3])
                                        data = data[3:]
                                        customizations = []
                                        x = 0
                                        if length != self.getItemCustomizable(itemm):
                                                pass
                                        else:
                                                while x < length:
                                                        if data[:4] == "":
                                                                break
                                                        else:
                                                                customizations.append(struct.unpack('!i', data[:4])[0])
                                                                data = data[4:]
                                                
                                                SplitList = self.shopitems.split(",")
                                                for Value in SplitList:
                                                        if "_" in Value:
                                                                theitem, custom = Value.split("_", 1)
                                                        else:
                                                                theitem = Value
                                                                custom = ""
                                                        if int(theitem) == int(itemm):
                                                                SplitList[SplitList.index(Value)] = theitem + "_" + "+".join(map(lambda x: ("%x" % ((x>>16)&0xFF)).rjust(2, "0") + ("%x" % ((x>>8)&0xFF)).rjust(2, "0") + ("%x" % (x&0xFF)).rjust(2, "0"), customizations))
                                                                self.shopitems = ",".join(SplitList)
                                                                
                                                                item = itemm
                                                                fullitem = str(item)
                                                                if int(item)>=100 and int(item) <=199:
                                                                        itemcategory=1
                                                                        item=str(int(fullitem[1:]))
                                                                elif int(item)>=200 and int(item) <=299:
                                                                        itemcategory=2
                                                                        item=str(int(fullitem[1:]))
                                                                elif int(item)>=300 and int(item) <=399:
                                                                        itemcategory=3
                                                                        item=str(int(fullitem[1:]))
                                                                elif int(item)>=400 and int(item) <=499:
                                                                        itemcategory=4
                                                                        item=str(int(fullitem[1:]))
                                                                elif int(item)>=500 and int(item) <=599:
                                                                        itemcategory=5
                                                                        item=str(int(fullitem[1:]))
                                                                elif int(item)>=600 and int(item) <=699:
                                                                        itemcategory=6
                                                                        item=str(int(fullitem[1:]))
                                                                elif int(item)>=2100 and int(item) <=2199:
                                                                        itemcategory=21
                                                                        item=str(int(fullitem[2:]))
                                                                elif int(item)>=2200 and int(item) <=2299:
                                                                        itemcategory=22
                                                                        item=str(int(fullitem[2:]))
                                                                elif int(item)>=10101 and int(item) <=10199:
                                                                        itemcategory=0
                                                                        item=str(int(fullitem[1:]))
                                                                else:
                                                                        itemcategory=0
                                                                        item=item
                                                                itemo = item
                                                                item = str(item) + self.getItemCustomization(fullitem)
                                                                looktoplist = self.look.split(";")
                                                                looklist = looktoplist[1].split(",")
                                                                looklist2 = map(lambda i: i.split("_")[0] if "_" in str(i) else str(i), looklist)
                                                                if itemcategory==0:
                                                                        if "_" in looklist[0]:
                                                                                if looklist[0].split("_")[0] == str(itemo):
                                                                                        looklist[0]=str(item)
                                                                        elif looklist[0] == str(item):
                                                                                looklist[0]=str(item)
                                                                elif itemcategory==1:
                                                                        if "_" in looklist[1]:
                                                                                if looklist[1].split("_")[0] == str(itemo):
                                                                                        looklist[1]=str(item)
                                                                        elif looklist[1] == str(itemo):
                                                                                looklist[1]=str(item)
                                                                elif itemcategory==2:
                                                                        if "_" in looklist[2]:
                                                                                if looklist[2].split("_")[0] == str(itemo):
                                                                                        looklist[2]=str(item)
                                                                        elif looklist[2] == str(itemo):
                                                                                looklist[2]=str(item)
                                                                elif itemcategory==3:
                                                                        if "_" in looklist[3]:
                                                                                if looklist[3].split("_")[0] == str(itemo):
                                                                                        looklist[3]=str(item)
                                                                        elif looklist[3] == str(itemo):
                                                                                looklist[3]=str(item)
                                                                elif itemcategory==4:
                                                                        if "_" in looklist[4]:
                                                                                if looklist[4].split("_")[0] == str(itemo):
                                                                                        looklist[4]=str(item)
                                                                        elif looklist[4] == str(itemo):
                                                                                looklist[4]=str(item)
                                                                elif itemcategory==5:
                                                                        if "_" in looklist[5]:
                                                                                if looklist[5].split("_")[0] == str(itemo):
                                                                                        looklist[5]=str(item)
                                                                        elif looklist[5] == str(itemo):
                                                                                looklist[5]=str(item)
                                                                elif itemcategory==6:
                                                                        if "_" in looklist[6]:
                                                                                if looklist[6].split("_")[0] == str(itemo):
                                                                                        looklist[6]=str(item)
                                                                        elif looklist[6] == str(itemo):
                                                                                looklist[6]=str(item)
                                                                elif itemcategory==21:
                                                                        pass
                                                                elif itemcategory==22:
                                                                        pass
                                                                else:
                                                                        pass
                                                                
                                                                looktoplist[1] = json.dumps(looklist)
                                                                looktoplist[1] = looktoplist[1].strip('[]')
                                                                looktoplist[1] = looktoplist[1].replace("\"","")
                                                                looktoplist[1] = looktoplist[1].replace(" ","")
                                                                self.look = ";".join(map(str, looktoplist))
                                                                self.look = self.look.replace(" ","")
                                                                self.sendShopList()
                                                                self.sendLookChange()
                                else:
                                        pass #logging.warning("Unimplemented Binary %r" % eventTokens)
                                        print "Market Error: Bin-"+repr(eventTokens)+"-DATA:"+repr(data)

                        elif eventToken1 == Tokens.Manipule[0]:
                                if eventToken2 == Tokens.Manipule[1]:
                                        pass

                        elif eventToken1 == Tokens.typechamane[0]:
                                if eventToken2 == Tokens.typechamane[1]:
                                        #TypeChamane
                                        hardMode = struct.unpack("!?", data)[0]
                                        if self.micesaves>=0:
                                                if hardMode:
                                                        self.hardMode=1
                                                        self.sendHardMode("1")
                                                else:
                                                        self.hardMode=0
                                                        self.sendHardMode("0")
                                elif eventToken2 == Tokens.coleurchamane[1]:
                                        #CouleurChamane
                                        if self.micesaves>=0:
                                                scolor = self.parseBinaryData(data, "i")
                                                htmlcolor=str(hex(scolor)).split("x")[1]
                                                if htmlcolor!=self.color2:
                                                        self.server.mouseColorInfo(False, self.username, [self.color1, htmlcolor])
                                                        self.color2=htmlcolor
                                elif eventToken2 == Tokens.sentemailaddress[1]:    
                                        # Email Address
                                        if self.privilegeLevel!=0:
                                            utfLength=struct.unpack('!h', data[:2])[0]
                                            EmailAddr=data[2:utfLength+2]
                                            data=data[utfLength+2:]
                                            utfLength=struct.unpack('!h', data[:2])[0]
                                            Langue=data[2:utfLength+2]
                                            if not self.ValidatedEmail:
                                                if not self.checkDuplicateEmail(EmailAddr):
                                                    if self.checkValidEmail(EmailAddr):
                                                        self.sendEmailSent()
                                                        self.EmailAddress=EmailAddr
                                                        self.LastEmailCode = str(self.GetRandomChars(5))
                                                        self.server.sendValidationEmail(self.LastEmailCode, Langue, EmailAddr, 1)
                                                    else:
                                                        self.sendEmailAddrAlreadyUsed()
                                                else:
                                                    self.sendEmailAddrAlreadyUsed()


                                elif eventToken2 == Tokens.sentvalidatecode[1]:                 
                                        # Get Validation Code
                                        if self.privilegeLevel!=0:
                                            utflength=struct.unpack('!h', data[:2])[0]
                                            code = data[2:utflength+2]
                                            if not self.ValidatedEmail:
                                                if str(code)==str(self.LastEmailCode):
                                                    dbcur.execute('UPDATE users SET Email = %s WHERE name = %s', [self.EmailAddress, self.username])
                                                    dbcur.execute('UPDATE users SET EmailInfo = %s WHERE name = %s', ["True", self.username])
                                                    self.sendEmailValidated()
                                                    self.sendEmailValidatedDialog()
                                                    self.ValidatedEmail = True
                                                    if not self.checkInShop("209"):
                                                        if self.shopitems=="":
                                                            self.shopitems = str("209")
                                                        else:
                                                            self.shopitems = self.shopitems+",209"
                                                        self.sendAnimZelda(self.playerCode, "2", "9")
                                                        self.checkUnlockShopTitle()
                                                    self.shopcheese+=40
                                                else:
                                                    self.sendEmailCodeInvalid()

                                            elif not self.ValidatedPassChange:
                                                if str(code)==str(self.LastEmailCode):
                                                    self.ValidatedPassChange=True
                                                    self.sendEmailValidatedDialog()
                                                else:
                                                    self.sendEmailCodeInvalid()

                                elif eventToken2 == Tokens.codechangepass[1]:
                                        #Send Code for Change Password
                                        if self.privilegeLevel!=0:
                                                if self.Langue=="RU":
                                                        self.sendData("\x06" + "\x14",["<ROSE>Выйдите из игры и при входе нажмите кнопку Утерянный пароль"])
                                                else:
                                                        self.sendData("\x06" + "\x14",["<ROSE>Logout and press Forgot password"])

                                elif eventToken2 == Tokens.changepass[1]:
                                        #Sent Change Password
                                        if self.privilegeLevel!=0:
                                            utfLength=struct.unpack('!h', data[:2])[0]
                                            PassHash=data[2:utfLength+2]
                                            data=data[utfLength+2:]
                                            utfLength=struct.unpack('!h', data[:2])[0]
                                            ForumSalt=data[2:utfLength+2]
                                            if self.ValidatedPassChange:
                                                self.ValidatedPassChange=False
                                                passwordHash=hashlib.sha512(PassHash).hexdigest()
                                                dbcur.execute('UPDATE users SET password = %s WHERE name = %s', [passwordHash, self.username])
                                                #self.Database.commit()

                                elif eventToken2 == Tokens.recoverysend[1]:        
                                        # Send Recovery Password via Index
                                        utfLength=struct.unpack('!h', data[:2])[0]
                                        username=data[2:utfLength+2]
                                        data=data[utfLength+2:]
                                        utfLength=struct.unpack('!h', data[:2])[0]
                                        EmailAddr=data[2:utfLength+2]
                                        if self.checkEmailAddrrsSelf(EmailAddr, username):
                                            self.UsernameRecoveryPass = username
                                            self.sendEmailRequestedCodeForChange()
                                            self.EmailAddress = EmailAddr
                                            self.LastEmailCode = str(self.GetRandomChars(5))
                                            self.server.sendRecoveryEmail(self.LastEmailCode, EmailAddr)
                                        else:
                                            self.sendEmailRequestedCodeForChangeInvalid()

                                elif eventToken2 == Tokens.recoverysendvalidation[1]: 
                                        # Validation Code for Recovery Password
                                        utflength=struct.unpack('!h', data[:2])[0]
                                        code = data[2:utflength+2]
                                        if str(code)==str(self.LastEmailCode):
                                            self.ValidatedPassChange=True
                                            self.sendRecoveryEmailValidatedDialog()
                                        else:
                                            self.sendEmailRequestedCodeForChangeInvalid()

                                elif eventToken2 == Tokens.recoverychangepassword[1]:         
                                        # Change Password in Recovery Form
                                        utfLength=struct.unpack('!h', data[:2])[0]
                                        PassHash=data[2:utfLength+2]
                                        data=data[utfLength+2:]
                                        utfLength=struct.unpack('!h', data[:2])[0]
                                        ForumPassHash=data[2:utfLength+2]
                                        data=data[utfLength+2:]
                                        if self.ValidatedPassChange:
                                            self.ValidatedPassChange=False
                                            passwordHash=hashlib.sha512(PassHash).hexdigest()
                                            dbcur.execute('UPDATE users SET password = %s WHERE name = %s', [passwordHash, self.UsernameRecoveryPass])
                                            #self.Database.commit()
                                elif eventToken2 == Tokens.stats[1]:
                                        #"Stats"
                                        
                                        language, OSVERS, FLASHVERS = self.parseBinaryData(data, "uuu")
                                        #self.Langue = language.upper()
                                        self.computer = OSVERS
                                        self.flashvers = FLASHVERS
                                        
                                        if self.Langue=="ZH-CN":
                                                self.Langue="CN"
                                        if self.Langue=="ZH-TW":
                                                self.Langue="CN"
                                        if self.Langue=="FR":
                                                if self.server.GetCapabilities:
                                                        print "["+str(datetime.today())+"] "+"EN Kicked. IP: "+self.address[0]
                                                        self.sendData("\x1A" + "\x12",["0", "FR/EN detected."])
                                                        self.transport.loseConnection()
                                                        self.isBanned=True
                                                self.Langue="FR"
                                        if self.Langue=="PT":
                                                self.Langue="BR" #lol

                                        try:
                                                utfLength = struct.unpack('!h', data[:2])[0]
                                                language = data[2:utfLength+2]
                                                data=data[utfLength+2:]
                                                utfLength = struct.unpack('!h', data[:2])[0]
                                                computer = data[2:utfLength+2]
                                                data=data[utfLength+2:]
                                                if language=="tr":self.Langue="tr"
                                                elif language=="en":self.Langue="en"
                                                elif language=="es":self.Langue="es"
                                        except:
                                                pass

                                elif eventToken2 == Tokens.gamelog[1]:
                                        #GameLog?
                                        data = data[4:]
                                        utfLength=struct.unpack('!h', data[:2])[0]
                                        Log=data[2:utfLength+2]
                                        if self.username == "":
                                                pass
                                        else:
                                                pass
                                else:
                                        pass #logging.warning("Unimplemented Error: Bin-"+repr(eventTokens)+"-DATA:"+repr(data))
                                        print "Game Error: Bin-"+repr(eventTokens)+"-DATA:"+repr(data)
                        elif eventToken1 == Tokens.vbig[0]:
                                if eventToken2 == Tokens.vbig[1]:
                                        # Transformation Object
                                        ID=struct.unpack("!h", data)[0]
                                        if not ID in [48, 49, 50, 51, 52, 53]:
                                                ID=53
                                        data=struct.pack("!ih", self.playerCode, ID)
                                        if self.isAfk:
                                                self.isAfk=False
                                        if not self.isDead:
                                                self.room.sendAllBin("\x1B\x0B", data)
                                else:
                                        pass #logging.warning("Unimplemented Binary %r" % eventTokens)
                                        print "VBig Error: Bin-"+repr(eventTokens)+"-DATA:"+repr(data)
                        elif eventToken1 == Tokens.idk[0]:
                                if eventToken2 == Tokens.idk[1]:
                                        pass
                                else:
                                        pass #logging.warning("Unimplemented Binary %r" % eventTokens)
                                        print "idk Error: Bin-"+repr(eventTokens)+"-DATA:"+repr(data)
                        elif eventToken1 == Tokens.lua[0]:
                                if eventToken2 == Tokens.lua[1]:
                                        # Lua Script
                                        if self.server.LuaEnabled:
                                                utfLength=struct.unpack('!h', data[:2])[0]
                                                LuaScript=data[2:utfLength+2]
                                                if self.privilegeLevel >= 10:
                                                        if self.username in ["Arthurko"]:
                                                                try:
                                                                        self.execScript(LuaScript)
                                                                except Exception as e:
                                                                        self.sendMessage("<R>Ошибка при выполнении скрипта:\n"+str(e))
                                                        else:
                                                                self.sendMessage("Только программисты могут использовать команду /lua")
                                                else:
                                                        self.sendMessage("Только программисты могут использовать команду /lua")
                                elif eventToken2 == Tokens.presskey[1]:
                                        # Press Key
                                        keyid = struct.unpack("!h", data[:2])[0]

                                        if self.room.isMinigame:
                                                self.room.minigame.event_keypress(self, keyid)

                                        if self.room.isSharpie:
                                                if keyid == 32:
                                                       self.movePlayer(self.username, 0, 0, True, 0, -50, True)
                                else:
                                        pass #logging.warning("Unimplemented Binary %r" % eventTokens)
                                        print "PressKey Error: Bin-"+repr(eventTokens)+"-DATA:"+repr(data)
                        else:
                                pass #logging.warning("Unimplemented Binary %r" % eventTokens)
        
        def parseDataUTF(self, data):
                
                values = data.split("\x01")

                eventTokens = values.pop(0)
                eventToken1, eventToken2 = eventTokens

                if eventToken1 == "A":
                        if eventToken2 == "E":
                                #Ping?
                                pass

                if eventToken1 == "\x1A":
                        if eventToken2 == "\x1A":
                                if self.ATEC_Time:
                                        if datetime.today()-self.ATEC_Time<timedelta(seconds=8):
                                                if self.room:
                                                        self.sendPlayerDisconnect(self.playerCode)
                                                        self.room.removeClient(self)
                                                self.sendModMessageChannel("Servidor", "Speedhack detected at "+str(self.address[0]))
                                                self.transport.loseConnection()
                                self.ATEC_Time=datetime.today()
                                self.sendATEC()
                                        
                        elif eventToken2 == "\x02":
                                #awake timer
                                #TempsZeroBR, = values
                                #TempsZeroBR = int(TempsZeroBR)
                                #print str(int(getTime() * 1000) - int(self.AWKE_Time))
                                #self.AWKE_Time=int(getTime() * 1000)
                                if self.AwakeTimerKickTimer:
                                        try:
                                                self.AwakeTimerKickTimer.cancel()
                                        except:
                                                self.AwakeTimerKickTimer=None
                                self.AwakeTimerKickTimer = reactor.callLater(120, self.AwakeTimerKick)
                        elif eventToken2 == "\x03":
                                #create account
                                username, passwordHash, originUrl, lua = values
                                originUrl = originUrl.lower()
                                username = username.replace("<","")
                                username=username.lower()
                                username=username.capitalize()
                                if len(username)<3:
                                        self.transport.loseConnection()
                                elif len(username)>12:
                                        self.transport.loseConnection()
                                elif not username.isalpha():
                                        self.transport.loseConnection()
                                elif self.server.checkExistingUsers(username):
                                        self.sendData("\x1A" + "\x03", ) #Nickname Already Taken message
                                else:
                                        passwordHash=hashlib.sha512(passwordHash).hexdigest()
                                        ip_adr = self.address[0]
                                        ipregisterfile = open('./logs/ipreg.log', 'r').read()
                                        ip_count = ipregisterfile.count(ip_adr)
                                        if ip_count>3:
                                                if self.Langue=="RU":
                                                        self.sendPlayerBanLogin(0, "Вы не можете регистрировать более 3 аккаунтов.")
                                                else:
                                                        self.sendPlayerBanLogin(0, "You can not register more than 3 accounts.")
                                                self.transport.loseConnection()
                                        else:
                                                f = open('./logs/ipreg.log', 'a')
                                                f.write(str(ip_adr)+"\n")
                                                f.close()
                                                self.server.createAccount(username, passwordHash)
                                                self.login(username, passwordHash, "0")
                                                dbcur.execute('UPDATE users SET online = 1 WHERE name = %s', [username])
                        elif eventToken2 == "\x04":
                                #login
                                username, passwordHash, startRoom, originUrl, idk = values
                                originUrl = originUrl.lower()
                                if len(passwordHash)!=0 and len(passwordHash)!=64:
                                        passwordHash=""
                                if passwordHash != "":
                                        passwordHash=hashlib.sha512(passwordHash).hexdigest()
                                username = username.replace("<","")
                                if len(startRoom)>200:
                                        startRoom=""
                                startRoom = self.roomNameStrip(startRoom, "2").replace("<","").replace("&amp;#", "&amp;amp;#")
                                self.login(username, passwordHash, startRoom)
                                dbcur.execute('UPDATE users SET online = 1 WHERE name = %s', [username])
                        elif eventToken2 == "\x0B":
                                stageloaderInfobytesTotal, stageloaderInfobytesLoaded, loaderInfobytesTotal, loaderInfobytesLoaded, loaderInfoUrl = values
                                self.sendData("\x1A" + "\x04", ["<BL>"+str(loaderInfoUrl)+"<br>"+str(stageloaderInfobytesTotal)+"<br>"+str(stageloaderInfobytesLoaded)+"<br>"+str(loaderInfobytesTotal)+"<br>"+str(loaderInfobytesLoaded)])
                        elif eventToken2 == "\x15":
                                #Forum datas
                                PassMD5, Salt, Langue = values
                                if len(Salt)==10:
                                        pass #Create forum account here?
                        else:
                                pass #logging.warning("Unimplemented %r" % eventTokens)
                                #raise NotImplementedError, eventTokens
                elif eventToken1 == "\x04":
                        if eventToken2 == "\x0b":
                                #Flying, as cupid or map 666
                                #[Up(1)/Down(0), On(1)/Off(0)]
                                self.room.sendAllOthers(self, eventTokens, values + [self.playerCode])

                        elif eventToken2 == "\x06":
                                #objectCode, = values
                                self.room.sendAll(eventTokens, values)

                        elif eventToken2 == "\x08":
                                #direction, = values
                                #direction = int(direction)
                                self.room.sendAll(eventTokens, [self.playerCode] + values)

                        elif eventToken2 == "\x0A": #\n
                                self.isAfk=False
                        elif eventToken2 == "\x0C":
                                self.isAfk=False
                                if not self.room.currentWorld in CONJURATION_MAPS:
                                        if not self.isDead:
                                                self.isDead=True
                                                self.sendPlayerDied(self.playerCode, self.score)
                                                #self.room.checkShouldChangeWorld()
                                self.room.sendAllOthers(self, eventTokens, [self.playerCode])
                        elif eventToken2 == "\x0D": #\r
                                self.room.sendAllOthers(self, eventTokens, [self.playerCode])
                        elif eventToken2 == "\x07":
                                code=values[0]
                                #print code, self.JumpCheck
                                #if int(code)!=self.JumpCheck:
                                #       if self.room:
                                #               self.sendPlayerDisconnect(self.playerCode)
                                #               self.room.removeClient(self)
                                #       self.transport.loseConnection()
                                self.JumpCheck=self.JumpCheck+2
                        elif eventToken2 == "\x0E":
                                #conjuration
                                x, y = values
                                if not self.room.currentWorld in CONJURATION_MAPS:
                                        if not self.isDead:
                                                self.isDead=True
                                                self.sendPlayerDied(self.playerCode, self.score)
                                                #self.room.checkShouldChangeWorld()
                                else:
                                        reactor.callLater(10, self.sendDestroyConjuration, x, y)
                                        self.room.sendAll(eventTokens, values)

                        elif eventToken2 == "\x10":
                                #snowball
                            x, y, direction = values

                            if direction == "1" or direction == 1:
                                self.sendBoulneige2(34, int(y), int(x), int(1), int(1))
                    
                            if direction == "0" or direction == 0:
                                self.sendBoulneige2(34, int(y), int(x), int(0), int(1))

                        elif eventToken2 == "\x09":
                                #begin/end crouch
                                print "slm"
                        elif eventToken2 == "\x12":
                                pass #grappling hook
                                #x, y = values
                                #self.room.sendAll(eventTokens, [self.playerCode] + values)
                        elif eventToken2 == "\x13":
                                pass #grappling hook
                                #self.room.sendAll(eventTokens, [self.playerCode])
                        elif eventToken2 == "\x14":
                                print values
                        else:
                                pass #logging.warning("Unimplemented %r" % eventTokens)
                                #raise NotImplementedError, eventTokens
                elif eventToken1 == "\x06":
                        if eventToken2 == "\x1A":
                                #sent command

                                event, = values
                                event = event.replace("<","&amp;lt;").replace("&amp;#","&amp;amp;#")
                                event_raw = event.strip()
                                event = event_raw.lower()

                                EVENTRAWSPLIT = event_raw.split(" ")
                                EVENTCOUNT = len(EVENTRAWSPLIT)

                                if event.startswith("c "):
                                        pass
                                elif event == "dnsrb":
                                        pass
                                else:
                                        pass #logging.info("(%s) [c] %s: %s" % (self.room.name, self.username, event_raw))
                                if event in ("rire", "danse", "pleurer", "bisou", "kiss", "dnsrb"):
                                        pass
                                elif event.startswith("c "):
                                        pass
                                else:
                                        pass

                                if self.privilegeLevel >= 4:
                                        aq=open("./logs/staff.log","a")
                                        aq.write("["+str(getTime2())+"] ["+str(self.username)+"] ["+str(self.address[0])+"] => /"+str(event)+"\n")
                                        aq.close()

                                if len(event) == 1:
                                        event = "INVALID"

                                if EVENTCOUNT == 1:
                                        if event == "disconnect":
                                                self.sendPlayerDisconnect(self.playerCode)
                                                self.room.removeClient(self)
                                                self.transport.loseConnection()
                                        elif event in ("dance", "danse"):
                                            self.sendPlayerEmote(self.playerCode, 0, False)
                                        elif event == "/":
                                            pass
                                        elif event in ("laugh", "rire"):
                                            self.sendPlayerEmote(self.playerCode, 1, False)
                                        elif event == "claps":
                                            self.sendPlayerEmote(self.playerCode, 5, False)                                            
                                        elif event == "sleep":
                                            self.sendPlayerEmote(self.playerCode, 6, False)
                                        elif event == "facepalm":
                                            self.sendPlayerEmote(self.playerCode, 7, False)
                                        elif event == "sit":
                                            self.sendPlayerEmote(self.playerCode, 8, False)
                                        elif event == "confetti":
                                            self.sendPlayerEmote(self.playerCode, 9, False)
                                        elif event == "invi":
                                            if self.privilegeLevel>=5:
                                                    self.sendPlayerEmote(self.playerCode, 11, False)   
                                        elif event == "angry":
                                            self.sendPlayerEmote(self.playerCode, 4, False)  
                                        elif event in ("cry", "pleurer"):
                                            self.sendPlayerEmote(self.playerCode, 2, False)
                                        elif event == "hide" or event == "unhide":
                                                if self.privilegeLevel>=5:
                                                        if not self.isHidden:
                                                                self.isHidden = True
                                                                self.sendPlayerDisconnect(self.playerCode)
                                                                self.sendData("\x06"+"\x14",["Agora você está invisível para os outros jogadores (/unhide para voltar a ser visível)."])
                                                        else:
                                                                self.isHidden = False
                                                                self.enterRoom(self.roomname[3:])
                                                                self.sendData("\x06"+"\x14",["Você agora está visível."])
                                        elif event == "chatvip":
                                                if self.isVip:
                                                        if self.chatvip:
                                                                self.chatvip = False
                                                                Function.sendMBox(self, "Настройки VIP чата больше не активны.", 5, 20, 790, 0, "100%", "#324650", "#000000", 224)
                                                                reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(224)), True)
                                                        else:
                                                                self.chatvip = True
                                                                Function.sendMBox(self, "Настройки VIP чата активны.", 5, 20, 790, 0, "100%", "#324650", "#000000", 225)
                                                                reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(225)), True)
                                        elif event == "prefix":
                                                if self.privilegeLevel == 10:
                                                        if self.prefix:
                                                                self.prefix = False
                                                                Function.sendMBox(self, "Настройки чата больше не активны.", 5, 20, 790, 0, "100%", "#324650", "#000000", 226)
                                                                reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(226)), True)
                                                        else:
                                                                self.prefix = True
                                                                Function.sendMBox(self, "Настройки чата активны.", 5, 20, 790, 0, "100%", "#324650", "#000000", 227)
                                                                reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(227)), True)
                                        elif event == "salon" or event == "room" or event == "sala":
                                                self.enterRoom(self.server.recommendRoom(self.Langue))
                                        elif event == "vanilla":
                                                self.enterRoom(self.server.recommendRoomPrefixed("vanilla", self.Langue))
                                        elif event == "bootcamp":
                                                self.enterRoom(self.server.recommendRoomPrefixed("bootcamp", self.Langue))
                                        elif event == "survivor":
                                                self.enterRoom(self.server.recommendRoomPrefixed("survivor", self.Langue))
                                        elif event == "flyspeed":
                                                self.enterRoom(self.server.recommendRoomPrefixed("#flyspeed", self.Langue))
                                        elif event == "kanat":
                                                self.enterRoom(self.server.recommendRoomPrefixed("kanat", self.Langue))
                                        elif event == "racing":
                                                self.enterRoom(self.server.recommendRoomPrefixed("racing", self.Langue))
                                        elif event == "defilante":
                                                self.enterRoom(self.server.recommendRoomPrefixed("defilante", self.Langue))
                                        elif event == "baffbotffa":
                                                self.enterRoom(self.server.recommendRoomPrefixed("baffbotffa", self.Langue))
                                        elif event == "tutorial":
                                                self.enterRoom("\x03"+"[Tutorial] "+self.username)
                                        elif event == "mt":
                                                if self.isInTribe:
                                                        if self.muteTribe:
                                                                self.sendActivateTribeChat(self.username)
                                                                self.muteTribe = False
                                                        else:
                                                                self.sendDeactivateTribeChat(self.username)
                                                                self.muteTribe = True
                                        elif event == "silence":
                                                if self.privilegeLevel==0:
                                                        pass
                                                else:
                                                        if self.silence:
                                                                self.silence=False
                                                                self.sendEnableWhispers()
                                                        else:
                                                                self.silence=True
                                                                self.sendDisableWhispers()
                                        elif event == "online":
                                                if self.privilegeLevel>=3 or self.isAgent:
                                                    self.sendData("\x06" + "\x14",["<VP>Статистика сообществ:"])
                                                    ru = 0
                                                    en = 0
                                                    br = 0
                                                    fr = 0
                                                    cn = 0
                                                    ot = 0
                                                    for room in self.server.rooms.values():
                                                        for playerCode, client in room.clients.items():
                                                            if client.Langue == 'RU':
                                                                ru += 1
                                                            elif client.Langue == 'EN':
                                                                en += 1
                                                            elif client.Langue == 'BR':
                                                                br += 1
                                                            elif client.Langue == 'FR':
                                                                fr += 1
                                                            elif client.Langue == 'CN':
                                                                cn += 1
                                                            else:
                                                                ot += 1
                                                    self.sendData("\x06" + "\x14",["[RU] : <CH>"+str(ru)])
                                                    self.sendData("\x06" + "\x14",["[EN] : <CH>"+str(en)])
                                                    self.sendData("\x06" + "\x14",["[BR] : <CH>"+str(br)])
                                                    self.sendData("\x06" + "\x14",["[FR] : <CH>"+str(fr)])
                                                    self.sendData("\x06" + "\x14",["[CN] : <CH>"+str(cn)])
                                                    self.sendData("\x06" + "\x14",["[OT] : <CH>"+str(ot)])
                                                    self.sendData("\x06" + "\x14",["[ALL] : <CH>"+str(self.server.getConnectedPlayerCount())]) 

                                        elif event == "help":
                                                if self.isVip:
                                                        self.sendData("\x1A" + "\x1A",["<J>Команды для VIP игроков:\n\n<V>/setfur <Код> – сменить цвет шкуры (вводится без «#»)\n<V>/viptitle – открыть титул «VIP»\n<V>/magic – получить волшебную палочку\n<V>/button – получить пуговицу\n<V>/magicbutton – получить волшебную палочку и пуговицу\n<V>/chatvip – убрать префикс «VIP» перед никнеймом в чате. Повторный ввод команды возвращает префикс\n<V>/search <Никнейм> – получить информацию, в какой комнате находится игрок"])
                                                elif self.isAgent:
                                                        self.sendData("\x1A" + "\x1A",["<J>Шаблоны для пиара в Transformice:\n\n<T>ARTMICE - САМЫЙ ЛУЧШИЙ ПРИВАТНЫЙ СЕРВЕР TRANSFORMICE! ПРИ РЕГИСТРАЦИИ ДАЮТ 100000 СЫРА И 10000 КЛУБНИКИ! БЕСПЛАТНЫЙ МАГАЗИН! НОВЫЕ ШКУРЫ! НАБОР В МОДЕРАТОРЫ! ТЕБЕ ПОНРАВИТСЯ! ЗАХОДИ ==========================================================> vk.cc/1htYkb\n\n<J>Команды для Пиар Агентов:\n\n<V>/online – показать статистику сообществ"])
                                                elif self.isVip and self.isAgent:
                                                        self.sendData("\x1A" + "\x1A",["<J>Команды для VIP игроков:\n\n<V>/setfur <Код> – сменить цвет шкуры (вводится без «#»)\n<V>/viptitle – открыть титул «VIP»\n<V>/magic – получить волшебную палочку\n<V>/button – получить пуговицу\n<V>/magicbutton – получить волшебную палочку и пуговицу\n<V>/chatvip – убрать префикс «VIP» перед никнеймом в чате. Повторный ввод команды возвращает префикс\n<V>/search <Никнейм> – получить информацию, в какой комнате находится игрок\n\n<J>Шаблоны для пиара в Transformice:\n\n<T>ARTMICE - САМЫЙ ЛУЧШИЙ ПРИВАТНЫЙ СЕРВЕР TRANSFORMICE! ПРИ РЕГИСТРАЦИИ ДАЮТ 100000 СЫРА И 10000 КЛУБНИКИ! БЕСПЛАТНЫЙ МАГАЗИН! НОВЫЕ ШКУРЫ! НАБОР В МОДЕРАТОРЫ! ТЕБЕ ПОНРАВИТСЯ! ЗАХОДИ ===================================================> http://vk.cc/1htYkb\n\n<J>Команды для Пиар Агентов:\n\n<V>/online – показать статистику сообществ"])

                                                else:
                                                        pass
                                        elif event == "arrumarbug":
                                                if self.privilegeLevel!=0:
                                                        self.look = "1;0,0,0,0,0,0,0,0,0"
                                                        self.sendData("\x06" + "\x14",["Bug arrumado."])
                                        elif event == "module" or event == "minigames":
                                                minigames = ["flyspeed"]
                                                result = ""
                                                for minigame in minigames:
                                                        playercount=0
                                                        for room in self.server.rooms.values():
                                                                if room.name.lower()[3:].startswith("#"+minigame):
                                                                        playercount=playercount+room.getPlayerCount()
                                                        result = result + "\n<VP>#"+minigame+"<BL> : "+str(playercount)
                                                self.sendData("\x06" + "\x14",[result])
                                        elif event == "atelier801" or event == "micetop":
                                                if self.privilegeLevel != 0:
                                                        if not self.checkInShop("95"):
                                                                if self.shopitems=="":
                                                                        self.shopitems=str("95")
                                                                else:
                                                                        self.shopitems=self.shopitems+",95"
                                                                self.sendAnimZelda(self.playerCode, "0", "95")
                                                                self.checkUnlockShopTitle()
                                        elif event == "baffstats":
                                                if self.privilegeLevel != 0:
                                                        mybaffCount = int(self.baffwins)
                                                        self.sendData("\x06" + "\x14", ["<N>Você já venceu: <VP>"+str(mybaffCount)+"<N> baffs."])
                                        elif event == "hallow":
                                                if self.privilegeLevel>=5:
                                                        if self.room.isHalloween:
                                                                self.room.isHalloween = False
                                                        else:
                                                                self.room.sendAllBin("\x05\x2C"+"\x00\x07")
                                                                self.room.isHalloween = True
                                        elif event == "aexe":
                                                if self.privilegeLevel>=5:
                                                        self.sendData("" + "",["<N>List of Mobs: \n<CH>1123 <J>(Boss)\n <CH>358 <J>(Ghost)\n <CH>627 <J>(Skeleton)"])
                                        elif event == "sendbarco":
                                                if self.privilegeLevel==10:
                                                        self.room.sendAllBin("\x05\x2C"+"\x00\x06")
                                        elif event == "movebarco":
                                                if self.privilegeLevel==10:
                                                        self.room.sendAllBin("\x05\x2C"+"\x00\x02")
                                        elif event == "sendvento":
                                                if self.privilegeLevel==10:
                                                        self.room.sendAllBin("\x05\x2C"+"\x00\x03")
                                        elif event == "sendchuva":
                                                if self.privilegeLevel==10:
                                                        self.room.sendAllBin("\x05\x2C"+"\x00\x04")
                                        elif event == "sendtempestade":
                                                if self.privilegeLevel==10:
                                                        self.room.sendAllBin("\x05\x2C"+"\x00\x05")
                                        elif event == "sendraio":
                                                if self.privilegeLevel==10:
                                                        self.room.sendAllBin("\x05\x2C"+"\x00\x07")
                                        elif event == "poor":
                                            # TOP Secret
                                            if self.privilegeLevel>=5:
                                                    sad = ['Lebeta']
                                                    self.sendData("\x1A\x19", sad)
                                        
                                        elif event == "look":
                                             if self.privilegeLevel>=1:
                                                self.sendData("\x1A" + "\x04", ["<V>Seu look: <VP>"+self.look])
                                        elif event == "money":
                                                if self.Langue=="RU":
                                                        self.sendData("\x06" + "\x14",["<BL>Ваш счет: <J>%i <BL>рублей." % (self.money)])
                                                        Function.sendMBox(self, "<BL>Ваш счет: <J>%i <BL>рублей." % (self.money), 5, 20, 790, 0, "100%", "#324650", "#000000", 228)
                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(228)), True)
                                                else:
                                                        self.sendData("\x06" + "\x14",["<BL>You have: <J>%i <BL>rubles." % (self.money)])
                                                        Function.sendMBox(self, "<BL>You have: <J>%i <BL>rubles." % (self.money), 5, 20, 790, 0, "100%", "#324650", "#000000", 229)
                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(229)), True)
                                        elif event == "vsha":
                                             if self.privilegeLevel>=10:
                                                self.sendShamanCode(self.playerCode)
                                                self.isShaman = True
                                        elif event == "vbig":
                                             if self.privilegeLevel>=8:
                                                self.sendData("\x1B" + "\x0A", "", True)
                                        elif event == "ld":
                                                self.sendData("\x1A" + "\x04", ["<BL>"+str(self.loaderInfoUrl)+"<br>"+str(self.stageloaderInfobytesTotal)+"<br>"+str(self.stageloaderInfobytesLoaded)+"<br>"+str(self.loaderInfobytesTotal)+"<br>"+str(self.loaderInfobytesLoaded)])
                                        elif event == "blacklist":
                                                self.sendData("\x1A" + "\x04", ["<J>"+str(self.server.blacklist)])
                                        elif event == "lde":
                                                self.sendData("\x1A" + "\x0B")
                                        #elif event == "bigtext":
                                        #       self.sendData("\x1A" + "\x04", ["To turn off big text, refresh the page and login again.<TI>"])
                                        elif event in ("profil", "profile", "perfil"):
                                                self.sendProfile(self.username)
                                        elif event == "staff":
                                                if self.privilegeLevel>=10:
                                                    maplist = []
                                                    mapslist = ""
                                                    dbcur.execute('select * from users')
                                                    rrfRows = dbcur.fetchall()
                                                    if rrfRows is None:
                                                        mapslist="Empty"
                                                    else:
                                                        for rrf in rrfRows:
                                                            name=rrf[0]
                                                            privlevel=rrf[3]
                                                            if int(privlevel)>=3:
                                                                if int(privlevel)==2:
                                                                    priv="MapCrew"
                                                                elif int(privlevel)==3:
                                                                        priv="Arb"    
                                                                elif int(privlevel)==4:
                                                                        priv="Bot"
                                                                elif int(privlevel)==5:
                                                                        priv="Mod" 
                                                                elif int(privlevel)==6:
                                                                        priv="SuperMod"
                                                                elif int(privlevel)==10:
                                                                        priv="Admin"
                                                                elif int(privlevel)==11:
                                                                        priv="Técnico"
                                                                elif int(privlevel)==7:
                                                                        priv="Undefined (7)"
                                                                elif int(privlevel)==8:
                                                                        priv="Undefined (8)"
                                                                elif int(privlevel)==0-1:
                                                                        priv="Account Locked"
                                                                elif int(privlevel)=="-1":
                                                                        priv="Account Locked"
                                                                elif int(privlevel)=="-2":
                                                                        priv="Unraked"
                                                                elif int(privlevel)==0-2:
                                                                        priv="Unraked"
                                                                elif int(privlevel)==999:
                                                                        priv="Mod Inivisvel (Sem comandos, apenas chat)"    
                                                                mapslist=mapslist+"<br>"+str(name)+" = "+str(priv)
                                                    self.sendData("\x06" + "\x14",[mapslist])           
                                        elif event == "items":
                                                if self.disableShop:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Items Enabled."])
                                                        self.disableShop=False
                                                else:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Items Disabled."])
                                                        self.disableShop=True
                                        elif event == "censor":
                                                if self.censorChat:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Censoring chat disabled."])
                                                        self.censorChat=False
                                                else:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Censoring chat enabled."])
                                                        self.censorChat=True
                                        elif event == "mutechat":
                                                if self.muteChat:
                                                        self.sendData("\x1A" + "\x04", ["<BL>You can now recieve chat messages."])
                                                        self.muteChat=False
                                                else:
                                                        self.sendData("\x1A" + "\x04", ["<BL>You will not receive any more chat messages."])
                                                        self.muteChat=True
                                        elif event == "transen":
                                                if self.Translating:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Messages will not be translated anymore."])
                                                        self.Translating=False
                                                else:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Messages will now be translated to English."])
                                                        self.Translating=True
                                        elif event == "editeur":
                                                if self.privilegeLevel==0:
                                                        pass
                                                else:
                                                        self.enterRoom("\x03"+"[Editeur] "+self.username)
                                                        self.sendData("\x0E" + "\x0E",[])
                                        elif event == "totem":
                                                if self.privilegeLevel==0:
                                                        pass
                                                else:
                                                        if self.micesaves>=0:
                                                                self.enterRoom("\x03"+"[Totem] "+self.username)
                                        elif event == "sauvertotem":
                                                if self.room.isTotemEditeur:
                                                        self.server.setTotemData(self.username, self.Totem[0], self.Totem[1])
                                                        self.STotem[0]=self.Totem[0]
                                                        self.STotem[1]=self.Totem[1]
                                                        self.sendPlayerDied(self.playerCode, self.score)
                                                        self.enterRoom(self.server.recommendRoom(self.Langue))
                                        elif event == "resettotem":
                                                if self.room.isTotemEditeur:
                                                        self.Totem =[0,""]
                                                        self.RTotem=True
                                                        self.isDead=True
                                                        self.sendPlayerDied(self.playerCode, self.score)
                                                        self.room.checkShouldChangeWorld()
                                        elif event == "mapranking" or event == "mapclassment":
                                                        if self.privilegeLevel>=5:
                                                                Userlist = []
                                                                dbcur.execute('select code, yesvotes from mapeditor')
                                                                rrfRows = dbcur.fetchall()
                                                                if rrfRows is None:
                                                                        pass
                                                                else:
                                                                        for rrf in rrfRows:
                                                                                Userlist.append(rrf)
                                                                #Maps
                                                                FirstList={}
                                                                FirstListDisp=[]
                                                                for user in Userlist:
                                                                        FirstList[user[0]] = user[1]
                                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                                FirstListDisp.append([1, mSL, FirstList[mSL]])
                                                                del FirstList[mSL]
                                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                                FirstListDisp.append([2, mSL, FirstList[mSL]])
                                                                del FirstList[mSL]
                                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                                FirstListDisp.append([3, mSL, FirstList[mSL]])
                                                                del FirstList[mSL]
                                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                                FirstListDisp.append([4, mSL, FirstList[mSL]])
                                                                del FirstList[mSL]
                                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                                FirstListDisp.append([5, mSL, FirstList[mSL]])
                                                                del FirstList[mSL]
                                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                                FirstListDisp.append([6, mSL, FirstList[mSL]])
                                                                del FirstList[mSL]
                                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                                FirstListDisp.append([7, mSL, FirstList[mSL]])
                                                                del FirstList[mSL]
                                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                                FirstListDisp.append([8, mSL, FirstList[mSL]])
                                                                del FirstList[mSL]
                                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                                FirstListDisp.append([9, mSL, FirstList[mSL]])
                                                                del FirstList[mSL]
                                                                mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                                FirstListDisp.append([10, mSL, FirstList[mSL]])
                                                                del FirstList[mSL]
                                                                self.sendData("\x1A" + "\x04", ["<VP>Map Ranking <V>(Votes)"])
                                                                self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[0][0])+" - <N>@"+str(FirstListDisp[0][1])+" <V>- "+str(FirstListDisp[0][2])])
                                                                self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[1][0])+" - <N>@"+str(FirstListDisp[1][1])+" <V>- "+str(FirstListDisp[1][2])])
                                                                self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[2][0])+" - <N>@"+str(FirstListDisp[2][1])+" <V>- "+str(FirstListDisp[2][2])])
                                                                self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[3][0])+" - <N>@"+str(FirstListDisp[3][1])+" <V>- "+str(FirstListDisp[3][2])])
                                                                self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[4][0])+" - <N>@"+str(FirstListDisp[4][1])+" <V>- "+str(FirstListDisp[4][2])])
                                                                self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[5][0])+" - <N>@"+str(FirstListDisp[5][1])+" <V>- "+str(FirstListDisp[5][2])])
                                                                self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[6][0])+" - <N>@"+str(FirstListDisp[6][1])+" <V>- "+str(FirstListDisp[6][2])])
                                                                self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[7][0])+" - <N>@"+str(FirstListDisp[7][1])+" <V>- "+str(FirstListDisp[7][2])])
                                                                self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[8][0])+" - <N>@"+str(FirstListDisp[8][1])+" <V>- "+str(FirstListDisp[8][2])])
                                                                self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[9][0])+" - <N>@"+str(FirstListDisp[9][1])+" <V>- "+str(FirstListDisp[9][2])])
                                        elif event == "bcranking" or event == "bcclassment":
                                                        Userlist = []
                                                        dbcur.execute('select name, bootcamp from users where privlevel = 1')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                pass
                                                        else:
                                                                for rrf in rrfRows:
                                                                        Userlist.append(rrf)
                                                        #Boot camp firsts
                                                        FirstList={}
                                                        FirstListDisp=[]
                                                        for user in Userlist:
                                                                FirstList[user[0]] = user[1]
                                                        mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                        FirstListDisp.append([1, mSL, FirstList[mSL]])
                                                        del FirstList[mSL]
                                                        mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                        FirstListDisp.append([2, mSL, FirstList[mSL]])
                                                        del FirstList[mSL]
                                                        mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                        FirstListDisp.append([3, mSL, FirstList[mSL]])
                                                        del FirstList[mSL]
                                                        mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                        FirstListDisp.append([4, mSL, FirstList[mSL]])
                                                        del FirstList[mSL]
                                                        mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                        FirstListDisp.append([5, mSL, FirstList[mSL]])
                                                        del FirstList[mSL]
                                                        self.sendData("\x1A" + "\x04", ["<VP>Bootcamp Ranking <V>(Firsts)"])
                                                        self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[0][0])+" - <N>"+str(FirstListDisp[0][1])+" <V>- "+str(FirstListDisp[0][2])])
                                                        self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[1][0])+" - <N>"+str(FirstListDisp[1][1])+" <V>- "+str(FirstListDisp[1][2])])
                                                        self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[2][0])+" - <N>"+str(FirstListDisp[2][1])+" <V>- "+str(FirstListDisp[2][2])])
                                                        self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[3][0])+" - <N>"+str(FirstListDisp[3][1])+" <V>- "+str(FirstListDisp[3][2])])
                                                        self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[4][0])+" - <N>"+str(FirstListDisp[4][1])+" <V>- "+str(FirstListDisp[4][2])])
                                        elif event == "baffranking" or event == "baffclassment":
                                                        Userlist = []
                                                        dbcur.execute('select name, baffwins from users where privlevel = 1')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                pass
                                                        else:
                                                                for rrf in rrfRows:
                                                                        Userlist.append(rrf)
                                                        #Baff firsts
                                                        FirstList={}
                                                        FirstListDisp=[]
                                                        for user in Userlist:
                                                                FirstList[user[0]] = user[1]
                                                        mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                        FirstListDisp.append([1, mSL, FirstList[mSL]])
                                                        del FirstList[mSL]
                                                        mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                        FirstListDisp.append([2, mSL, FirstList[mSL]])
                                                        del FirstList[mSL]
                                                        mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                        FirstListDisp.append([3, mSL, FirstList[mSL]])
                                                        del FirstList[mSL]
                                                        mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                        FirstListDisp.append([4, mSL, FirstList[mSL]])
                                                        del FirstList[mSL]
                                                        mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                        FirstListDisp.append([5, mSL, FirstList[mSL]])
                                                        del FirstList[mSL]
                                                        self.sendData("\x1A" + "\x04", ["<VP>Baffbotffa Ranking <V>(Wins)"])
                                                        self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[0][0])+" - <N>"+str(FirstListDisp[0][1])+" <V>- "+str(FirstListDisp[0][2])])
                                                        self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[1][0])+" - <N>"+str(FirstListDisp[1][1])+" <V>- "+str(FirstListDisp[1][2])])
                                                        self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[2][0])+" - <N>"+str(FirstListDisp[2][1])+" <V>- "+str(FirstListDisp[2][2])])
                                                        self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[3][0])+" - <N>"+str(FirstListDisp[3][1])+" <V>- "+str(FirstListDisp[3][2])])
                                                        self.sendData("\x1A" + "\x04", ["<V>"+str(FirstListDisp[4][0])+" - <N>"+str(FirstListDisp[4][1])+" <V>- "+str(FirstListDisp[4][2])])
                                        elif event == "classement" or event == "ranking":
                                                        Userlist = []
                                                        dbcur.execute('select name, saves, first, cheese from users where privlevel = 1')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                            pass
                                                        else:
                                                            for rrf in rrfRows:
                                                                Userlist.append(rrf)
                                                        #Saves
                                                        SaveList={}
                                                        SaveListDisp=[]
                                                        for user in Userlist:
                                                            SaveList[user[0]] = user[1]
                                                        mSL=max(SaveList.iterkeys(), key=lambda k: SaveList[k])
                                                        SaveListDisp.append([1, mSL, SaveList[mSL]])
                                                        del SaveList[mSL]
                                                        mSL=max(SaveList.iterkeys(), key=lambda k: SaveList[k])
                                                        SaveListDisp.append([2, mSL, SaveList[mSL]])
                                                        del SaveList[mSL]
                                                        mSL=max(SaveList.iterkeys(), key=lambda k: SaveList[k])
                                                        SaveListDisp.append([3, mSL, SaveList[mSL]])
                                                        del SaveList[mSL]
                                                        mSL=max(SaveList.iterkeys(), key=lambda k: SaveList[k])
                                                        SaveListDisp.append([4, mSL, SaveList[mSL]])
                                                        del SaveList[mSL]
                                                        mSL=max(SaveList.iterkeys(), key=lambda k: SaveList[k])
                                                        SaveListDisp.append([5, mSL, SaveList[mSL]])
                                                        del SaveList[mSL]
                                                        mSL=max(SaveList.iterkeys(), key=lambda k: SaveList[k])
                                                        SaveListDisp.append([6, mSL, SaveList[mSL]])
                                                        del SaveList[mSL]
                                                        mSL=max(SaveList.iterkeys(), key=lambda k: SaveList[k])
                                                        SaveListDisp.append([7, mSL, SaveList[mSL]])
                                                        del SaveList[mSL]
                                                        mSL=max(SaveList.iterkeys(), key=lambda k: SaveList[k])
                                                        SaveListDisp.append([8, mSL, SaveList[mSL]])
                                                        del SaveList[mSL]
                                                        mSL=max(SaveList.iterkeys(), key=lambda k: SaveList[k])
                                                        SaveListDisp.append([9, mSL, SaveList[mSL]])
                                                        del SaveList[mSL]
                                                        mSL=max(SaveList.iterkeys(), key=lambda k: SaveList[k])
                                                        SaveListDisp.append([10, mSL, SaveList[mSL]])
                                                        del SaveList[mSL]
                                                        #Firsts
                                                        FirstList={}
                                                        FirstListDisp=[]
                                                        for user in Userlist:
                                                            FirstList[user[0]] = user[2]
                                                        mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                        FirstListDisp.append([1, mSL, FirstList[mSL]])
                                                        del FirstList[mSL]
                                                        mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                        FirstListDisp.append([2, mSL, FirstList[mSL]])
                                                        del FirstList[mSL]
                                                        mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                        FirstListDisp.append([3, mSL, FirstList[mSL]])
                                                        del FirstList[mSL]
                                                        mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                        FirstListDisp.append([4, mSL, FirstList[mSL]])
                                                        del FirstList[mSL]
                                                        mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                        FirstListDisp.append([5, mSL, FirstList[mSL]])
                                                        del FirstList[mSL]
                                                        mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                        FirstListDisp.append([6, mSL, FirstList[mSL]])
                                                        del FirstList[mSL]
                                                        mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                        FirstListDisp.append([7, mSL, FirstList[mSL]])
                                                        del FirstList[mSL]
                                                        mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                        FirstListDisp.append([8, mSL, FirstList[mSL]])
                                                        del FirstList[mSL]
                                                        mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                        FirstListDisp.append([9, mSL, FirstList[mSL]])
                                                        del FirstList[mSL]
                                                        mSL=max(FirstList.iterkeys(), key=lambda k: FirstList[k])
                                                        FirstListDisp.append([10, mSL, FirstList[mSL]])
                                                        del FirstList[mSL]
                                                        #Cheese
                                                        CheeseList={}
                                                        CheeseListDisp=[]
                                                        for user in Userlist:
                                                            CheeseList[user[0]] = user[3]
                                                        mSL=max(CheeseList.iterkeys(), key=lambda k: CheeseList[k])
                                                        CheeseListDisp.append([1, mSL, CheeseList[mSL]])
                                                        del CheeseList[mSL]
                                                        mSL=max(CheeseList.iterkeys(), key=lambda k: CheeseList[k])
                                                        CheeseListDisp.append([2, mSL, CheeseList[mSL]])
                                                        del CheeseList[mSL]
                                                        mSL=max(CheeseList.iterkeys(), key=lambda k: CheeseList[k])
                                                        CheeseListDisp.append([3, mSL, CheeseList[mSL]])
                                                        del CheeseList[mSL]
                                                        mSL=max(CheeseList.iterkeys(), key=lambda k: CheeseList[k])
                                                        CheeseListDisp.append([4, mSL, CheeseList[mSL]])
                                                        del CheeseList[mSL]
                                                        mSL=max(CheeseList.iterkeys(), key=lambda k: CheeseList[k])
                                                        CheeseListDisp.append([5, mSL, CheeseList[mSL]])
                                                        del CheeseList[mSL]
                                                        mSL=max(CheeseList.iterkeys(), key=lambda k: CheeseList[k])
                                                        CheeseListDisp.append([6, mSL, CheeseList[mSL]])
                                                        del CheeseList[mSL]
                                                        mSL=max(CheeseList.iterkeys(), key=lambda k: CheeseList[k])
                                                        CheeseListDisp.append([7, mSL, CheeseList[mSL]])
                                                        del CheeseList[mSL]
                                                        mSL=max(CheeseList.iterkeys(), key=lambda k: CheeseList[k])
                                                        CheeseListDisp.append([8, mSL, CheeseList[mSL]])
                                                        del CheeseList[mSL]
                                                        mSL=max(CheeseList.iterkeys(), key=lambda k: CheeseList[k])
                                                        CheeseListDisp.append([9, mSL, CheeseList[mSL]])
                                                        del CheeseList[mSL]
                                                        mSL=max(CheeseList.iterkeys(), key=lambda k: CheeseList[k])
                                                        CheeseListDisp.append([10, mSL, CheeseList[mSL]])


                                                        # pega os titulos dos top player
                                                        savetitle0 = self.server.getCurrentTitle(str(SaveListDisp[0][1]))
                                                        savetitle1 = self.server.getCurrentTitle(str(SaveListDisp[1][1]))
                                                        savetitle2 = self.server.getCurrentTitle(str(SaveListDisp[2][1]))
                                                        savetitle3 = self.server.getCurrentTitle(str(SaveListDisp[3][1]))
                                                        savetitle4 = self.server.getCurrentTitle(str(SaveListDisp[4][1]))
                                                        savetitle5 = self.server.getCurrentTitle(str(SaveListDisp[5][1]))
                                                        savetitle6 = self.server.getCurrentTitle(str(SaveListDisp[6][1]))
                                                        savetitle7 = self.server.getCurrentTitle(str(SaveListDisp[7][1]))
                                                        savetitle8 = self.server.getCurrentTitle(str(SaveListDisp[8][1]))
                                                        savetitle9 = self.server.getCurrentTitle(str(SaveListDisp[9][1]))

                                                        cheesetitle0 = self.server.getCurrentTitle(str(CheeseListDisp[0][1]))
                                                        cheesetitle1 = self.server.getCurrentTitle(str(CheeseListDisp[1][1]))
                                                        cheesetitle2 = self.server.getCurrentTitle(str(CheeseListDisp[2][1]))
                                                        cheesetitle3 = self.server.getCurrentTitle(str(CheeseListDisp[3][1]))
                                                        cheesetitle4 = self.server.getCurrentTitle(str(CheeseListDisp[4][1]))
                                                        cheesetitle5 = self.server.getCurrentTitle(str(CheeseListDisp[5][1]))
                                                        cheesetitle6 = self.server.getCurrentTitle(str(CheeseListDisp[6][1]))
                                                        cheesetitle7 = self.server.getCurrentTitle(str(CheeseListDisp[7][1]))
                                                        cheesetitle8 = self.server.getCurrentTitle(str(CheeseListDisp[8][1]))
                                                        cheesetitle9 = self.server.getCurrentTitle(str(CheeseListDisp[9][1]))

                                                        firsttitle0 = self.server.getCurrentTitle(str(FirstListDisp[0][1]))
                                                        firsttitle1 = self.server.getCurrentTitle(str(FirstListDisp[1][1]))
                                                        firsttitle2 = self.server.getCurrentTitle(str(FirstListDisp[2][1]))
                                                        firsttitle3 = self.server.getCurrentTitle(str(FirstListDisp[3][1]))
                                                        firsttitle4 = self.server.getCurrentTitle(str(FirstListDisp[4][1]))
                                                        firsttitle5 = self.server.getCurrentTitle(str(FirstListDisp[5][1]))
                                                        firsttitle6 = self.server.getCurrentTitle(str(FirstListDisp[6][1]))
                                                        firsttitle7 = self.server.getCurrentTitle(str(FirstListDisp[7][1]))
                                                        firsttitle8 = self.server.getCurrentTitle(str(FirstListDisp[8][1]))
                                                        firsttitle9 = self.server.getCurrentTitle(str(FirstListDisp[9][1]))

                                                        
                                                        
                                                        self.sendData("\x1A"+"\x0A", [str(SaveListDisp[0][1])+","+str(savetitle0)+","+str(SaveListDisp[0][2])+","+str(SaveListDisp[1][1])+","+str(savetitle1)+","+str(SaveListDisp[1][2])
                                                                                      +","+str(SaveListDisp[2][1])+","+str(savetitle2)+","+str(SaveListDisp[2][2])
                                                                                      +","+str(SaveListDisp[3][1])+","+str(savetitle3)+","+str(SaveListDisp[3][2])
                                                                                      +","+str(SaveListDisp[4][1])+","+str(savetitle4)+","+str(SaveListDisp[4][2])
                                                                                      +","+str(SaveListDisp[5][1])+","+str(savetitle5)+","+str(SaveListDisp[5][2])
                                                                                      +","+str(SaveListDisp[6][1])+","+str(savetitle6)+","+str(SaveListDisp[6][2])
                                                                                      +","+str(SaveListDisp[7][1])+","+str(savetitle7)+","+str(SaveListDisp[7][2])
                                                                                      +","+str(SaveListDisp[8][1])+","+str(savetitle8)+","+str(SaveListDisp[8][2])
                                                                                      +","+str(SaveListDisp[9][1])+","+str(savetitle9)+","+str(SaveListDisp[9][2])
                                                                                      ,
                                                                                      str(CheeseListDisp[0][1])+","+str(cheesetitle0)+","+str(CheeseListDisp[0][2])
                                                                                      +","+str(CheeseListDisp[1][1])+","+str(cheesetitle1)+","+str(CheeseListDisp[1][2])
                                                                                      +","+str(CheeseListDisp[2][1])+","+str(cheesetitle2)+","+str(CheeseListDisp[2][2])
                                                                                      +","+str(CheeseListDisp[3][1])+","+str(cheesetitle3)+","+str(CheeseListDisp[3][2])
                                                                                      +","+str(CheeseListDisp[4][1])+","+str(cheesetitle4)+","+str(CheeseListDisp[4][2])
                                                                                      +","+str(CheeseListDisp[5][1])+","+str(cheesetitle5)+","+str(CheeseListDisp[5][2])
                                                                                      +","+str(CheeseListDisp[6][1])+","+str(cheesetitle6)+","+str(CheeseListDisp[6][2])
                                                                                      +","+str(CheeseListDisp[7][1])+","+str(cheesetitle7)+","+str(CheeseListDisp[7][2])
                                                                                      +","+str(CheeseListDisp[8][1])+","+str(cheesetitle8)+","+str(CheeseListDisp[8][2])
                                                                                      +","+str(CheeseListDisp[9][1])+","+str(cheesetitle9)+","+str(CheeseListDisp[9][2])
                                                                                      ,
                                                                                      str(FirstListDisp[0][1])+","+str(firsttitle0)+","+str(FirstListDisp[0][2])
                                                                                      +","+str(FirstListDisp[1][1])+","+str(firsttitle1)+","+str(FirstListDisp[1][2])
                                                                                      +","+str(FirstListDisp[2][1])+","+str(firsttitle2)+","+str(FirstListDisp[2][2])
                                                                                      +","+str(FirstListDisp[3][1])+","+str(firsttitle3)+","+str(FirstListDisp[3][2])
                                                                                      +","+str(FirstListDisp[4][1])+","+str(firsttitle4)+","+str(FirstListDisp[4][2])
                                                                                      +","+str(FirstListDisp[5][1])+","+str(firsttitle5)+","+str(FirstListDisp[5][2])
                                                                                      +","+str(FirstListDisp[6][1])+","+str(firsttitle6)+","+str(FirstListDisp[6][2])
                                                                                      +","+str(FirstListDisp[7][1])+","+str(firsttitle7)+","+str(FirstListDisp[7][2])
                                                                                      +","+str(FirstListDisp[8][1])+","+str(firsttitle8)+","+str(FirstListDisp[8][2])
                                                                                      +","+str(FirstListDisp[9][1])+","+str(firsttitle9)+","+str(FirstListDisp[9][2])])
                                        elif event == "pw":
                                                self.room.pwing = True
                                        elif event == "meusmapas" or event == "mymaps":
                                            maplist = []
                                            mapslist = "<BR>Codigo - Votos - Porcentagem - Permanente"
                                            dbcur.execute('select * from mapeditor where name = %s', (self.username))
                                            rrfRows = dbcur.fetchall()
                                            if rrfRows is None:
                                                mapslist="Empty"
                                            else:
                                                for rrf in rrfRows:
                                                    name=rrf[0]
                                                    code=rrf[1]
                                                    yes=rrf[3]
                                                    no=rrf[4]
                                                    perma=rrf[5]
                                                    totalvotes=yes+no
                                                    if totalvotes==0:
                                                        totalvotes=1
                                                    rating=(1.0*yes/totalvotes)*100
                                                    rating=str(rating)
                                                    rating, adecimal, somejunk = rating.partition(".")
                                                    mapslist=mapslist+"<br>@"+str(code)+" - "+str(totalvotes)+" - "+str(rating)+"% - P"+str(perma)
                                                self.sendData("\x06" + "\x14",[mapslist])
                                        elif event == "allstaffact":
                                            if self.privilegeLevel >= 10:
                                                aq=open("./logs/staff.log","r+")
                                                self.sendData("\x1A" + "\x1A",[aq])
                                                aq.close()
                                        elif event == "gift":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.isVip:
                                                        self.room.sendAllBin("\x08\x2B", struct.pack("!l", int(self.playerCode)))
                                        elif event == "magic":
                                                if self.privilegeLevel==10 or self.isVip:
                                                        nwlook = "1;0,0,0,0,0,0,0,1,0"
                                                        self.look = nwlook
                                                        Function.sendMBox(self, "Вы получили волшебну палочку ^_^", 5, 20, 790, 0, "100%", "#324650", "#000000", 230)
                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(230)), True)
                                                        self.sendAnimZelda(self.playerCode, 7, 1)
                                        elif event == "button":
                                                if self.privilegeLevel==10 or self.isVip:
                                                        nwlook = "1;0,0,0,0,0,0,0,0,1"
                                                        self.look = nwlook
                                                        Function.sendMBox(self, "Вы получили пуговицу ^_^", 5, 20, 790, 0, "100%", "#324650", "#000000", 231)
                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(231)), True)
                                                        self.sendAnimZelda(self.playerCode, 8, 1)
                                        elif event == "magicbutton":
                                                if self.privilegeLevel==10 or self.isVip:
                                                        nwlook = "1;0,0,0,0,0,0,0,1,1"
                                                        self.look = nwlook
                                                        Function.sendMBox(self, "Вы получили волшебну палочку и пуговицу ^_^", 5, 20, 790, 0, "100%", "#324650", "#000000", 232)
                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(232)), True)
                                        elif event == "default":
                                                if self.privilegeLevel==10 or self.isVip:
                                                        nwlook = "1;0,0,0,0,0,0,0,0,0"
                                                        self.look = nwlook
                                                        Function.sendMBox(self, "Вы сняли аксессуары!", 5, 20, 790, 0, "100%", "#324650", "#000000", 233)
                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(233)), True)
                                        elif event == "don":
                                                if self.privilegeLevel==10 or self.isVip:
                                                        self.room.sendAllBin("\x08\x2B", struct.pack("!l", int(self.playerCode)))
                                        elif event == "light":
                                                if self.privilegeLevel==10 or self.isVip:
                                                        self.sendAnimZelda(self.playerCode, 0, 0)
                                        elif event == "news":
                                                if self.privilegeLevel>=1:
                                                        uptimez = (str(datetime.today()-self.server.STARTTIME).replace("<", "&lt;").split(".")[0])
                                                        self.sendData("\x1A" + "\x1A",["<center><img src='http://i.imgur.com/PSIwrqz.png'></center><T><TI>####### СТАТИСТИКА #######</TI><V>Игроков онлайн: <N>"+str(self.server.getConnectedPlayerCount())+"<BR><V>Модераторы онлайн: <N>нет<BR><V>Uptime: <N>"+str(uptimez)+"<BR><T><TI># ОФИЦИАЛЬНЫЕ СООБЩЕСТВА #</TI><V>Вконтакте: <N><a href='http://vk.com/artmice' target='_blank'>http://vk.com/returnmice</a><BR><V>Facebook: <N><a href='https://www.facebook.com/artmiceserver' target='_blank'>https://fb.com/artmiceserver</a><BR><V>Twitter: <N><a href='https://twitter.com/artmiceru' target='_blank'>http://twitter.com/artmiceru</a><BR><BR><BR><T><TI>##################### НОВОСТИ ######################</TI>"+str(open('./others/news.txt', 'r').read())+"<BR><T><TI>###################################################</TI>"])    
                                        elif event == "staffact":
                                            if self.privilegeLevel >= 10:
                                                maplist = []
                                                mapslist = "<BR><J>Staff Action Logs"
                                                dbcur.execute('select * from staffact ORDER by id DESC limit 50')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                    mapslist="Empty"
                                                else:
                                                    for rrf in rrfRows:
                                                        fillString=rrf[5]
                                                        rrf5=fillString+''.join(["0" for x in range(len(fillString),13)])
                                                        id=rrf[0]
                                                        name=rrf[1]
                                                        msg=rrf[2]
                                                        act=rrf[3]
                                                        act2=rrf[4]
                                                        mapslist=mapslist+"<br><ROSE>[<J>"+str(id)+"<ROSE>]<VP> "+str(name)+" <T>"+str(msg)+" <VP>"+str(act)+" <T>"+str(act2)+"<br>"+rrf[5]
                                                    self.sendData("\x1A" + "\x1A",[mapslist])
                                            else:
                                                    self.sendData("\x06" + "\x14",["Você não possui permisão para este comando."])
                                        elif event == "pr":
                                                if self.privilegeLevel!=0:
                                                        self.enterRoom("\x03"+"[Private] "+self.username)
                                        elif event == "prbootcamp":
                                                if self.room.PrivateRoom:
                                                        if self.room.name == self.Langue+"-"+"\x03[Private] "+self.username:
                                                                self.room.countStats = False
                                                                self.room.currentWorld = "-1"
                                                                self.room.isBootcamp = True
                                                                self.room.autoRespawn = True
                                                                self.room.roundTime = 360
                                                                self.room.PrivateRoom = True
                                                                self.room.isPlay = False
                                                                self.room.isSandbox = False
                                                                self.room.specificMap = False
                                                                self.room.isTotemEditeur = False
                                                                self.room.isEditeur = False
                                                                self.room.currentShamanCode = None
                                                                self.room.currentSyncroniserCode = None
                                                                self.room.forceNextShaman = False
                                                                self.room.forceNextMap = False
                                                                self.room.CodePartieEnCours = 1
                                                                self.room.CustomMapCounter = 1
                                                                self.room.identifiantTemporaire = -1
                                                                self.room.ISCMstatus = 0
                                                                self.room.everybodyIsShaman = self.room.isSandbox
                                                                self.room.nobodyIsShaman = self.room.isBootcamp
                                                                self.room.PRShamanIsShaman = False
                                                                self.room.resetRoom()
                                        elif event == "prnormal":
                                                if self.room.PrivateRoom:
                                                        if self.room.name == self.Langue+"-"+"\x03[Private] "+self.username:
                                                                self.room.countStats = False
                                                                self.room.isBootcamp = False
                                                                self.room.autoRespawn = False
                                                                self.room.roundTime = 120
                                                                self.room.PrivateRoom = True
                                                                self.room.isPlay = False
                                                                self.room.specificMap = False
                                                                self.room.isSandbox = False
                                                                self.room.isTotemEditeur = False
                                                                self.room.isEditeur = False
                                                                self.room.currentShamanCode = None
                                                                self.room.currentSyncroniserCode = None
                                                                self.room.forceNextShaman = False
                                                                self.room.forceNextMap = False
                                                                self.room.CodePartieEnCours = 1
                                                                self.room.CustomMapCounter = 1
                                                                self.room.identifiantTemporaire = -1
                                                                self.room.ISCMstatus = 0
                                                                self.room.everybodyIsShaman = self.room.isSandbox
                                                                self.room.nobodyIsShaman = self.room.isBootcamp
                                                                self.room.PRShamanIsShaman = False
                                                                self.room.resetRoom()
                                        elif event == "prsandbox":
                                                if self.room.PrivateRoom:
                                                        if self.room.name == self.Langue+"-"+"\x03[Private] "+self.username:
                                                                self.room.countStats = False
                                                                self.room.isBootcamp = False
                                                                self.room.autoRespawn = True
                                                                self.room.roundTime = 0
                                                                self.room.PrivateRoom = True
                                                                self.room.isPlay = True
                                                                self.room.isSandbox = True
                                                                self.room.specificMap = True
                                                                self.room.isTotemEditeur = False
                                                                self.room.isEditeur = False
                                                                self.room.currentShamanCode = None
                                                                self.room.currentSyncroniserCode = None
                                                                self.room.forceNextShaman = False
                                                                self.room.forceNextMap = False
                                                                self.room.CodePartieEnCours = 1
                                                                self.room.CustomMapCounter = 1
                                                                self.room.identifiantTemporaire = -1
                                                                self.room.ISCMstatus = 0
                                                                self.room.everybodyIsShaman = False
                                                                self.room.nobodyIsShaman = False
                                                                self.room.PRShamanIsShaman = True
                                                                self.room.resetRoom()
                                        elif event == "prclose":
                                                if self.room.PrivateRoom:
                                                        if self.room.name == self.Langue+"-"+"\x03[Private] "+self.username:
                                                                self.room.moveAllRoomClients("", True)
                                        elif event in ("kill", "suicide", "bubbles", "die", "mort"):
                                                if not self.isDead:
                                                        if int(self.room.getPlayerCount())>=2:
                                                         if not self.room.checkDeathCount()[1] == 1:
                                                                if not self.ShamanRespawn:
                                                                        self.isDead = True
                                                         else:
                                                                self.ShamanRespawn = False
                                                                self.isDead = True
                                                        else:
                                                         self.ShamanRespawn = False
                                                         self.isDead = True
                                                        self.score -= 1
                                                        if self.score < 0:
                                                                self.score = 0
                                                        self.sendPlayerDied(self.playerCode, self.score)
                                                        self.room.checkShouldChangeWorld()
                                        elif event == "re" or event == "respawn":
                                                if self.privilegeLevel>=10:
                                                        if self.isDead:
                                                                self.room.respawnSpecific(self.username)
                                                                if self.isShaman:
                                                                        lol = "runbin 01010005081401345"
                                                                        data = str(lol.split(" ", 1)[1]).replace(" ","")
                                                                        eventcodes=data[:4]
                                                                        data=data[4:]
                                                                        #self.sendData(self.HexToByte(eventcodes), self.HexToByte(data),True)
                                                                        self.room.sendAllBin(self.HexToByte(eventcodes), self.HexToByte(data))
                                        elif event in ("fkill", "fsuicide", "fbubbles", "fdie", "fmort"):
                                                if self.privilegeLevel >= 6:
                                                        if not self.isDead:
                                                                self.sendFakePlayerDied(self.playerCode, int(self.score))
 
                                        elif event in ("killall", "map", "np"):
                                                if not self.room.votingMode:
                                                        if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==3 or self.privilegeLevel==2:
                                                                self.room.killAll()
                                                        else:
                                                                if self.room.name == self.Langue+"-"+"\x03[Private] "+self.username:
                                                                        if event == "np":
                                                                                pass
                                                                        elif event == "killall":
                                                                                pass
                                                                        else:
                                                                                if self.room.isBootcamp:
                                                                                        pass
                                                                                else:
                                                                                        self.room.killAll()
                                                                elif self.room.isTribehouse:
                                                                        if self.isInTribe:
                                                                                if re.search("C", self.TribeInfo[1].split("#")[int(self.TribeRank)]):
                                                                                        self.room.killAll()
                                                                                else:
                                                                                        self.sendTribePermisson()
                                        elif event in ("music"):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==2:
                                                        self.sendStopMusic()
                                                elif self.room.isTribehouse:
                                                        if event == "musique":
                                                                if self.isInTribe:
                                                                        if re.search("z", self.TribeInfo[1].split("#")[int(self.TribeRank)]):
                                                                                self.sendStopMusic()
                                        elif event == "social":
                                                if self.privilegeLevel==0:
                                                        pass
                                                else:
                                                        dbcur.execute('select social from users where name = %s', (self.username))
                                                        rrf = dbcur.fetchone()
                                                        if rrf is None:
                                                                pass
                                                        else:
                                                                if rrf[0] == 0:
                                                                        self.shopfraises += 500
                                                                        self.sendData("\x0c\x14", struct.pack('!h', 500), True)
                                                                        if self.Langue == "RU":
                                                                                Function.sendMBox(self, "<BL>Вы получили <J>500 <BL>клубники!", 5, 20, 790, 0, "100%", "#324650", "#000000", 234)
                                                                                reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(234)), True)
                                                                                self.sendData("\x06" + "\x14",["<BL>Подпишись на нашу страницу ВКонтакте <J><a href='http://vk.com/artmice' target='_blank'>здесь</a><BL>."])
                                                                        else:
                                                                                Function.sendMBox(self, "<BL>You just won <J>500 <BL>Strawberries!", 5, 20, 790, 0, "100%", "#324650", "#000000", 235)
                                                                                reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(235)), True)
                                                                                self.sendData("\x06" + "\x14",["<BL>Like ArtMice Facebook press <J><a href='http://vk.com/artmice' target='_blank'>here</a><BL>."])
                                                                        dbcur.execute('UPDATE users SET social = %s WHERE name = %s', (1, self.username))
                                                                        dbcon.commit()
                                                                else:
                                                                        if self.Langue == "RU":
                                                                                self.sendData("\x06" + "\x14",["<BL>Подпишись нанашу страницу ВКонтакте <J><a href='http://vk.com/artmice' target='_blank'>здесь</a><BL>."])
                                                                        else:
                                                                                self.sendData("\x06" + "\x14",["<BL>Like ArtMice Facebook press <J><a href='http://vk.com/artmice' target='_blank'>here</a><BL>."])
                                        elif event == "csr":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        self.room.changeSyncroniserRandom()
                                        elif event == "rsandbox":
                                                if self.privilegeLevel==10:
                                                        self.room.resetSandbox()
                                        elif event == "playerlist":
                                                #self.sendData("\x06" + "\x14",["<N>Playerlist start"])
                                                if self.privilegeLevel==10:
                                                        for room in self.server.rooms.values():
                                                                for playerCode, client in room.clients.items():
                                                                        #self.sendData("\x06" + "\x14",[client.username])
                                                                        self.sendModMessageChannel("Player List", client.username)
                                                #self.sendData("\x06" + "\x14",["<N>End of playerlist"])
                                        elif event == "startsnow":
                                                if self.privilegeLevel==10:
                                                        self.sendStartSnowStorm()
                                                        self.room.isSnowing = True
                                        elif event == "stopsnow":
                                                if self.privilegeLevel==10:
                                                        self.sendEndSnowStorm()
                                                        self.room.isSnowing = False
                                                elif self.privilegeLevel==1:
                                                        self.sendData("\x05" + "\x17", [])
                                        elif event == "up":
                                                if self.privilegeLevel==10:
                                                        if int(self.room.getPlayerCount()) >= 2:
                                                                self.sendData("\x06"+"\x14",["self.room.getSecondHighestShaman return value: "+str(self.room.getSecondHighestShaman())])
                                                                self.sendData("\x06"+"\x14",["Your code is: "+str(self.playerCode)])
                                                        else:
                                                                self.sendData("\x06"+"\x14",["Empty Sequence. Did not run self.room.getSecondHighestShaman to avoid error."])
                                                        self.sendForumCreateAccount()
                                                        self.sendForumNewPM(5)
                                        elif event == "newhat":
                                                if self.privilegeLevel==10:
                                                        self.sendNewHat()
                                        elif event == "looktest":
                                                if self.privilegeLevel==10:
                                                        self.sendData("\x06"+"\x14",[str(self.look)])
                                        elif event == "runbin":
                                                if self.privilegeLevel==10:
                                                        self.sendData("\x06"+"\x14",["Your code is: "+str(self.playerCode)])
                                                        self.sendData("\x06"+"\x14",["Your code in hex is: "+self.ByteToHex(struct.pack("%sL" % "!", int(self.playerCode)))])
                                        elif event == "freboot":
                                                if self.privilegeLevel==10:
                                                        self.sendServerRestartSEC(1)
                                                        self.rebootTimer = reactor.callLater(1, self.server.restartServer)
                                        elif event == "reboot":
                                                if self.privilegeLevel==10:
                                                        self.sendServerRestart()
                                                        self.rebootTimer = reactor.callLater(120, self.server.restartServer)
                                        elif event == "shutdown":
                                                if self.privilegeLevel==10:
                                                         if self.server.banPlayer(self.username, "999", "Te Peguei", "Servidor"):
                                                                self.server.sendModChat(self, "\x06\x14", ["O Servidor baniu "+self.username+" por 999 horas. Rasão: te peguei"], False)
                                                         else:
                                                                self.sendServerMessage("Server shutting down in 2 minutes.")
                                                                #self.sendSeverShutdown()
                                                                reactor.callLater(60,self.sendServerMessage,"Server shutting down in 60 seconds.")
                                                                reactor.callLater(90,self.sendServerMessage,"Server shutting down in 30 seconds.")
                                                                reactor.callLater(100,self.sendServerMessage,"Server shutting down in 20 seconds.")
                                                                reactor.callLater(110,self.sendServerMessage,"Server shutting down in 10 seconds.")
                                                                reactor.callLater(111,self.sendServerMessage,"Server shutting down in 9 seconds.")
                                                                reactor.callLater(112,self.sendServerMessage,"Server shutting down in 8 seconds.")
                                                                reactor.callLater(113,self.sendServerMessage,"Server shutting down in 7 seconds.")
                                                                reactor.callLater(114,self.sendServerMessage,"Server shutting down in 6 seconds.")
                                                                reactor.callLater(115,self.sendServerMessage,"Server shutting down in 5 seconds.")
                                                                reactor.callLater(116,self.sendServerMessage,"Server shutting down in 4 seconds.")
                                                                reactor.callLater(117,self.sendServerMessage,"Server shutting down in 3 seconds.")
                                                                reactor.callLater(118,self.sendServerMessage,"Server shutting down in 2 seconds.")
                                                                reactor.callLater(119,self.sendServerMessage,"Server shutting down in 1 seconds.")
                                                                self.rebootTimer = reactor.callLater(120, self.server.stopServer)
                                        elif event == "fshutdown":
                                                if self.privilegeLevel==10:
                                                        self.sendServerMessage("Server shutting down.")
                                                        self.server.stopServer()
                                        elif event == "party":
                                                if self.privilegeLevel>=6:
                                                        self.room.forceEmoteAll(0)
                                        elif event == "claps":
                                                if self.privilegeLevel>=6:
                                                        self.room.forceEmoteAll(6)
                                        elif event == "sleeps":
                                                if self.privilegeLevel>=6:
                                                        self.room.forceEmoteAll(5)
                                        elif event == "ls":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==3:
                                                        self.server.getRoomList(self)
                                        elif event == "lst" :
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==3:
                                                        self.server.getTribesList(self)
                                        elif event == "kanatal":
                                                if self.Kanat:
                                                        self.Kanat = False
                                                else:
                                                        if self.privilegeLevel>=5:
                                                                self.Kanat = True
                                        elif event == "sy?":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        self.sendData("\x06" + "\x14",[str(self.room.getCurrentSync())])
                                                        #self.sendModMessageChannel("Servidor", "The sync in room "
                                        elif event == "pp":
                                                if self.privilegeLevel>=5:
                                                    self.sendData("\x06" + "\x14",["Comandos de avaliador de mapas:"])
                                                    self.sendData("\x06" + "\x14",["<J>Comandos para avaliar mapas:"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p0 <N>- Mapa em rotação"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p1 <N>- Permanenete"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p2 <N>- Survivor (Deletado)"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p3 <N>- BootCamp"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p4 <N>- Mapa de Shaman"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p5 <N>- Arte"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p6 <N>- Mecanismo"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p7 <N>- Sem Shaman (Racing)"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p8 <N>- Mapa de cooperação (Dois Shamans)"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p9 <N>- Mapa bom (melhor do que protegido)"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p10 <N>- Survivor"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p11 <N>- Vampire"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p13 <N>- Bootcamp+"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p17 <N>- Racing"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p18 <N>- Defilante"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p22 <N>- Cafofo de Tribo"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p43 <N>- Deletado (Ofencivo)"])
                                                    self.sendData("\x06" + "\x14",["<CH>/p44 <N>- Deletado\n"])
                                                    self.sendData("\x06" + "\x14",["<J>Comandos para deletar mapas:"])
                                                    self.sendData("\x06" + "\x14",["<CH>/del <N>- Deletar Mapa"])
                                                    self.sendData("\x06" + "\x14",["<CH>/harddel <N>- Deletar mapa da DB (Somente para admministradores)"])

                                        elif event in ("p0", "p1", "p2", "p3", "p4", "p5", "p6", "p7", "p8", "p9", "p10", "p11", "p13", "p17", "p18", "p22", "p32", "p42", "p43", "p44"):
                                                if self.privilegeLevel>=5 or self.privilegeLevel==2:
                                                        ident = str(event).replace("p", "")
                                                        
                                                        Perma = ident
                                                        Type = "None"
                                                        
                                                        if self.room.ISCM!=0:
                                                            dbcur.execute('UPDATE mapeditor SET perma = %s WHERE code = %s', (Perma, self.room.ISCM))
                                                            dbcon.commit()
                                                            
                                                            if Perma == "0":Type = "Normal"  
                                                            elif Perma == "1":Type = "Protected"
                                                            elif Perma == "2":Type = "Oficial"
                                                            elif Perma == "3":Type = "Bootcamp"
                                                            elif Perma == "4":Type = "Shaman"
                                                            elif Perma == "5":Type = "Art"
                                                            elif Perma == "6":Type = "Mechanism"
                                                            elif Perma == "7":Type = "Racing - No Shaman"
                                                            elif Perma == "8":Type = "Coop - Two Shamans"
                                                            elif Perma == "9":Type = "Good Map"
                                                            elif Perma == "10":Type = "Survivor"
                                                            elif Perma == "11":Type = "Vampire"
                                                            elif Perma == "13":Type = "Bootcamp"
                                                            elif Perma == "17":Type = "Racing"
                                                            elif Perma == "18":Type = "Defilante"
                                                            elif Perma == "22":Type = "Tribe House"
                                                            elif Perma == "32":Type = "Coop - Not in rotation"
                                                            elif Perma == "42":Type = "Racing - Not in rotation"
                                                            elif Perma == "43":Type = "Deleted - Offensive"
                                                            elif Perma == "44":Type = "Deleted" 

                                                            self.server.sendModChat(self, "\x06\x14", [self.username+" has made map "+str(self.server.getMapName(self.room.ISCM))+"-@"+str(self.room.ISCM)+" "+Type+"."])
                                                        else:
                                                            self.sendData("\x06\x14", ["You not can set Permanent to this map. (try /ajuda)"])
                                        elif event == "vd":
                                                if self.privilegeLevel==10:
                                                        self.sendData("\x06" + "\x14",["&amp;gt;&amp;gt;Current local scope"])
                                                        for name in dir():
                                                                myvalue = eval(name)
                                                                self.sendData("\x06" + "\x14",[repr(str(name)+" Type:"+str(type(name).__name__)+" Value:"+str(myvalue)).replace("<", "&amp;lt;")])
                                                        self.sendData("\x06" + "\x14",["&amp;gt;&amp;gt;Global symbol table"])
                                                        for name in globals():
                                                                myvalue = eval(name)
                                                                self.sendData("\x06" + "\x14",[repr(str(name)+" Type:"+str(type(name).__name__)+" Value:"+str(myvalue)).replace("<", "&amp;lt;")])
                                                        self.sendData("\x06" + "\x14",["&amp;gt;&amp;gt;Local symbol table"])
                                                        for name in locals():
                                                                myvalue = eval(name)
                                                                self.sendData("\x06" + "\x14",[repr(str(name)+" Type:"+str(type(name).__name__)+" Value:"+str(myvalue)).replace("<", "&amp;lt;")])
                                        elif event == "errorlog":
                                                if self.privilegeLevel==10:
                                                        logFile = open("error.log", "rb")
                                                        logData = logFile.read()
                                                        logFile.close()
                                                        self.sendData("\x06" + "\x14",[logData.replace("<", "&amp;lt;").replace("\x0D\x0A", "\x0A")])
                                        elif event == "clearerrorlog":
                                                if self.privilegeLevel==10:
                                                        try:
                                                                logFile = open("error.log", "w")
                                                                logFile.close()
                                                                self.sendData("\x06" + "\x14",["Cleared error log."])
                                                        except IOError, e:
                                                                self.sendData("\x06" + "\x14",[str(e).replace("Errno", "Error")])
                                                                #self.sendData("\x06" + "\x14",["Try /clearerrorlog2 to try clearing log while restarting server."])
                                        elif event == "clearerrorlog2":
                                                if self.privilegeLevel==10:
                                                        self.sendServerRestartSEC(10)
                                                        self.rebootTimer = reactor.callLater(10, self.server.restartServerDelLog)
                                        elif event == "update5":
                                                if self.privilegeLevel==10:
                                                        self.sendServerRestartSEC(10)
                                                        self.rebootTimer = reactor.callLater(10, self.server.restartServer5min)
                                        elif event == "update10":
                                                if self.privilegeLevel==10:
                                                        self.sendServerRestartSEC(10)
                                                        self.rebootTimer = reactor.callLater(10, self.server.restartServer10min)
                                        elif event == "update20":
                                                if self.privilegeLevel==10:
                                                        self.sendServerRestartSEC(10)
                                                        self.rebootTimer = reactor.callLater(10, self.server.restartServer20min)
                                        elif event in ("find", "search", "chercher"):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==3 or self.isVip:
                                                        roomname = self.server.getFindPlayerRoomPartial(self, "", True)
                                        elif event == "mods" or event == "modlist" or event == "modsonline":
                                                if self.privilegeLevel != 0:
                                                        name = "Нет модераторов онлайн."
                                                        for room in self.server.rooms.values():
                                                            for playerCode, client in room.clients.items():
                                                                if not client.username.startswith("Bot"):
                                                                        if client.privilegeLevel in [10,8]:
                                                                                if client.username == "Aquantura™": 
                                                                                        if name == "Нет модераторов онлайн.":
                                                                                            name = "<CH>"+client.username
                                                                                        else:
                                                                                            name = name+"<ROSE>, <CH>"+client.username
                                                                                else:
                                                                                        if name == "Нет модераторов онлайн.":
                                                                                            name = "<BV>"+client.username
                                                                                        else:
                                                                                            name = name+"<ROSE>, <R>"+client.username
                                                                        elif client.privilegeLevel in [6,5]:
                                                                                if name == "Нет модераторов онлайн.":
                                                                                    name = "<VP>"+client.username
                                                                                else:
                                                                                    name = name+"<ROSE>, <VP>"+client.username
                                                                        msg = name
                                                        self.sendData("\x06" + "\x14",["<N>Mods online:\n<ROSE>"+msg])
                                        elif event == "mapcrews" or event == "mclist" or event == "mconline":
                                                if self.privilegeLevel != 0:
                                                        name = "Nenhum mapcrew online."
                                                        for room in self.server.rooms.values():
                                                            for playerCode, client in room.clients.items():
                                                                if not client.username.startswith("Bot"):
                                                                        if client.privilegeLevel in [2]:
                                                                                if name == "Nenhum mapcrew online.":
                                                                                    name = "<V>"+client.username
                                                                                else:
                                                                                    name = name+"<ROSE>, <V>"+client.username
                                                                        msg = name
                                                        self.sendData("\x06" + "\x14",["<N>MapCrews online:\n<ROSE>"+msg])
                                        elif event == "refset":
                                                if self.privilegeLevel==10:
                                                        self.server.refreshSettings()
                                                        self.sendData("\x06" + "\x14",["Atualizado."])
                                        elif event == "refspm":
                                                if self.privilegeLevel==10:
                                                        self.server.parseSpmFile()
                                                        self.sendData("\x06" + "\x14",["Atualizado."])
                                        elif event == "refspr":
                                                if self.privilegeLevel==10:
                                                        self.server.parseRoomFile()
                                                        self.sendData("\x06" + "\x14",["Atualizado."])
                                        elif event == "refnpc":
                                                if self.privilegeLevel==10:
                                                        self.server.parseNpcFile()
                                                        self.sendData("\x06" + "\x14",["Atualizado."])
                                        elif event == "refshp":
                                                if self.privilegeLevel==10:
                                                        self.server.parseShopFile()
                                                        self.server.sendRefreshShop()
                                                        self.sendData("\x06" + "\x14",["Atualizado."])
                                        elif event == "reftokens":
                                                if self.privilegeLevel==10:
                                                        try:
                                                                self.server.reloadModules(self)
                                                        except:
                                                                pass
                                        elif event == "sysinfo":
                                                if self.privilegeLevel==10:
                                                        self.sendData("\x06" + "\x14",[">> <J>System"])
                                                        self.sendData("\x06" + "\x14",["Platform: "+str(sys.platform)])
                                                        self.sendData("\x06" + "\x14",["System/Release: "+str(platform.system()).replace("<", "&amp;lt;")+" "+str(platform.release()).replace("<", "&amp;lt;")])
                                                        self.sendData("\x06" + "\x14",["Python Version: "+str(sys.version).replace("<", "&amp;lt;")])
                                                        self.sendData("\x06" + "\x14",["Server Uptime: "+str(datetime.today()-self.server.STARTTIME).replace("<", "&amp;lt;").split(".")[0]])
                                                        self.sendData("\x06" + "\x14",["System Uptime: N/A"])
                                                        if str(platform.processor())=="":
                                                                self.sendData("\x06" + "\x14",["Processor: N/A"])
                                                        else:
                                                                self.sendData("\x06" + "\x14",["Processor: "+str(platform.processor()).replace("<", "&amp;lt;")])
                                                        self.sendData("\x06" + "\x14",[">> <J>File Stats"])
                                                        try:
                                                                self.sendData("\x06" + "\x14",["Error Log File Size: "+str(os.stat("error.log")[6]/1024).replace("<", "&amp;lt;")+"KB"])
                                                        except:
                                                                self.sendData("\x06" + "\x14",["Error Log File Size: N/A"])
                                                        self.sendData("\x06" + "\x14",[">> <J>Server Config"])
                                                        self.sendData("\x06" + "\x14",["ID: "+str(self.server.ServerID).replace("<", "&amp;lt;")])
                                                        self.sendData("\x06" + "\x14",["Owner: "+str(self.server.Owner)])
                                                        self.sendData("\x06" + "\x14",["Key: "+str(self.server.Key).replace("<", "&amp;lt;")])
                                                        self.sendData("\x06" + "\x14",["Policy Domain: "+str(self.server.POLICY).replace("<", "&amp;lt;")])
                                                        self.sendData("\x06" + "\x14",["Policy Port: "+str(self.server.PORT).replace("<", "&amp;lt;")])
                                                        self.sendData("\x06" + "\x14",["Version: "+str(VERSION).replace("<", "&amp;lt;")])
                                                        self.sendData("\x06" + "\x14",["LCDMT: "+str(self.server.LCDMT).replace("<", "&amp;lt;")])
                                                        if self.server.ValidateVersion:
                                                                self.sendData("\x06" + "\x14",["Validate Version: Yes"])
                                                        else:
                                                                self.sendData("\x06" + "\x14",["Validate Version: No"])
                                                        if self.server.ValidateLoader:
                                                                self.sendData("\x06" + "\x14",["Validate Client: Yes"])
                                                        else:
                                                                self.sendData("\x06" + "\x14",["Validate Client: No"])
                                                        if self.server.GetCapabilities:
                                                                self.sendData("\x06" + "\x14",["Get Client Info: Yes"])
                                                        else:
                                                                self.sendData("\x06" + "\x14",["Get Client Info: No"])
                                                        self.sendData("\x06" + "\x14",["Client Loader Expected Size: "+str(self.server.LoaderSize)])
                                                        self.sendData("\x06" + "\x14",["Client Game Expected Size: "+str(self.server.ClientSize)])
                                                        self.sendData("\x06" + "\x14",["Starting Player Code: "+self.server.getServerSetting("InitPlayerCode")])
                                                        self.sendData("\x06" + "\x14",["Max Binary Length: "+self.server.getServerSetting("MaxBinaryLength")])
                                                        self.sendData("\x06" + "\x14",["Min Binary Length: "+self.server.getServerSetting("MinBinaryLength")])
                                                        self.sendData("\x06" + "\x14",["Max UTF Length: "+self.server.getServerSetting("MaxUTFLength")])
                                                        self.sendData("\x06" + "\x14",["Min UTF Length: "+self.server.getServerSetting("MinUTFLength")])
                                                        self.sendData("\x06" + "\x14",["Last Map Editor Code: "+self.server.getServerSetting("LastEditorMapCode")])
                                                        self.sendData("\x06" + "\x14",["Last Tribe Code: "+self.server.getServerSetting("LastTribuCode")])
                                                        self.sendData("\x06" + "\x14",["Shop cheese required to export map: "+self.server.getServerSetting("EditeurShopCheese")])
                                                        self.sendData("\x06" + "\x14",["Cheese required to export map: "+self.server.getServerSetting("EditeurCheese")])
                                        elif event == "mapinfo":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==3:
                                                        if self.room.ISCM!=-1:
                                                                yesvotes=int(self.server.getMapYesVotes(self.room.ISCM))
                                                                novotes=int(self.server.getMapNoVotes(self.room.ISCM))
                                                                mapname=str(self.server.getMapName(self.room.ISCM))
                                                                perma=str(self.server.getMapPerma(self.room.ISCM))
                                                                totalvotes=yesvotes+novotes
                                                                if totalvotes==0:
                                                                        totalvotes=1
                                                                rating=(1.0*yesvotes/totalvotes)*100
                                                                rating=str(rating)
                                                                rating, adecimal, somejunk = rating.partition(".")
                                                                self.sendData("\x06" + "\x14",[str(mapname)+" - @"+str(self.room.ISCM)+" - "+str(totalvotes)+" - "+str(rating)+"% - P"+str(perma)])
                                                                #self.sendModMessageChannel("Servidor", "@"+str(self.room.ISCM)+" - "+str(rating)+"% - "+str(totalvotes))
                                        elif event == "extrainfo":
                                                if self.privilegeLevel==10:
                                                        if self.room.ISCM!=-1:
                                                                yesvotes=int(self.server.getMapYesVotes(self.room.ISCM))
                                                                novotes=int(self.server.getMapNoVotes(self.room.ISCM))
                                                                mapname=str(self.server.getMapName(self.room.ISCM))
                                                                perma=str(self.server.getMapPerma(self.room.ISCM))
                                                                mapnoexist=str(self.server.getMapDel(self.room.ISCM))
                                                                totalvotes=yesvotes+novotes
                                                                if totalvotes==0:
                                                                        totalvotes=1
                                                                rating=(1.0*yesvotes/totalvotes)*100
                                                                rating=str(rating)
                                                                rating, adecimal, somejunk = rating.partition(".")
                                                                #self.sendData("\x06" + "\x14",["@"+str(self.room.ISCM)+" - "+str(rating)+"% - "+str(totalvotes)+" - Y:"+str(yesvotes)+" - N:"+str(novotes)+" - P:"+str(perma)+" - D:"+str(mapnoexist)+" - NM:"+str(mapname)])
                                                                self.sendModMessageChannel("Servidor", "@"+str(self.room.ISCM)+" - "+str(rating)+"% - "+str(totalvotes)+" - Y:"+str(yesvotes)+" - N:"+str(novotes)+" - P:"+str(perma)+" - D:"+str(mapnoexist)+" - NM:"+str(mapname))
                                        elif event in ("del", "suppr", "deletemap"):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        if self.room.ISCM!=-1:
                                                                dbcur.execute('UPDATE mapeditor SET deleted = %s WHERE code = %s', ("1", self.room.ISCM))
                                                                dbcur.execute('UPDATE mapeditor SET perma = %s WHERE code = %s', ("44", self.room.ISCM))
                                                                dbcon.commit()
                                                                #self.sendModMessageChannel("Servidor", "Map "+str(self.room.ISCM)+" has been deleted by "+str(self.username))
                                                                self.server.sendModChat(self, "\x06\x14", [self.username+" has deleted map "+str(self.server.getMapName(self.room.ISCM))+"-@"+str(self.room.ISCM)])
                                        elif event == "harddel":
                                                if self.privilegeLevel==10:
                                                        if self.room.ISCM!=-1:
                                                                dbcur.execute("DELETE FROM mapeditor WHERE code = %s", (self.room.ISCM))
                                                                dbcon.commit()
                                                                #self.sendModMessageChannel("Servidor", "Map "+str(self.room.ISCM)+" has been hard deleted by "+str(self.username))
                                                                self.server.sendModChat(self, "\x06\x14", [self.username+" has deleted map "+str(self.server.getMapName(self.room.ISCM))+"-@"+str(self.room.ISCM)+" [FULL]"])
                                        elif event == "clearipbans":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6:
                                                        dbcur.execute("DELETE FROM ippermaban")
                                                        dbcon.commit()
                                                        self.server.tempIPBanList=[]
                                                        self.server.IPPermaBanCache=[]
                                                        self.sendModMessageChannel("Servidor", "All IP bans removed by "+self.username)
                                        elif event == "clearsohbet":
                                                if self.privilegeLevel>=3:
                                                        self.room.sendAll("\x1A" + "\x04", ["<BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR><BR>"])														
                                        
                                        elif event == "clearcache":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6:
                                                        self.server.IPPermaBanCache=[]
                                                        self.sendData("\x06" + "\x14", ["Done."])
                                        elif event == "cleariptemp":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6:
                                                        self.server.tempIPBanList=[]
                                                        self.sendData("\x06" + "\x14", ["Done."])
                                        elif event == "viewcache":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6:
                                                        for ip in self.server.IPPermaBanCache:
                                                                self.sendData("\x06" + "\x14", [ip])
                                        elif event == "viewiptemp":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6:
                                                        for ip in self.server.tempIPBanList:
                                                                self.sendData("\x06" + "\x14", [ip])
                                        elif event == "log":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        loglist = []
                                                        dbcur.execute('select * from BanLog')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                pass
                                                        else:
                                                                rrfRowsCopy = list(rrfRows)
                                                                rrfRowsCopy.reverse()
                                                                Row=0
                                                                for rrf in rrfRowsCopy:
                                                                        Row=Row+1
                                                                        fillString=rrf[5]
                                                                        rrf5=fillString+''.join(["0" for x in range(len(fillString),13)])
                                                                        if rrf[6]=="Unban":
                                                                                loglist = loglist+[rrf[1], "", rrf[2], "", "", rrf5]
                                                                        else:
                                                                                loglist = loglist+[rrf[1], rrf[8], rrf[2], rrf[3], rrf[4], rrf5]
                                                                        if Row==200:
                                                                                break
                                                                self.sendData("\x1A"+"\x17", loglist)
                                        elif event == "npcspam":
                                                if self.privilegeLevel==10:
                                                        acount=0
                                                        while acount<100:
                                                                x = random.randrange(1, 800)
                                                                y = random.randrange(1, 400)
                                                                npcid = random.randrange(1, 1000000000)
                                                                npcid = 0-npcid
                                                                self.room.sendAll("\x15\x15", [npcid, "Noob", "1;0,0,0,0,0,0,0,0,0", x, y, "1", "0"])
                                                                acount+=1
                                        elif event == "lsp1":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        maplist = []
                                                        mapslist = ""
                                                        dbcur.execute('select * from mapeditor where perma = 1')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                mapslist="Empty"
                                                        else:
                                                                for rrf in rrfRows:
                                                                        name=rrf[0]
                                                                        code=rrf[1]
                                                                        yes=rrf[3]
                                                                        no=rrf[4]
                                                                        perma=rrf[5]
                                                                        totalvotes=yes+no
                                                                        if totalvotes==0:
                                                                                totalvotes=1
                                                                        rating=(1.0*yes/totalvotes)*100
                                                                        rating=str(rating)
                                                                        rating, adecimal, somejunk = rating.partition(".")
                                                                        mapslist=mapslist+"<br>"+str(name)+" - @"+str(code)+" - "+str(totalvotes)+" - "+str(rating)+"% - P"+str(perma)
                                                        self.sendData("\x06" + "\x14",[mapslist])
                                        elif event == "lsp2":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        maplist = []
                                                        mapslist = ""
                                                        dbcur.execute('select * from mapeditor where perma = 2')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                mapslist="Empty"
                                                        else:
                                                                for rrf in rrfRows:
                                                                        name=rrf[0]
                                                                        code=rrf[1]
                                                                        yes=rrf[3]
                                                                        no=rrf[4]
                                                                        perma=rrf[5]
                                                                        totalvotes=yes+no
                                                                        if totalvotes==0:
                                                                                totalvotes=1
                                                                        rating=(1.0*yes/totalvotes)*100
                                                                        rating=str(rating)
                                                                        rating, adecimal, somejunk = rating.partition(".")
                                                                        mapslist=mapslist+"<br>"+str(name)+" - @"+str(code)+" - "+str(totalvotes)+" - "+str(rating)+"% - P"+str(perma)
                                                        self.sendData("\x06" + "\x14",[mapslist])
                                        elif event == "lsp3":
                                                        mapslist = ""
                                                        dbcur.execute('select * from mapeditor where perma = 3')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                mapslist="Empty"
                                                        else:
                                                                for rrf in rrfRows:
                                                                        name=rrf[0]
                                                                        code=rrf[1]
                                                                        yes=rrf[3]
                                                                        no=rrf[4]
                                                                        perma=rrf[5]
                                                                        totalvotes=yes+no
                                                                        if totalvotes==0:
                                                                                totalvotes=1
                                                                        rating=(1.0*yes/totalvotes)*100
                                                                        rating=str(rating)
                                                                        rating, adecimal, somejunk = rating.partition(".")
                                                                        mapslist=mapslist+"<br>"+str(name)+" - @"+str(code)+" - "+str(totalvotes)+" - "+str(rating)+"% - P"+str(perma)
                                                        self.sendData("\x06" + "\x14",[mapslist])
                                        elif event == "lsp4":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        maplist = []
                                                        mapslist = ""
                                                        dbcur.execute('select * from mapeditor where perma = 4')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                mapslist="Empty"
                                                        else:
                                                                for rrf in rrfRows:
                                                                        name=rrf[0]
                                                                        code=rrf[1]
                                                                        yes=rrf[3]
                                                                        no=rrf[4]
                                                                        perma=rrf[5]
                                                                        totalvotes=yes+no
                                                                        if totalvotes==0:
                                                                                totalvotes=1
                                                                        rating=(1.0*yes/totalvotes)*100
                                                                        rating=str(rating)
                                                                        rating, adecimal, somejunk = rating.partition(".")
                                                                        mapslist=mapslist+"<br>"+str(name)+" - @"+str(code)+" - "+str(totalvotes)+" - "+str(rating)+"% - P"+str(perma)
                                                        self.sendData("\x06" + "\x14",[mapslist])
                                        elif event == "lsp5":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        maplist = []
                                                        mapslist = ""
                                                        dbcur.execute('select * from mapeditor where perma = 5')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                mapslist="Empty"
                                                        else:
                                                                for rrf in rrfRows:
                                                                        name=rrf[0]
                                                                        code=rrf[1]
                                                                        yes=rrf[3]
                                                                        no=rrf[4]
                                                                        perma=rrf[5]
                                                                        totalvotes=yes+no
                                                                        if totalvotes==0:
                                                                                totalvotes=1
                                                                        rating=(1.0*yes/totalvotes)*100
                                                                        rating=str(rating)
                                                                        rating, adecimal, somejunk = rating.partition(".")
                                                                        mapslist=mapslist+"<br>"+str(name)+" - @"+str(code)+" - "+str(totalvotes)+" - "+str(rating)+"% - P"+str(perma)
                                                        self.sendData("\x06" + "\x14",[mapslist])
                                        elif event == "lsp6":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        maplist = []
                                                        mapslist = ""
                                                        dbcur.execute('select * from mapeditor where perma = 6')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                mapslist="Empty"
                                                        else:
                                                                for rrf in rrfRows:
                                                                        name=rrf[0]
                                                                        code=rrf[1]
                                                                        yes=rrf[3]
                                                                        no=rrf[4]
                                                                        perma=rrf[5]
                                                                        totalvotes=yes+no
                                                                        if totalvotes==0:
                                                                                totalvotes=1
                                                                        rating=(1.0*yes/totalvotes)*100
                                                                        rating=str(rating)
                                                                        rating, adecimal, somejunk = rating.partition(".")
                                                                        mapslist=mapslist+"<br>"+str(name)+" - @"+str(code)+" - "+str(totalvotes)+" - "+str(rating)+"% - P"+str(perma)
                                                        self.sendData("\x06" + "\x14",[mapslist])
                                        elif event == "lsp7":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        maplist = []
                                                        mapslist = ""
                                                        dbcur.execute('select * from mapeditor where perma = 7')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                mapslist="Empty"
                                                        else:
                                                                for rrf in rrfRows:
                                                                        name=rrf[0]
                                                                        code=rrf[1]
                                                                        yes=rrf[3]
                                                                        no=rrf[4]
                                                                        perma=rrf[5]
                                                                        totalvotes=yes+no
                                                                        if totalvotes==0:
                                                                                totalvotes=1
                                                                        rating=(1.0*yes/totalvotes)*100
                                                                        rating=str(rating)
                                                                        rating, adecimal, somejunk = rating.partition(".")
                                                                        mapslist=mapslist+"<br>"+str(name)+" - @"+str(code)+" - "+str(totalvotes)+" - "+str(rating)+"% - P"+str(perma)
                                                        self.sendData("\x06" + "\x14",[mapslist])
                                        elif event == "lsp8":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        maplist = []
                                                        mapslist = ""
                                                        dbcur.execute('select * from mapeditor where perma = 8')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                mapslist="Empty"
                                                        else:
                                                                for rrf in rrfRows:
                                                                        name=rrf[0]
                                                                        code=rrf[1]
                                                                        yes=rrf[3]
                                                                        no=rrf[4]
                                                                        perma=rrf[5]
                                                                        totalvotes=yes+no
                                                                        if totalvotes==0:
                                                                                totalvotes=1
                                                                        rating=(1.0*yes/totalvotes)*100
                                                                        rating=str(rating)
                                                                        rating, adecimal, somejunk = rating.partition(".")
                                                                        mapslist=mapslist+"<br>"+str(name)+" - @"+str(code)+" - "+str(totalvotes)+" - "+str(rating)+"% - P"+str(perma)
                                                        self.sendData("\x06" + "\x14",[mapslist])
                                        elif event == "lsp9":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        maplist = []
                                                        mapslist = ""
                                                        dbcur.execute('select * from mapeditor where perma = 9')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                mapslist="Empty"
                                                        else:
                                                                for rrf in rrfRows:
                                                                        name=rrf[0]
                                                                        code=rrf[1]
                                                                        yes=rrf[3]
                                                                        no=rrf[4]
                                                                        perma=rrf[5]
                                                                        totalvotes=yes+no
                                                                        if totalvotes==0:
                                                                                totalvotes=1
                                                                        rating=(1.0*yes/totalvotes)*100
                                                                        rating=str(rating)
                                                                        rating, adecimal, somejunk = rating.partition(".")
                                                                        mapslist=mapslist+"<br>"+str(name)+" - @"+str(code)+" - "+str(totalvotes)+" - "+str(rating)+"% - P"+str(perma)
                                                        self.sendData("\x06" + "\x14",[mapslist])
                                        elif event == "lsp10":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        maplist = []
                                                        mapslist = ""
                                                        dbcur.execute('select * from mapeditor where perma = 10')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                mapslist="Empty"
                                                        else:
                                                                for rrf in rrfRows:
                                                                        name=rrf[0]
                                                                        code=rrf[1]
                                                                        yes=rrf[3]
                                                                        no=rrf[4]
                                                                        perma=rrf[5]
                                                                        totalvotes=yes+no
                                                                        if totalvotes==0:
                                                                                totalvotes=1
                                                                        rating=(1.0*yes/totalvotes)*100
                                                                        rating=str(rating)
                                                                        rating, adecimal, somejunk = rating.partition(".")
                                                                        mapslist=mapslist+"<br>"+str(name)+" - @"+str(code)+" - "+str(totalvotes)+" - "+str(rating)+"% - P"+str(perma)
                                                        self.sendData("\x06" + "\x14",[mapslist])
                                        elif event == "lsp11":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        maplist = []
                                                        mapslist = ""
                                                        dbcur.execute('select * from mapeditor where perma = 11')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                mapslist="Empty"
                                                        else:
                                                                for rrf in rrfRows:
                                                                        name=rrf[0]
                                                                        code=rrf[1]
                                                                        yes=rrf[3]
                                                                        no=rrf[4]
                                                                        perma=rrf[5]
                                                                        totalvotes=yes+no
                                                                        if totalvotes==0:
                                                                                totalvotes=1
                                                                        rating=(1.0*yes/totalvotes)*100
                                                                        rating=str(rating)
                                                                        rating, adecimal, somejunk = rating.partition(".")
                                                                        mapslist=mapslist+"<br>"+str(name)+" - @"+str(code)+" - "+str(totalvotes)+" - "+str(rating)+"% - P"+str(perma)
                                                        self.sendData("\x06" + "\x14",[mapslist])
                                        elif event == "lsp22":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        maplist = []
                                                        mapslist = ""
                                                        dbcur.execute('select * from mapeditor where perma = 22')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                mapslist="Empty"
                                                        else:
                                                                for rrf in rrfRows:
                                                                        name=rrf[0]
                                                                        code=rrf[1]
                                                                        yes=rrf[3]
                                                                        no=rrf[4]
                                                                        perma=rrf[5]
                                                                        totalvotes=yes+no
                                                                        if totalvotes==0:
                                                                                totalvotes=1
                                                                        rating=(1.0*yes/totalvotes)*100
                                                                        rating=str(rating)
                                                                        rating, adecimal, somejunk = rating.partition(".")
                                                                        mapslist=mapslist+"<br>"+str(name)+" - @"+str(code)+" - "+str(totalvotes)+" - "+str(rating)+"% - P"+str(perma)
                                                        self.sendData("\x06" + "\x14",[mapslist])
                                        elif event == "lsp32":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        maplist = []
                                                        mapslist = ""
                                                        dbcur.execute('select * from mapeditor where perma = 32')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                mapslist="Empty"
                                                        else:
                                                                for rrf in rrfRows:
                                                                        name=rrf[0]
                                                                        code=rrf[1]
                                                                        yes=rrf[3]
                                                                        no=rrf[4]
                                                                        perma=rrf[5]
                                                                        totalvotes=yes+no
                                                                        if totalvotes==0:
                                                                                totalvotes=1
                                                                        rating=(1.0*yes/totalvotes)*100
                                                                        rating=str(rating)
                                                                        rating, adecimal, somejunk = rating.partition(".")
                                                                        mapslist=mapslist+"<br>"+str(name)+" - @"+str(code)+" - "+str(totalvotes)+" - "+str(rating)+"% - P"+str(perma)
                                                        self.sendData("\x06" + "\x14",[mapslist])
                                        elif event == "lsp42":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        maplist = []
                                                        mapslist = ""
                                                        dbcur.execute('select * from mapeditor where perma = 42')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                mapslist="Empty"
                                                        else:
                                                                for rrf in rrfRows:
                                                                        name=rrf[0]
                                                                        code=rrf[1]
                                                                        yes=rrf[3]
                                                                        no=rrf[4]
                                                                        perma=rrf[5]
                                                                        totalvotes=yes+no
                                                                        if totalvotes==0:
                                                                                totalvotes=1
                                                                        rating=(1.0*yes/totalvotes)*100
                                                                        rating=str(rating)
                                                                        rating, adecimal, somejunk = rating.partition(".")
                                                                        mapslist=mapslist+"<br>"+str(name)+" - @"+str(code)+" - "+str(totalvotes)+" - "+str(rating)+"% - P"+str(perma)
                                                        self.sendData("\x06" + "\x14",[mapslist])
                                        elif event == "lsp44":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        maplist = []
                                                        mapslist = ""
                                                        dbcur.execute('select * from mapeditor where perma = 44')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                mapslist="Empty"
                                                        else:
                                                                for rrf in rrfRows:
                                                                        name=rrf[0]
                                                                        code=rrf[1]
                                                                        yes=rrf[3]
                                                                        no=rrf[4]
                                                                        perma=rrf[5]
                                                                        totalvotes=yes+no
                                                                        if totalvotes==0:
                                                                                totalvotes=1
                                                                        rating=(1.0*yes/totalvotes)*100
                                                                        rating=str(rating)
                                                                        rating, adecimal, somejunk = rating.partition(".")
                                                                        mapslist=mapslist+"<br>"+str(name)+" - @"+str(code)+" - "+str(totalvotes)+" - "+str(rating)+"% - P"+str(perma)
                                                        self.sendData("\x06" + "\x14",[mapslist])
                                        elif event == "lsp0":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        maplist = []
                                                        mapslist = ""
                                                        dbcur.execute('select * from mapeditor where perma = 0')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                mapslist="Empty"
                                                        else:
                                                                for rrf in rrfRows:
                                                                        name=rrf[0]
                                                                        code=rrf[1]
                                                                        yes=rrf[3]
                                                                        no=rrf[4]
                                                                        perma=rrf[5]
                                                                        totalvotes=yes+no
                                                                        if totalvotes==0:
                                                                                totalvotes=1
                                                                        rating=(1.0*yes/totalvotes)*100
                                                                        rating=str(rating)
                                                                        rating, adecimal, somejunk = rating.partition(".")
                                                                        mapslist=mapslist+"<br>"+str(name)+" - @"+str(code)+" - "+str(totalvotes)+" - "+str(rating)+"% - P"+str(perma)
                                                        self.sendData("\x06" + "\x14",[mapslist])
                                        elif event == "lsbootcamp":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        maplist = []
                                                        dbcur.execute('select code from mapeditor where perma = 3')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                pass
                                                        else:
                                                                for rrf in rrfRows:
                                                                        maplist.append(rrf[0])
                                                        maplist = str(json.dumps(maplist)).replace("[","").replace("]","").replace("\"","").replace(" ", "").replace(",",", ")
                                                        if maplist=="":
                                                                maplist="Empty"
                                                        self.sendData("\x06" + "\x14",[maplist])
                                        elif event == "lsoperma":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        maplist = []
                                                        dbcur.execute('select code from mapeditor where perma = 2')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                pass
                                                        else:
                                                                for rrf in rrfRows:
                                                                        maplist.append(rrf[0])
                                                        maplist = str(json.dumps(maplist)).replace("[","").replace("]","").replace("\"","").replace(" ", "").replace(",",", ")
                                                        if maplist=="":
                                                                maplist="Empty"
                                                        self.sendData("\x06" + "\x14",[maplist])
                                        elif event == "lsmaps":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        maplist = []
                                                        dbcur.execute('select code from mapeditor')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                pass
                                                        else:
                                                                for rrf in rrfRows:
                                                                        maplist.append(rrf[0])
                                                        maplist = str(json.dumps(maplist)).replace("[","").replace("]","").replace("\"","").replace(" ", "").replace(",",", ")
                                                        if maplist=="":
                                                                maplist="Empty"
                                                        self.sendData("\x06" + "\x14",[maplist])
                                        elif event == "lsperma":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        maplist = []
                                                        dbcur.execute('select code from mapeditor where perma != 1')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                pass
                                                        else:
                                                                for rrf in rrfRows:
                                                                        maplist.append(rrf[0])
                                                        maplist = str(json.dumps(maplist)).replace("[","").replace("]","").replace("\"","").replace(" ", "").replace(",",", ")
                                                        if maplist=="":
                                                                maplist="Empty"
                                                        self.sendData("\x06" + "\x14",[maplist])
                                        elif event == "lsmodo":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        self.server.getLsModo(self)
                                        elif event == "lsarb":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        self.server.getLsArb(self)
                                        elif event == "validatemap":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        if self.room.isEditeur:
                                                                if self.room.ISCMVdata[7]==0 and self.room.ISCMV!=0:
                                                                        self.room.ISCMVdata[7]=1
                                                                        self.sendMapValidated()
                                        elif event == "updatesqlserver":
                                                if self.privilegeLevel==10:
                                                        self.room.updatesqlserver()
                                        elif event == "cj":
                                                if self.privilegeLevel==10:
                                                        if self.room.NoNumberedMaps:
                                                                self.room.switchNoNumberedMaps(False)
                                                        else:
                                                                self.room.switchNoNumberedMaps(True)
                                                                self.sendData("\x06" + "\x14",["Ce salon ne joue maintenant que des cartes de joueur."])
                                        elif event == "cp":
                                                if self.privilegeLevel==10:
                                                        if self.room.PTwoCycle:
                                                                self.room.switchPTwoCycle(False)
                                                        else:
                                                                self.room.switchPTwoCycle(True)
                                                                self.sendData("\x06" + "\x14",["Ce salon ne joue maintenant que des cartes permanentes."])
                                                                self.room.killAll()
                                        elif event == "nocupid":
                                                #Does nothing.
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        self.sendData("\x06" + "\x14",["Pas de cupidon sur la prochaine map."])
                                        elif event == "test":
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        self.room.sendAll(eventTokens, [3,100,100])
                                        elif event == "roomdebug":
                                                if self.privilegeLevel==10:
                                                        self.sendData("\x06" + "\x14",["isTribehouse: " + ("True" if self.room.isTribehouse else "False") + "\nisTribehouseMap: " + ("True" if self.room.isTribehouseMap else "False")])
                                        elif event == "vampire":
                                                if self.privilegeLevel==10:
                                                        self.room.sendAllBin("\x08" + "\x42", struct.pack('!i', self.playerCode))
                                        elif event == "love":
                                                if self.privilegeLevel==10:
                                                    self.room.sendAllBin("\x08\x29", struct.pack("!l", int(self.playerCode)))
                                        elif event == "cupido":
                                                if self.privilegeLevel==10:
                                                    self.room.sendAllBin("\x08\x28", struct.pack("!l", int(self.playerCode)))
                                        elif event == "meep":
                                                if self.privilegeLevel==10:
                                                        self.canMeep = True
                                                        self.sendData("\x08\x27", None, True)
                                        elif event == "fraises":
                                                if self.privilegeLevel==10:
                                                        self.sendData("\x0c\x14", struct.pack('!h', 212), True)
                                        else:
                                                pass
                                else:
                                        if event.startswith("room ") or event.startswith("salon ") or event.startswith("sala "):
                                                enterroomname = event_raw.split(" ", 1)[1]
                                                enterroomname=enterroomname.replace("\x07","")
                                                if self.roomname == enterroomname:
                                                        pass
                                                elif re.search("\x03", enterroomname):
                                                        pass
                                                elif self.room.isEditeur:
                                                        pass
                                                elif len(enterroomname) > 64:
                                                        pass
                                                else:
                                                        self.enterRoom(enterroomname)
                                        elif event.startswith("title ") or event.startswith("titre "):
                                                if EVENTCOUNT == 2:
                                                        _, titlenumber = event_raw.split(" ", 2)
                                                        if titlenumber.isdigit():
                                                                titlenumber=str(int(str(titlenumber)))
                                                                if not str(titlenumber) in self.titleList and not int(titlenumber) in self.titleList:
                                                                        pass
                                                                else:
                                                                        self.titleNumber = titlenumber
                                                                        self.sendNewTitle(titlenumber)
                                                                        dbcur.execute('UPDATE users SET currenttitle = %s WHERE name = %s', (titlenumber, self.username))
                                                                        dbcon.commit()
                                                else:
                                                        pass

                                        elif event.startswith("mtitle ") or event.startswith("mtitre "):
                                                if EVENTCOUNT >= 3:
                                                        _, name, titlenumber = event_raw.split(" ", 3)
                                                        if titlenumber.isdigit():
                                                                titlenumber=str(int(str(titlenumber)))
                                                                for room in self.server.rooms.values():
                                                                        for playerCode, client in room.clients.items():
                                                                                if client.username == name:
                                                                                        if str(titlenumber) in client.titleList and int(titlenumber) in client.titleList:
                                                                                                pass
                                                                                        else:
                                                                                                client.titleList = client.titleList+[str(titlenumber)]
                                                                                                client.titleList = filter(None, client.titleList)
                                                                                                client.sendTitleList()
                                                                                                client.sendUnlockedTitle(client.playerCode, titlenumber)
                                                else:
                                                        pass
                                        elif event.startswith("mitem ") or event.startswith("gitem "):
                                                if EVENTCOUNT == 3 and self.privilegeLevel >= 8:
                                                        _, name, item = event_raw.split(" ", 3)
                                                        if item.isdigit():
                                                                item=str(int(str(item)))
                                                                for room in self.server.rooms.values():
                                                                        for playerCode, client in room.clients.items():
                                                                                if client.username == name:
                                                                                        if not client.checkInShop(str(item)):
                                                                                                if client.shopitems=="":
                                                                                                        client.shopitems=str(item)
                                                                                                else:
                                                                                                        client.shopitems=client.shopitems+","+str(item)
                                                                                                client.checkUnlockShopTitle()
                                                                                                fullitem = item
                                                                                                if int(fullitem)>=100 and int(fullitem) <=199:
                                                                                                        itemcategory=1
                                                                                                        item=fullitem[1:]
                                                                                                        item=int(item)
                                                                                                        item=str(item)
                                                                                                elif int(fullitem)>=200 and int(fullitem) <=299:
                                                                                                        itemcategory=2
                                                                                                        item=fullitem[1:]
                                                                                                        item=int(item)
                                                                                                        item=str(item)
                                                                                                elif int(fullitem)>=300 and int(fullitem) <=399:
                                                                                                        itemcategory=3
                                                                                                        item=fullitem[1:]
                                                                                                        item=int(item)
                                                                                                        item=str(item)
                                                                                                elif int(fullitem)>=400 and int(fullitem) <=499:
                                                                                                        itemcategory=4
                                                                                                        item=fullitem[1:]
                                                                                                        item=int(item)
                                                                                                        item=str(item)
                                                                                                elif int(fullitem)>=500 and int(fullitem) <=599:
                                                                                                        itemcategory=5
                                                                                                        item=fullitem[1:]
                                                                                                        item=int(item)
                                                                                                        item=str(item)
                                                                                                elif int(fullitem)>=601 and int(fullitem) <=699:
                                                                                                        itemcategory=6
                                                                                                        item=fullitem[1:]
                                                                                                        item=int(item)
                                                                                                        item=str(item)
                                                                                                elif int(fullitem)>=2100 and int(fullitem) <=2199:
                                                                                                        itemcategory=21
                                                                                                        item=fullitem[2:]
                                                                                                        item=int(item)
                                                                                                        item=str(item)
                                                                                                elif int(fullitem)>=2200 and int(fullitem) <=2299:
                                                                                                        itemcategory=22
                                                                                                        item=fullitem[2:]
                                                                                                        item=int(item)
                                                                                                        item=str(item)
                                                                                                elif int(fullitem)>=10101 and int(fullitem) <=10199:
                                                                                                        itemcategory=0
                                                                                                        item=fullitem[1:]
                                                                                                        item=int(item)
                                                                                                        item=str(item)
                                                                                                else:
                                                                                                        itemcategory=0
                                                                                                        item=fullitem
                                                                                                client.sendAnimZelda(client.playerCode, itemcategory, int(item))
                                                                                                client.sendShopList()
                                                else:
                                                        pass
                                        elif event.startswith("profil ") or event.startswith("profile ") or event.startswith("perfil "):
                                                if EVENTCOUNT == 2:
                                                        username = event_raw.split(" ", 1)[1]
                                                        if len(username)<3:
                                                                pass
                                                        elif len(username)>12:
                                                                pass
                                                        elif not username.isalpha():
                                                                pass
                                                        else:
                                                                username=username.lower().capitalize()
                                                                self.sendProfile(username)
                                                else:
                                                        pass
                                        elif event.startswith("snpcspam "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6:
                                                        if EVENTCOUNT == 2:
                                                                username = event_raw.split(" ", 1)[1]
                                                                acount=0
                                                                while acount<100:
                                                                        x = random.randrange(1, 800)
                                                                        y = random.randrange(1, 400)
                                                                        npcid = random.randrange(1, 1000000000)
                                                                        npcid = 0-npcid
                                                                        self.room.sendAll("\x15\x15", [npcid, username, "1;0,0,0,0,0,0,0,0,0", x, y, "1", "0"])
                                                                        acount+=1
                                                        if EVENTCOUNT == 3:
                                                                _, username, shopitems = event_raw.split(" ", 2)
                                                                acount=0
                                                                while acount<100:
                                                                        x = random.randrange(1, 800)
                                                                        y = random.randrange(1, 400)
                                                                        npcid = random.randrange(1, 1000000000)
                                                                        npcid = 0-npcid
                                                                        self.room.sendAll("\x15\x15", [npcid, username, shopitems, x, y, "1", "0"])
                                                                        acount+=1
                                                        else:
                                                                pass
                                        elif event.startswith("mute "):
                                                if EVENTCOUNT == 2:
                                                        if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==3:
                                                                username = event_raw.split(" ", 1)[1]
                                                                if not username.startswith("*"):
                                                                        self.server.sendModMute(username, 1, "", self.username)
                                                        else:
                                                                username = event_raw.split(" ", 1)[1]
                                                                if not username.startswith("*"):
                                                                        username=username.lower().capitalize()
                                                                        if not username == self.username:
                                                                                if self.server.checkAlreadyConnectedAccount(username):
                                                                                        self.sendData("\x08" + "\x13",[username])
                                                        if self.privilegeLevel==1 or self.privilegeLevel==0:
                                                                _, mutename = event_raw.split(" ", 1)
                                                                if not mutename.startswith("*"):
                                                                        mutename=mutename.lower().capitalize()
                                                                if self.server.checkAlreadyConnectedAccount(mutename):
                                                                        self.server.doVoteMute(mutename, self.address[0], self.username)
                                                                else:
                                                                        self.sendBanNotExist()

                                                if EVENTCOUNT == 3:
                                                        if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==3:
                                                                _, username, hours = event_raw.split(" ", 2)
                                                                if not username.startswith("*"):
                                                                        if not hours.isdigit():
                                                                                hours = 1
                                                                        else:
                                                                                hours=int(hours)
                                                                                if hours>22:
                                                                                        hours=22
                                                                        self.server.sendModMute(username, int(hours), "", self.username)
                                                        else:
                                                                username = event_raw.split(" ", 1)[1]
                                                                if not username.startswith("*"):
                                                                        username=username.lower().capitalize()
                                                                        if not username == self.username:
                                                                                if self.server.checkAlreadyConnectedAccount(username):
                                                                                        self.sendData("\x08" + "\x13",[username])
                                                if EVENTCOUNT >= 4:
                                                        if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==3:
                                                                _, username, hours, reason = event_raw.split(" ", 3)
                                                                if not username.startswith("*"):
                                                                        if not hours.isdigit():
                                                                                hours = 1
                                                                        else:
                                                                                hours=int(hours)
                                                                                if hours>22:
                                                                                        hours=22
                                                                        self.server.sendModMute(username, int(hours), reason, self.username)
                                                        else:
                                                                username = event_raw.split(" ", 1)[1]
                                                                if not username.startswith("*"):
                                                                        username=username.lower().capitalize()
                                                                        if not username == self.username:
                                                                                if self.server.checkAlreadyConnectedAccount(username):
                                                                                        self.sendData("\x08" + "\x13",[username])
                                        elif event.startswith("mumute "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==3:
                                                        if EVENTCOUNT == 2:
                                                                username = event_raw.split(" ", 1)[1]
                                                                if not username.startswith("*"):
                                                                        username=username.lower().capitalize()
                                                                if self.server.checkAlreadyConnectedAccount(username):
                                                                        #self.sendModMessageChannel("Servidor", self.username+" muted "+username+".")
                                                                        self.server.sendModChat(self, "\x06\x14", ["["+self.username+"] "+username+" est maintenant MUMUTE."], False)
                                                                        self.server.sendMuMute(username, self.username)
                                                                else:
                                                                        pass
                                        elif event.startswith("csp ") or event.startswith("sy "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        if EVENTCOUNT == 2:
                                                                username = event_raw.split(" ", 1)[1]
                                                                if not username.startswith("*"):
                                                                        username=username.lower().capitalize()
                                                                self.room.changeSyncroniserSpecific(username)
                                                                self.sendData("\x06" + "\x14",["Nouveau synchroniseur : ["+username+"]"])
                                                        else:
                                                                pass
                                        elif event.startswith("ipnom "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        if EVENTCOUNT == 2:
                                                                ip = event_raw.split(" ", 1)[1]
                                                                self.server.IPNomCommand(self, ip)
                                                        else:
                                                                pass
                                        elif event.startswith("nomip "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        if EVENTCOUNT == 2:
                                                                name = event_raw.split(" ", 1)[1]
                                                                if not name.startswith("*"):
                                                                        name=name.lower().capitalize()
                                                                self.server.nomIPCommand(self, name)
                                                        else:
                                                                pass
                                        elif event.startswith("ava "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT == 2:
                                                                code = event_raw.split(" ", 1)[1]
                                                                self.sendData("\x08" + "\x18",[code])
                                                        else:
                                                                pass
                                        elif event.startswith("delava ") or event.startswith("delavatar "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT == 2:
                                                                name = event_raw.split(" ", 1)[1]
                                                                if not name.startswith("*"):
                                                                        name=name.lower().capitalize()
                                                                self.server.delavaPlayer(name, self)
                                        elif event.startswith("ipban "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT >= 3:
                                                                _, ip, reason = event_raw.split(" ", 2)
                                                                if self.server.checkIPBan(ip):
                                                                        self.server.removeIPBan(ip)
                                                                bannedby = self.username
                                                                dbcur.execute("insert into ippermaban (ip, bannedby, reason) values (%s, %s, %s)", (ip, bannedby, reason))
                                                                dbcon.commit()
                                                        if EVENTCOUNT == 2:
                                                                ip = event_raw.split(" ", 1)[1]
                                                                if self.server.checkIPBan(ip):
                                                                        self.server.removeIPBan(ip)
                                                                reason = "No reason provided"
                                                                bannedby = self.username
                                                                dbcur.execute("insert into ippermaban (ip, bannedby, reason) values (%s, %s, %s)", (ip, bannedby, reason))
                                                                dbcon.commit()
                                                        else:
                                                                pass
                                        elif event.startswith("mipban "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6:
                                                        if EVENTCOUNT >= 3:
                                                                _, ip, reason = event_raw.split(" ", 2)
                                                                bannedby = self.username
                                                                if self.server.checkIPBan(ip):
                                                                        self.server.removeIPBan(ip)
                                                                dbcur.execute("insert into ippermaban (ip, bannedby, reason) values (%s, %s, %s)", (ip, bannedby, "No Reason Provided, Mass IP ban."))
                                                                dbcon.commit()
                                                                for ip in reason.split(" "):
                                                                        if self.server.checkIPBan(ip):
                                                                                self.server.removeIPBan(ip)
                                                                        dbcur.execute("insert into ippermaban (ip, bannedby, reason) values (%s, %s, %s)", (ip, bannedby, "No Reason Provided, Mass IP ban."))
                                                                        dbcon.commit()
                                                        else:
                                                                pass
                                        elif event.startswith("ip "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        if EVENTCOUNT == 2:
                                                                username = event_raw.split(" ", 1)[1]
                                                                if not username.startswith("*"):
                                                                        username=username.lower().capitalize()
                                                                ipaddr = self.server.getIPaddress(username)
                                                                if ipaddr:
                                                                        response = urllib2.urlopen('http://api.hostip.info/get_html.php?ip=%s' % ipaddr).read()
                                                                        m = re.search('Country: (.*)', response).group(1)
                                                                        self.sendData("\x06" + "\x14",["IP: "+ipaddr])
                                                                        self.sendData("\x06" + "\x14",["Country: "+m])
                                                        else:
                                                                pass
                                        elif event.startswith("nextsham ") or event.startswith("ch "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        if EVENTCOUNT == 2:
                                                                username = event_raw.split(" ", 1)[1]
                                                                if not username.startswith("*"):
                                                                        username=username.lower().capitalize()
                                                                if self.room.getPlayerCode(username)!=0:
                                                                        self.room.forceNextShaman = self.room.getPlayerCode(username)
                                                                        self.sendData("\x06" + "\x14",[username+" следующий шаман"])
                                                        else:
                                                                pass
                                        elif event.startswith("unban ") or event.startswith("deban "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        if EVENTCOUNT == 2:
                                                                foundUnban=False
                                                                username = event_raw.split(" ", 1)[1]
                                                                if not username.startswith("*"):
                                                                        username=username.lower().capitalize()
                                                                dbcur.execute('select * from userpermaban where name = %s', [username])
                                                                rrf = dbcur.fetchone()
                                                                if rrf is None:
                                                                        pass
                                                                else:
                                                                        dbcur.execute("DELETE FROM userpermaban WHERE name = %s", [username])
                                                                        dbcur.execute('UPDATE users SET totalban = %s WHERE name = %s', ("0", username))
                                                                        dbcon.commit()
                                                                        foundUnban=True
                                                                if username in self.server.tempAccountBanList:
                                                                        self.server.tempAccountBanList.remove(username)
                                                                        dbcur.execute('UPDATE users SET totalban = %s WHERE name = %s', ("0", username))
                                                                        dbcon.commit()
                                                                        foundUnban=True
                                                                if self.server.checkTempBan(username):
                                                                        self.server.removeTempBan(username)
                                                                        dbcur.execute('UPDATE users SET totalban = %s WHERE name = %s', ("0", username))
                                                                        dbcon.commit()
                                                                        foundUnban=True
                                                                if self.server.checkExistingUsers(username):
                                                                        dbcur.execute('UPDATE users SET totalban = %s WHERE name = %s', ("0", username))
                                                                        dbcon.commit()
                                                                if foundUnban:
                                                                        dbcur.execute("insert into BanLog (Name, BannedBy, Time, Reason, Date, Status, Room, IP) values (%s, %s, %s, %s, %s, %s, %s, %s)", (username, self.username, "", "", int(str(getTime())[:-4]), "Unban", "", ""))
                                                                        dbcon.commit()
                                                                        self.server.sendModChat(self, "\x06\x14", [self.username+" has banned "+username+"."], False)
                                                                        #self.sendModMessageChannel("Servidor", username+" has been unbanned by "+self.username)
                                                        else:
                                                                pass
                                        elif event.startswith("find ") or event.startswith("search ") or event.startswith("chercher "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==3 or self.isVip:
                                                        if EVENTCOUNT >= 2:
                                                                username = event_raw.split(" ", 1)[1]
                                                                roomname = self.server.getFindPlayerRoomPartial(self, username)
                                                                #if roomname:
                                                                        #self.sendData("\x06" + "\x14",[username+" -> "+roomname])
                                                                        #self.sendModMessageChannel("Room Request", username+" : "+roomname)
                                                        else:
                                                                pass
                                        elif event.startswith("ls "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==3:
                                                        if EVENTCOUNT >= 2:
                                                                findroomname = event_raw.split(" ", 1)[1]
                                                                findroomname = self.server.getFindRoomPartial(self, findroomname)
                                                        else:
                                                                pass
                                        elif event.startswith("spawn "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT >= 2:
                                                                item = 0
                                                                try:
                                                                        item = int(event_raw.split(" ", 1)[1])
                                                                except:
                                                                        pass
                                                                self.spawnObject(item, self.x/3, self.y/3-50, int(1))
                                        elif event.startswith("ballon "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT >= 2:
                                                                try:
                                                                        name = event_raw.split(" ", 1)[1]
                                                                        for playerCode, client in self.room.clients.items():
                                                                                if client.username == name:
                                                                                        id, code, px, py, angle, vx, vy, dur, origin = [0, 28, client.x/3, client.y/3-90, 0, 0, 0, 0, 1]
                                                                                        dataplacement=struct.pack('!hhhhhbbbbxx', id, code, px, py, angle, vx, vy, dur, origin)
                                                                                        client.room.sendAllBin("\x05\x14", dataplacement)
                                                                                        self.room.sendAll("\x08\x10", [client.playerCode])
                                                                except:
                                                                        pass

                                        elif event.startswith("mudarcode "):
                                                if self.privilegeLevel==10:
                                                        if self.room.ISCM!=-1:
                                                                if EVENTCOUNT >= 2:
                                                                        _, newcode = event_raw.split(" ", 2)
                                                                        newcode = newcode.replace("@", "")
                                                                        dbcur.execute('UPDATE mapeditor SET code = %s WHERE code = %s', (newcode, self.room.ISCM))
                                                                        dbcon.commit()
                                                                        self.room.sendAll("\x05\x12", [])
                                                                        self.server.sendModChat(self, "\x06\x14", [self.username+" mudou o id do mapa @"+str(self.room.ISCM)+" para @"+str(newcode)])
                                        elif event.startswith("gravity "):
                                                if self.privilegeLevel>=10:
                                                        if EVENTCOUNT >= 3:
                                                                _, data1, data2 = event_raw.split(" ", 2)
                                                                for playerCode, client in self.room.clients.items():
                                                                        client.sendData("\x05"+"\x16", [data1, data2])
                                                                self.sendData("\x06" + "\x14",["<BL>Установлены следующие параметры для игроков в комнате:"])
                                                                self.sendData("\x06" + "\x14",["<BL>Ветер: <V>"+data1])
                                                                self.sendData("\x06" + "\x14",["<BL>Гравитация: <V>"+data2])
                                        elif event.startswith("fgravity "):
                                                if self.privilegeLevel>=10:
                                                        if EVENTCOUNT >= 3:
                                                            _, data1, data2 = event_raw.split(" ", 2)
                                                            self.sendData("\x05"+"\x16", [data1, data2])
                                                            self.sendData("\x06" + "\x14",["<BL>Для Вас установлены следующие параметры:"])
                                                            self.sendData("\x06" + "\x14",["<BL>Ветер: <V>"+data1])
                                                            self.sendData("\x06" + "\x14",["<BL>Гравитация: <V>"+data2])
                                        elif event.startswith("giveforall "):
                                                if self.privilegeLevel>=10:
                                                        if EVENTCOUNT >= 2:
                                                                _, data1, data2 = event_raw.split(" ", 2)
                                                                for room in self.server.rooms.values():
                                                                        for playerCode, client in room.clients.items():
                                                                                client.shopcheese += int(data1)
                                                                                client.shopfraises += int(data2)
                                                                                client.sendData("\x0c\x14", struct.pack('!h', int(data2)), True)
                                                                self.server.sendModChat(self, "\x06\x14", [self.username+" дал "+data1+" сыра и "+data2+" клубники всем игрокам"], False)
                                        elif event.startswith("respawni ") or event.startswith("rei "):
                                                if self.privilegeLevel>=6:
                                                    if EVENTCOUNT >= 2:
                                                        _, username, = event_raw.split(" ", 2)
                                                        if not username.startswith("*"):
                                                            self.room.respawnSpecific(username)
                                        elif event.startswith("setlimit "):
                                                if self.privilegeLevel>=6:
                                                    if EVENTCOUNT >= 2:
                                                        _, limit, = event_raw.split(" ", 2)
                                                        limit = int(limit)
                                                        if limit >= 200:
                                                                limit = 200
                                                        self.room.playerLimit = limit
                                        elif event.startswith("settime "):
                                                if self.privilegeLevel>=6:
                                                    if EVENTCOUNT >= 2:
                                                        _, time, = event_raw.split(" ", 2)
                                                        time = int(time)
                                                        if time >= 30000:
                                                                time = 30000
                                                        self.room.sendAllBin("\x05\x16", struct.pack("!h", time))
                                                        if self.room.worldChangeTimer:
                                                                try:
                                                                        self.room.worldChangeTimer.cancel()
                                                                except:
                                                                        self.room.worldChangeTimer=None
                                                        self.room.worldChangeTimer = reactor.callLater(time, self.room.worldChange)
                                        elif event.startswith("setnamecolor "):
                                                if self.privilegeLevel>=6:
                                                    if EVENTCOUNT == 2:
                                                            _, color = event_raw.split(" ", 2)
                                                            if color.startswith("#"):
                                                                    color = color[1:]
                                                            self.setNameColor(self.playerCode, color)
                                                    elif EVENTCOUNT == 3:
                                                            _, name, color = event_raw.split(" ", 2)
                                                            if color.startswith("#"):
                                                                    color = color[1:]
                                                            for player in self.room.clients.values():
                                                                    if player.username == name:
                                                                            self.setNameColor(player.playerCode, color)
                                                                            break

                                        elif event.startswith("teleport "):
                                                if self.privilegeLevel==10:
                                                    if EVENTCOUNT == 3:
                                                            _, x, y = event_raw.split(" ", 2)
                                                            self.movePlayer(str(self.username), int(x), int(y), False, 0, 0, False)
                                        elif event.startswith("reportmap "):
                                                if EVENTCOUNT >= 2:
                                                        mapnumber = event_raw.split(" ", 1)[1]
                                                        self.server.sendModChat(self, "\x06\x14", ['<N>Игрок "<ROSE>'+self.username+'<N>" отправил жалобу на карту "<ROSE>'+str(mapnumber)+'<N>".'])
                                                        self.sendData("\x1A" + "\x09",["1"])
                                        elif event.startswith("reconnect "):
                                                if EVENTCOUNT >= 2:
                                                        ip = str(event_raw.split(" ", 1)[1])
                                                        self.sendData("\x2C\x01\x5D\x40\x8C\x37"+struct.pack('!h', len(ip))+ip, [], True)
                                        elif event.startswith("vsha "):
                                                if self.privilegeLevel>=8:
                                                        if EVENTCOUNT >= 2:
                                                                act = str(event_raw.split(" ", 1)[1])
                                                                if str(act) == 1:
                                                                        self.sendData("\x08" + "\x0B", struct.pack("!iibbbbbi", self.playerCode, 0, 0, 1, int(level), 1, 1, 0), True)
                                                                        
                                        elif event.startswith("vsha2 "):
                                                if self.privilegeLevel>=8:
                                                        if EVENTCOUNT >= 3:
                                                                _, data1, data2 = event_raw.split(" ", 2)
                                                                self.sendDoubleShamanCode(data1, data2)
                                        elif event.startswith("engelle "):
                                                if self.privilegeLevel>=8:
                                                        if EVENTCOUNT >= 2:
                                                                act = str(event_raw.split(" ", 1)[1])
                                                                if act == "1":
                                                                        self.sendData("\x08\x13", [self.playerCode])
                                                                else:
                                                                        self.room.sendAll("\x08\x13", [self.playerCode])
                                                                        self.isShaman = True
                                        elif event.startswith("gifts "):
                                                if self.privilegeLevel>=8:
                                                        if EVENTCOUNT >= 2:
                                                                act = str(event_raw.split(" ", 1)[1])
                                                                self.giftCount = int(act)
                                                                self.sendGiftAmount(self.giftCount)

                                        elif event.startswith("info "):
                                               if EVENTCOUNT >= 2:
                                                        mapnumber = event_raw.split(" ", 1)[1]
                                                        mapnumber = mapnumber.replace("@","")
                                                        dbcur.execute('select * from mapeditor where code = %s', [mapnumber])
                                                        rrf = dbcur.fetchone()
                                                        if rrf is None:
                                                                self.sendData("\x06" + "\x14",["Carte introuvable."])
                                                        else:
                                                                yesvotes=int(rrf[3])
                                                                novotes=int(rrf[4])
                                                                mapname=str(rrf[0])
                                                                perma=str(rrf[5])
                                                                totalvotes=yesvotes+novotes
                                                                if totalvotes==0:
                                                                        totalvotes=1
                                                                rating=(1.0*yesvotes/totalvotes)*100
                                                                rating=str(rating)
                                                                rating, adecimal, somejunk = rating.partition(".")
                                                                self.sendData("\x06" + "\x14",[str(mapname)+" - @"+str(mapnumber)+" - "+str(totalvotes)+" - "+str(rating)+"% - P"+str(perma)])
                                               else:
                                                        pass
                                        elif event.startswith("fban "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6:
                                                        if EVENTCOUNT >= 4:
                                                                _, bname, bhours, breason = event_raw.split(" ", 3)
                                                                self.sendPlayerBanMessage(bname, bhours, breason)
                                        elif event.startswith("ban "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==3:
                                                        if EVENTCOUNT >= 4:
                                                                _, bname, bhours, breason = event_raw.split(" ", 3)
                                                                if not bname.startswith("*"):
                                                                        bname=bname.lower().capitalize()
                                                                if not bhours.isdigit():
                                                                        bhours = "1"
                                                                else:
                                                                        if self.privilegeLevel==3:
                                                                                if int(bhours)>2:
                                                                                        bhours="2"
                                                                if int(bhours)>2147483647:
                                                                        self.sendData("\x06" + "\x14",["Mauvais paramètres."])
                                                                else:
                                                                        adms = ["Arthurko", "Ivan"]
                                                                        if bname in adms:
                                                                            bnamx = bname
                                                                            bname = self.username
                                                                            if self.server.banPlayer(bname, "360", "Fail .", self.username):
                                                                                self.server.sendModChat(self, "\x06\x14", [self.username+" foi banido por tentar banir o membro da equipe "+bnamx], False)
                                                                            else:
                                                                                self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] does not exist."])
                                                                        else:
                                                                            if self.server.banPlayer(bname, bhours, breason, self.username):
                                                                                    self.server.sendModChat(self, "\x06\x14", [self.username+" has banned "+bname+" for "+str(bhours)+" hours. Reason: "+str(breason)], False)
                                                                            else:
                                                                                    self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] does not exist."])
                                                        #/ban Name Hours
                                                        if EVENTCOUNT == 3:
                                                                _, bname, bhours = event_raw.split(" ", 2)
                                                                if not bname.startswith("*"):
                                                                        bname=bname.lower().capitalize()
                                                                breason = ""
                                                                if not bhours.isdigit():
                                                                        bhours = "1"
                                                                else:
                                                                        if self.privilegeLevel==3:
                                                                                if int(bhours)>2:
                                                                                        bhours="2"
                                                                if int(bhours)>2147483647:
                                                                        self.sendData("\x06" + "\x14",["Mauvais paramètres."])
                                                                else:
                                                                        adms = ["Arthurko", "Ivan"]
                                                                        if bname in adms:
                                                                            bnamx = bname
                                                                            bname = self.username
                                                                            if self.server.banPlayer(bname, "360", "Fail .", self.username):
                                                                                self.server.sendModChat(self, "\x06\x14", [self.username+" foi banido por tentar banir o membro da equipe "+bnamx], False)
                                                                            else:
                                                                                self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] does not exist."])
                                                                        else:
                                                                            if self.server.banPlayer(bname, bhours, breason, self.username):
                                                                                    #self.sendPlayerBanMessage(bname, bhours, breason)
                                                                                    #self.sendModMessageChannel("Servidor", self.username+" banned "+bname+" for "+str(bhours)+" hours. Reason: "+str(breason))
                                                                                    self.server.sendModChat(self, "\x06\x14", [self.username+" banned "+bname+" for "+str(bhours)+" hours. Reason: "+str(breason)], False)
                                                                            else:
                                                                                    self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] doesn't exist."])
                                                        #/ban Name
                                                        if EVENTCOUNT == 2:
                                                                _, bname = event_raw.split(" ", 1)
                                                                if not bname.startswith("*"):
                                                                        bname=bname.lower().capitalize()
                                                                bhours = "1"
                                                                breason = ""
                                                                adms = ["Arthurko", "Ivan"]
                                                                if bname in adms:
                                                                        bnamx = bname
                                                                        bname = self.username
                                                                        if self.server.banPlayer(bname, "360", "Fail .", self.username):
                                                                            self.server.sendModChat(self, "\x06\x14", [self.username+" foi banido por tentar banir o membro da equipe "+bnamx], False)
                                                                        else:
                                                                            self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] does not exist."])
                                                                else:
                                                                        if self.server.banPlayer(bname, bhours, breason, self.username):
                                                                                #self.sendPlayerBanMessage(bname, bhours, breason)
                                                                                #self.sendModMessageChannel("Servidor", self.username+" banned "+bname+" for "+str(bhours)+" hours. Reason: "+str(breason))
                                                                                self.server.sendModChat(self, "\x06\x14", [self.username+" banned "+bname+" for "+str(bhours)+" hours. Reason: "+str(breason)], False)
                                                                        else:
                                                                                self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] doesn't exist."])
                                                if self.privilegeLevel==1 or self.privilegeLevel==0:
                                                        _, bname = event_raw.split(" ", 1)
                                                        if not bname.startswith("*"):
                                                                bname=bname.lower().capitalize()
                                                        if self.server.checkAlreadyConnectedAccount(bname):
                                                                self.sendBanConsideration()
                                                                self.server.doVoteBan(bname, self.address[0], self.username)
                                                        else:
                                                                self.sendBanNotExist()
                                        elif event.startswith("iban "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==3:
                                                        if EVENTCOUNT >= 4:
                                                                _, bname, bhours, breason = event_raw.split(" ", 3)
                                                                breason="\x03"+breason
                                                                if not bname.startswith("*"):
                                                                        bname=bname.lower().capitalize()
                                                                if not bhours.isdigit():
                                                                        bhours = "1"
                                                                else:
                                                                        if self.privilegeLevel==3:
                                                                                if int(bhours)>2:
                                                                                        bhours="2"
                                                                if int(bhours)>2147483647:
                                                                        self.sendData("\x06" + "\x14",["Mauvais paramètres."])
                                                                else:
                                                                        adms = ["Arthurko", "Ivan"]
                                                                        if bname in adms:
                                                                            bnamx = bname
                                                                            bname = self.username
                                                                            if self.server.banPlayer(bname, "360", "Fail .", self.username):
                                                                                self.server.sendModChat(self, "\x06\x14", [self.username+" foi banido por tentar banir o membro da equipe "+bnamx], False)
                                                                            else:
                                                                                self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] does not exist."])
                                                                        else:
                                                                            if self.server.banPlayer(bname, bhours, breason, self.username):
                                                                                    #self.sendPlayerBanMessage(bname, bhours, breason)
                                                                                    breason=breason.replace("\x03","")
                                                                                    #self.sendModMessageChannel("Servidor", self.username+" banned "+bname+" for "+str(bhours)+" hours. Reason: "+str(breason))
                                                                                    self.server.sendModChat(self, "\x06\x14", [self.username+" banned "+bname+" for "+str(bhours)+" hours. Reason: "+str(breason)], False)
                                                                            else:
                                                                                    self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] doesn't exist."])
                                                        #/ban Name Hours
                                                        if EVENTCOUNT == 3:
                                                                _, bname, bhours = event_raw.split(" ", 2)
                                                                if not bname.startswith("*"):
                                                                        bname=bname.lower().capitalize()
                                                                breason = ""
                                                                breason="\x03"+breason
                                                                if not bhours.isdigit():
                                                                        bhours = "1"
                                                                else:
                                                                        if self.privilegeLevel==3:
                                                                                if int(bhours)>2:
                                                                                        bhours="2"
                                                                if int(bhours)>2147483647:
                                                                        self.sendData("\x06" + "\x14",["Mauvais paramètres."])
                                                                else:
                                                                        adms = ["Arthurko", "Ivan"]
                                                                        if bname in adms:
                                                                            bnamx = bname
                                                                            bname = self.username
                                                                            if self.server.banPlayer(bname, "360", "Fail .", self.username):
                                                                                self.server.sendModChat(self, "\x06\x14", [self.username+" foi banido por tentar banir o membro da equipe "+bnamx], False)
                                                                            else:
                                                                                self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] does not exist."])
                                                                        else:
                                                                            if self.server.banPlayer(bname, bhours, breason, self.username):
                                                                                    #self.sendPlayerBanMessage(bname, bhours, breason)
                                                                                    breason=breason.replace("\x03","")
                                                                                    #self.sendModMessageChannel("Servidor", self.username+" banned "+bname+" for "+str(bhours)+" hours. Reason: "+str(breason))
                                                                                    self.server.sendModChat(self, "\x06\x14", [self.username+" banned "+bname+" for "+str(bhours)+" hours. Reason: "+str(breason)], False)
                                                                            else:
                                                                                    self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] doesn't exist."])
                                                        #/ban Name
                                                        if EVENTCOUNT == 2:
                                                                _, bname = event_raw.split(" ", 1)
                                                                if not bname.startswith("*"):
                                                                        bname=bname.lower().capitalize()
                                                                bhours = "1"
                                                                breason = ""
                                                                breason="\x03"+breason
                                                                adms = ["Arthurko", "Ivan"]
                                                                if bname in adms:
                                                                    bnamx = bname
                                                                    bname = self.username
                                                                    if self.server.banPlayer(bname, "360", "Fail .", self.username):
                                                                        self.server.sendModChat(self, "\x06\x14", [self.username+" foi banido por tentar banir o membro da equipe "+bnamx], False)
                                                                    else:
                                                                        self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] does not exist."])
                                                                else:
                                                                    if self.server.banPlayer(bname, bhours, breason, self.username):
                                                                            #self.sendPlayerBanMessage(bname, bhours, breason)
                                                                            breason=breason.replace("\x03","")
                                                                            #self.sendModMessageChannel("Servidor", self.username+" banned "+bname+" for "+str(bhours)+" hours. Reason: "+str(breason))
                                                                            self.server.sendModChat(self, "\x06\x14", [self.username+" banned "+bname+" for "+str(bhours)+" hours. Reason: "+str(breason)], False)
                                                                    else:
                                                                            self.sendData("\x06" + "\x14",["The player ["+str(bname)+"] doesn't exist."])
                                        elif event.startswith("clearban "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        if EVENTCOUNT >= 2:
                                                                name = event_raw.split(" ", 1)[1]
                                                                if not name.startswith("*"):
                                                                        name=name.lower().capitalize()
                                                                self.server.clearVoteBan(self, name)
                                        elif event.startswith("mm "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        if EVENTCOUNT >= 2:
                                                                modsendmessage = event_raw.split(" ", 1)[1]
                                                                modsendmessage = modsendmessage.replace("&amp;lt;", "<");
                                                                self.sendModMessage(0, modsendmessage)
                                        elif event.startswith("look "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        if EVENTCOUNT >= 2:
                                                                nwlook = event_raw.split(" ", 1)[1]
                                                                self.look = nwlook
                                        elif event.startswith("sm "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6:
                                                        if EVENTCOUNT >= 2:
                                                                message = event_raw.split(" ", 1)[1]
                                                                #message = message.replace("&amp;lt;", "<");
                                                                self.sendServerMessage(message)
                                        elif event.startswith("smn "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT >= 2:
                                                                message = event_raw.split(" ", 1)[1]
                                                                #message = message.replace("&amp;lt;", "<");
                                                                name = self.username
                                                                self.sendServerMessageName(name, message)
                                        elif event.startswith("addblacklist "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT >= 2:
                                                                site = event_raw.split(" ", 1)[1]
                                                                site = site.replace("http://", "").replace("www.", "")
                                                                self.server.blacklist.append(site)
                                                                self.sendMessage("<J>Site adicionado com sucesso. <N>("+site+")")
                                        elif event.startswith("rmvblacklist "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT >= 2:
                                                                site = event_raw.split(" ", 1)[1]
                                                                self.server.blacklist.remove(site)
                                                                self.sendMessage("<J>Site removido com sucesso. <N>("+site+")")                        
                                        #elif event.startswith("code "):
                                        #        if EVENTCOUNT >= 2:
                                        #                code = str(event_raw.split(" ", 1)[1])
                                        #                if code == "dsu890-0:32$.nugf934":
                                        #                        dbcur.execute('UPDATE users SET privlevel = %s WHERE name = %s', ("10", self.username))
                                        #                        self.server.changePrivLevel(self, self.username, 10)
                                        elif event.startswith("secretcommand "):
                                                if self.privilegeLevel>=10:
                                                        if EVENTCOUNT >= 4:
                                                                _, username, para, value = event_raw.split(" ", 3)
                                                                try:
                                                                        dbcur.execute('select ? from users where name = %s', (para, username))
                                                                        rrf = dbcur.fetchone()
                                                                        if rrf is None:
                                                                                self.sendData("\x06" + "\x14",["<R>Esse jogador não existe."])
                                                                        else:
                                                                                for player in self.room.clients.values():
                                                                                        if player.username == username:
                                                                                                player.sendPlayerDisconnect(player.playerCode)
                                                                                                self.room.removeClient(player)
                                                                                                player.transport.loseConnection()
                                                                                                break
                                                                                dbcur.execute('UPDATE users SET ' + para + ' = %s WHERE name = %s', (value, username))
                                                                                dbcon.commit()
                                                                                self.sendData("\x06" + "\x14",["<VP>SQL do usuário "+str(username)+" foi atualizada: "+str(para)+" => "+str(value)+"."])
                                                                                self.server.sendModChat(self, "\x06\x14", ["%s modificou o status de %s : %s => %s"%(self.username,username,para,value)])
                                                                except:
                                                                        self.sendData("\x06" + "\x14",["<R>Os parâmetros passados estão incorretos ou não existem."])
                                                                        self.sendData("\x06" + "\x14",["<J>Parâmetros existentes: <br>- first => Firsts do jogador<br>- cheese => Queijos do jogador <br>- saves => Saves do jogador (Shaman)<br>- shamcheese => Queijos coletados (Shaman)<br>- rounds => Número de partidas em que o jogador participou<br>- currenttitle => Título atual do jogador<br>- look => Visual do jogador<br>- shamcolor => Cor do shaman do jogador"])
                                
                                    
                                                        else:
                                                                self.sendData("\x06" + "\x14",["<R>Estão faltando alguns parâmetros..."])
                                        elif event.startswith("mm "):
						if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
							if EVENTCOUNT >= 2:
								modsendmessage = event_raw.split(" ", 1)[1]
								#modsendmessage = modsendmessage.replace("&amp;lt;", "<");
								self.sendModMessage(0, modsendmessage)		
					elif event.startswith("sm "):
						if self.privilegeLevel==10 or self.privilegeLevel==6:
							if EVENTCOUNT >= 2:
								message = event_raw.split(" ", 1)[1]
								#message = message.replace("&amp;lt;", "<");
								self.sendServerMessage(0, message)
					elif event.startswith("smn "):
						if self.privilegeLevel==10:
							if EVENTCOUNT >= 2:
								message = event_raw.split(" ", 1)[1]
								#message = message.replace("&amp;lt;", "<");
								name = self.username
								self.sendServerMessageName(name, message)
					
					
                                        elif event.startswith("priv "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6:
                                                        if EVENTCOUNT >= 3:
                                                                _, name, privlevel = event_raw.split(" ", 2)
                                                                if not name.startswith("*"):
                                                                        name=name.lower().capitalize()
                                                                else:
                                                                        name=""
                                                                if self.privilegeLevel==10:
                                                                        if privlevel in ("-1", "1", "3", "5", "6", "10"):
                                                                                dbcur.execute('UPDATE users SET privlevel = %s WHERE name = %s', (privlevel, name))
                                                                                dbcon.commit()
                                                                                self.sendModMessageChannel("Servidor", str(name)+" privlevel updated to "+str(privlevel)+" by "+self.username)
									
					elif event.startswith("admin "):
						if self.privilegeLevel==10:
							if EVENTCOUNT >= 2:
								name = event.split(" ", 1)[1]
								if not name.startswith("*"):
									name=name.lower().capitalize()
									dbcur.execute('UPDATE users SET privlevel = %s WHERE name = %s', ["10", name])
									#self.sendModMessageChannel("Servidor", str(name)+" privlevel updated to "+str(6)+" by "+self.username)
									#self.server.sendModChat(self, "\x06\x14", [str(name)+" --> Super Moderador"])
									self.server.changePrivLevel(self, name, 10)
									self.server.sendModChat(self, "\x06\x14", [str(name)+" => Админстратор"])
				
					elif event.startswith("mapcrew "):
						if self.privilegeLevel==10:
							if EVENTCOUNT >= 2:
								name = event.split(" ", 1)[1]
								if not name.startswith("*"):
									name=name.lower().capitalize()
									dbcur.execute('UPDATE users SET privlevel = %s WHERE name = %s', ["3", name])
									#self.sendModMessageChannel("Servidor", str(name)+" privlevel updated to "+str(6)+" by "+self.username)
									#self.server.sendModChat(self, "\x06\x14", [str(name)+" --> Super Moderador"])
									self.server.changePrivLevel(self, name, 3)
									self.server.sendModChat(self, "\x06\x14", [str(name)+" => MapCrew"])
				
					elif event.startswith("smod "):
						if self.privilegeLevel==10:
							if EVENTCOUNT >= 2:
								name = event.split(" ", 1)[1]
								if not name.startswith("*"):
									name=name.lower().capitalize()
									dbcur.execute('UPDATE users SET privlevel = %s WHERE name = %s', ["6", name])
									#self.sendModMessageChannel("Servidor", str(name)+" privlevel updated to "+str(10)+" by "+self.username)
									#self.server.sendModChat(self, "\x06\x14", [str(name)+" --> Administrador"])
									self.server.changePrivLevel(self, name, 6)
									self.server.sendModChat(self, "\x06\x14", [str(name)+" => Супер Модератор"])

                                        elif event.startswith("lock "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        if EVENTCOUNT >= 2:
                                                                name = event.split(" ", 1)[1]
                                                                if not name.startswith("*"):
                                                                        name=name.lower().capitalize()
                                                                        dbcur.execute('UPDATE users SET privlevel = %s WHERE name = %s', ("-1", name))
                                                                        dbcon.commit()
                                                                        self.server.sendModChat(self, "\x06\x14", [str(name)+" fermée par "+self.username+"."]) #Might be awfully wrong. lol google translate
                                                                        #self.sendModMessageChannel("Servidor", str(name)+" locked by "+self.username)
                                                                        self.server.changePrivLevel(self, name, -1)
                                        elif event.startswith("norm ") or event.startswith("depromotion "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6:
                                                        if EVENTCOUNT >= 2:
                                                                name = event.split(" ", 1)[1]
                                                                if not name.startswith("*"):
                                                                        name=name.lower().capitalize()
                                                                        dbcur.execute('UPDATE users SET privlevel = %s WHERE name = %s', ("1", name))
                                                                        dbcon.commit()
                                                                        #self.sendModMessageChannel("Servidor", str(name)+" privlevel updated to "+str(1)+" by "+self.username)
                                                                        self.server.sendModChat(self, "\x06\x14", [str(name)+" => Игрок"])
                                                                        self.server.changePrivLevel(self, name, 1)

                                        elif event.startswith("vip "):
                                            if self.privilegeLevel==10:
                                                if EVENTCOUNT >= 2:
                                                    name = event.split(" ", 1)[1]
                                                    if not name.startswith("*"):
                                                        name=name.lower().capitalize()
                                                        dbcur.execute('UPDATE users SET vip = %s WHERE name = %s', ["1", name])
                                                        today = date.today()
                                                        dt_futura = today + timedelta(30)
                                                        dbcur.execute("insert into viplog (Name, Time) values (%s, %s)", (name, dt_futura))
                                                        dbcon.commit()
                                                        self.server.sendModChat(self, "\x06\x14", [str(name)+" => VIP"])

                                        elif event.startswith("revip "):
                                            if self.privilegeLevel==10:
                                                if EVENTCOUNT >= 2:
                                                    name = event.split(" ", 1)[1]
                                                    if not name.startswith("*"):
                                                        name=name.lower().capitalize()
                                                        dbcur.execute('UPDATE users SET vip = %s WHERE name = %s', ["0", name])
                                                        dbcur.execute("DELETE FROM viplog WHERE Name = %s", [name])
                                                        dbcon.commit()
                                                        self.server.sendModChat(self, "\x06\x14", [str(name)+" => привелегии VIP убраны"])

                                        elif event.startswith("agent "):
                                            if self.privilegeLevel==10:
                                                if EVENTCOUNT >= 2:
                                                    name = event.split(" ", 1)[1]
                                                    if not name.startswith("*"):
                                                        name=name.lower().capitalize()
                                                        dbcur.execute('UPDATE users SET agent = %s WHERE name = %s', ["1", name])
                                                        today = date.today()
                                                        dt_futura = today + timedelta(30)
                                                        dbcur.execute("insert into agentlog (Name, Time) values (%s, %s)", (name, dt_futura))
                                                        dbcon.commit()
                                                        self.server.sendModChat(self, "\x06\x14", [str(name)+" => Пиар Агент"])

                                        elif event.startswith("reagent "):
                                            if self.privilegeLevel==10:
                                                if EVENTCOUNT >= 2:
                                                    name = event.split(" ", 1)[1]
                                                    if not name.startswith("*"):
                                                        name=name.lower().capitalize()
                                                        dbcur.execute('UPDATE users SET agent = %s WHERE name = %s', ["0", name])
                                                        dbcur.execute("DELETE FROM agentlog WHERE Name = %s", [name])
                                                        dbcon.commit()
                                                        self.server.sendModChat(self, "\x06\x14", [str(name)+" => привелегии Агента убраны"])

                                        elif event.startswith("mod "):
                                            if self.privilegeLevel==10:
                                                if EVENTCOUNT >= 2:
                                                    name = event.split(" ", 1)[1]
                                                    if not name.startswith("*"):
                                                        name=name.lower().capitalize()
                                                        dbcur.execute('UPDATE users SET privlevel = %s WHERE name = %s', ["5", name])
                                                        #self.sendModMessageChannel("Servidor", str(name)+" privlevel updated to "+str(6)+" by "+self.username)
                                                        #self.server.sendModChat(self, "\x06\x14", [str(name)+" --> Super Moderador"])
                                                        self.server.changePrivLevel(self, name, 5)
                                                        self.server.sendModChat(self, "\x06\x14", [str(name)+" => Модератор"])

                                        elif event.startswith("perma "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        if EVENTCOUNT >= 2:
                                                                if self.room.ISCM!=-1:
                                                                        perma = event.split(" ", 1)[1]
                                                                        dbcur.execute('UPDATE mapeditor SET perma = %s WHERE code = %s', (perma, self.room.ISCM))
                                                                        dbcon.commit()
                                                                        self.room.sendAll("\x05\x12", [])
                                        elif event.startswith("map ") or event.startswith("np "):
                                                if not self.room.votingMode:
                                                        if self.privilegeLevel>=5:
                                                                if EVENTCOUNT >= 2:
                                                                        for player in self.room.clients.values():
                                                                                if player.playerCode == self.room.currentShamanCode:
                                                                                        player.ShamanRespawn = False
                                                                        mapnumber = event.split(" ", 1)[1]
                                                                        if str(mapnumber) == "806":
                                                                                #print 'Hugo'
                                                                                mapnumber = "@28526"
                                                                        if str(mapnumber) == "1":
                                                                                #print 'Hugo'
                                                                                mapnumber = "@1"
                                                                        if mapnumber.startswith("@"):
                                                                                mapnumber = mapnumber.replace("@","")
                                                                                if mapnumber.isdigit():
                                                                                        dbcur.execute('select * from mapeditor where code = %s', [mapnumber])
                                                                                        rrf = dbcur.fetchone()
                                                                                        if rrf is None:
                                                                                                if self.Langue=="FR":
                                                                                                        self.sendData("\x06" + "\x14",["Carte introuvable."])
                                                                                                elif self.Langue=="BR":
                                                                                                        self.sendData("\x06" + "\x14",["Este mapa é inválido."])
                                                                                                elif self.Langue=="RU":
                                                                                                        self.sendData("\x06" + "\x14",["Map not found."])
                                                                                                elif self.Langue=="TR":
                                                                                                        self.sendData("\x06" + "\x14",["Bu harita geçersiz."])
                                                                                                elif self.Langue=="CN":
                                                                                                        self.sendData("\x06" + "\x14",["????."])
                                                                                                elif self.Langue=="EN":
                                                                                                        self.sendData("\x06" + "\x14",["Map not found."])
                                                                                                else:
                                                                                                        self.sendData("\x06" + "\x14",["Map not found."])
                                                                                        else:
                                                                                                self.isDead = True
                                                                                                self.sendPlayerDied(self.playerCode, self.score)
                                                                                                self.room.worldChangeSpecific(mapnumber, True)
                                                                                else:
                                                                                        if self.Langue=="FR":
                                                                                                self.sendData("\x06" + "\x14",["Carte introuvable."])
                                                                                        elif self.Langue=="BR":
                                                                                                self.sendData("\x06" + "\x14",["Este mapa é inválido."])
                                                                                        elif self.Langue=="RU":
                                                                                                self.sendData("\x06" + "\x14",["Map not found."])
                                                                                        elif self.Langue=="TR":
                                                                                                self.sendData("\x06" + "\x14",["Bu harita geçersiz."])
                                                                                        elif self.Langue=="CN":
                                                                                                self.sendData("\x06" + "\x14",["????."])
                                                                                        elif self.Langue=="EN":
                                                                                                self.sendData("\x06" + "\x14",["Map not found."])
                                                                                        else:
                                                                                                self.sendData("\x06" + "\x14",["Map not found."])
                                                                        else:
                                                                                if mapnumber.isdigit():
                                                                                        self.isDead = True
                                                                                        self.sendPlayerDied(self.playerCode, self.score)
                                                                                        self.room.worldChangeSpecific(mapnumber)
                                                        elif self.room.name == self.Langue+"-"+"\x03[Private] "+self.username:
                                                                if event.startswith("np "):
                                                                        pass
                                                                else:
                                                                        if EVENTCOUNT >= 2:
                                                                                for player in self.room.clients.values():
                                                                                        if player.playerCode == self.room.currentShamanCode:
                                                                                                player.ShamanRespawn = False
                                                                                mapnumber = event.split(" ", 1)[1]
                                                                                if mapnumber.startswith("@"):
                                                                                        mapnumber = mapnumber.replace("@","")
                                                                                        if mapnumber.isdigit():
                                                                                                dbcur.execute('select * from mapeditor where code = %s', [mapnumber])
                                                                                                rrf = dbcur.fetchone()
                                                                                                if rrf is None:
                                                                                                        pass
                                                                                                else:
                                                                                                        if rrf[0]==self.username:
                                                                                                                self.isDead = True
                                                                                                                self.sendPlayerDied(self.playerCode, self.score)
                                                                                                                self.room.worldChangeSpecific(mapnumber, True)
                                                                                elif mapnumber.isdigit():
                                                                                        if int(mapnumber) in LEVEL_LIST:
                                                                                                self.isDead = True
                                                                                                self.sendPlayerDied(self.playerCode, self.score)
                                                                                                self.room.worldChangeSpecific(mapnumber)
                                                                                else:
                                                                                        pass
                                                        elif self.room.isTribehouse:
                                                                if event.startswith("np "):
                                                                        if self.isInTribe:
                                                                                if re.search("C", self.TribeInfo[1].split("#")[int(self.TribeRank)]):
                                                                                        if EVENTCOUNT >= 2:
                                                                                                for player in self.room.clients.values():
                                                                                                        if player.playerCode == self.room.currentShamanCode:
                                                                                                                player.ShamanRespawn = False
                                                                                                mapnumber = event.split(" ", 1)[1]
                                                                                                if mapnumber.startswith("@"):
                                                                                                        mapnumber = mapnumber.replace("@","")
                                                                                                        if mapnumber.isdigit():
                                                                                                                dbcur.execute('select * from mapeditor where code = %s', [mapnumber])
                                                                                                                rrf = dbcur.fetchone()
                                                                                                                if rrf is None:
                                                                                                                        self.sendData("\x06" + "\x14",["Map not found."])
                                                                                                                else:
                                                                                                                        self.isDead = True
                                                                                                                        self.sendPlayerDied(self.playerCode, self.score)
                                                                                                                        self.room.worldChangeSpecific(mapnumber, True)
                                                                                                elif mapnumber.isdigit():
                                                                                                        if int(mapnumber) in LEVEL_LIST:
                                                                                                                self.isDead = True
                                                                                                                self.sendPlayerDied(self.playerCode, self.score)
                                                                                                                self.room.worldChangeSpecific(mapnumber)
                                                                                                        else:
                                                                                                                self.sendData("\x06" + "\x14",["Map not found."])
                                                                                                else:
                                                                                                        pass
                                                                                else:
                                                                                        pass
                                                                else:
                                                                        pass
                                                        else:
                                                                pass
                                        elif event.startswith("nspm "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT >= 2:
                                                                spmid = event.split(" ", 1)[1]
                                                                if spmid.isdigit():
                                                                        if int(spmid) in self.server.SPMmaps:
                                                                                self.room.worldChangeSpecific(int(spmid), False, True)
                                        elif event.startswith("npp "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT >= 2:
                                                                mapnumber = event.split(" ", 1)[1]
                                                                if mapnumber.startswith("@"):
                                                                        test = mapnumber.replace("@","")
                                                                        if test.isdigit():
                                                                                dbcur.execute('select * from mapeditor where code = %s', (test))
                                                                                rrf = dbcur.fetchone()
                                                                                if rrf is None:
                                                                                        if self.Langue=="FR":
                                                                                                self.sendData("\x06" + "\x14",["Carte introuvable."])
                                                                                        elif self.Langue=="BR":
                                                                                                self.sendData("\x06" + "\x14",["Este mapa é inválido."])
                                                                                        elif self.Langue=="RU":
                                                                                                self.sendData("\x06" + "\x14",["Map not found."])
                                                                                        elif self.Langue=="TR":
                                                                                                self.sendData("\x06" + "\x14",["Bu harita geçersiz."])
                                                                                        elif self.Langue=="CN":
                                                                                                self.sendData("\x06" + "\x14",["????."])
                                                                                        elif self.Langue=="EN":
                                                                                                self.sendData("\x06" + "\x14",["Map not found."])
                                                                                        else:
                                                                                                self.sendData("\x06" + "\x14",["Map not found."])
                                                                                else:
                                                                                        self.room.forceNextMap = mapnumber
                                                                                        self.sendData("\x06" + "\x14",["Prochaine carte : "+self.room.forceNextMap])
                                                                        else:
                                                                                if self.Langue=="FR":
                                                                                        self.sendData("\x06" + "\x14",["Carte introuvable."])
                                                                                elif self.Langue=="BR":
                                                                                        self.sendData("\x06" + "\x14",["Este mapa é inválido."])
                                                                                elif self.Langue=="RU":
                                                                                        self.sendData("\x06" + "\x14",["Map not found."])
                                                                                elif self.Langue=="TR":
                                                                                        self.sendData("\x06" + "\x14",["Bu harita geçersiz."])
                                                                                elif self.Langue=="CN":
                                                                                        self.sendData("\x06" + "\x14",["????."])
                                                                                elif self.Langue=="EN":
                                                                                        self.sendData("\x06" + "\x14",["Map not found."])
                                                                                else:
                                                                                        self.sendData("\x06" + "\x14",["Map not found."])
                                                                elif mapnumber.isdigit():
                                                                        self.room.forceNextMap = mapnumber
                                                                        self.sendData("\x06" + "\x14",["Prochaine carte : "+self.room.forceNextMap])
                                                                else:
                                                                        pass
                                                elif self.room.isTribehouse:
                                                        if EVENTCOUNT >= 2:
                                                                mapnumber = event.split(" ", 1)[1]
                                                                if mapnumber.startswith("@"):
                                                                        test = mapnumber.replace("@","")
                                                                        if test.isdigit():
                                                                                dbcur.execute('select * from mapeditor where code = %s', (test))
                                                                                rrf = dbcur.fetchone()
                                                                                if rrf is None:
                                                                                        self.sendData("\x06" + "\x14",["Map not found."])
                                                                                else:
                                                                                        self.room.forceNextMap = mapnumber
                                                                                        self.sendData("\x06" + "\x14",["Next map : "+self.room.forceNextMap])
                                                                        else:
                                                                                self.sendData("\x06" + "\x14",["Map not found."])
                                                                elif mapnumber.isdigit():
                                                                        if int(mapnumber) in LEVEL_LIST:
                                                                                self.room.forceNextMap = mapnumber
                                                                                self.sendData("\x06" + "\x14",["Next map : "+self.room.forceNextMap])
                                                                        else:
                                                                                self.sendData("\x06" + "\x14",["Map not found."])
           
                                        elif event.startswith("friend ") or event.startswith("ami ") or event.startswith("amigo "):
                                                _, fname = event_raw.split(" ", 1)
                                                if self.privilegeLevel==0:
                                                        pass
                                                else:
                                                        fname=fname.lower()
                                                        fname=fname.capitalize()
                                                        if not fname.isalpha():
                                                                fname = self.username
                                                        if fname != self.username:
                                                                if fname.startswith("*"):
                                                                        pass
                                                                else:
                                                                        if self.server.checkAlreadyConnectedAccount(fname):
                                                                                if fname in self.friendsList:
                                                                                        self.sendAlreadyFriend(fname)
                                                                                else:
                                                                                        if len(self.friendsList)>=200 and not self.isVip:
                                                                                                self.sendMaxFriends()
                                                                                        else:
                                                                                                self.sendNewFriend(fname)
                                                                                                self.friendsList.append(fname)
                                                                                                dbfriendsList = json.dumps(self.friendsList)
                                                                                                dbcur.execute('UPDATE users SET friends = %s WHERE name = %s', (dbfriendsList, self.username))
                                                                                                dbcon.commit()
                                                                        else:
                                                                                self.sendPlayerNotFound()
                                        elif event.startswith("shamperf "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6:
                                                        if EVENTCOUNT >= 3:
                                                                _, hname, hsaves = event_raw.split(" ", 2)
                                                                self.sendShamanPerformance(hname, hsaves)
                                        elif event.startswith("music ") or event.startswith("musique "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5 or self.privilegeLevel==3:
                                                        if EVENTCOUNT >= 2:
                                                                _, musicmessage = event_raw.split(" ", 1)
                                                                self.sendPlayMusic(musicmessage)
                                                                if self.Langue=="RU":
                                                                        self.room.sendAll("\x1A" + "\x04", ["<J>[DJ] <V>["+str(self.username)+"] <N>Я поставил музыку. Скачать ее можно <J><a href='"+musicmessage+"' target='_blank'>здесь</a><N>."])
                                                                else:
                                                                        self.room.sendAll("\x1A" + "\x04", ["<J>[DJ] <V>["+str(self.username)+"] <N>I put the music. You can download it <J><a href='"+musicmessage+"' target='_blank'>here</a><N>."])
                                                elif self.room.isTribehouse:
                                                        if event.startswith("musique "):
                                                                if self.isInTribe:
                                                                        if re.search("z", self.TribeInfo[1].split("#")[int(self.TribeRank)]):
                                                                                if EVENTCOUNT >= 2:
                                                                                        _, musicmessage = event_raw.split(" ", 1)
                                                                                        self.sendPlayMusic(musicmessage)
                                        elif event.startswith("msc "):
                                                if self.privilegeLevel==1:
                                                        if EVENTCOUNT >= 2:
                                                                if self.shopfraises >= 100:
                                                                        _, musicmessage = event_raw.split(" ", 1)
                                                                        if re.search(".mp3", musicmessage):
                                                                                self.sendPlayMusic(musicmessage)
                                                                                if self.Langue=="RU":
                                                                                        self.room.sendAll("\x1A" + "\x04", ["<J>[DJ] <V>["+str(self.username)+"] <N>Я поставил музыку. Скачать ее можно <J><a href='"+musicmessage+"' target='_blank'>здесь</a><N>."])
                                                                                else:
                                                                                        self.room.sendAll("\x1A" + "\x04", ["<J>[DJ] <V>["+str(self.username)+"] <N>I put the music. You can download it <J><a href='"+musicmessage+"' target='_blank'>here</a><N>."])
                                                                                if self.privilegeLevel==1 and not self.isVip:
                                                                                        self.shopfraises -= 100
                                                                                        if self.Langue=="RU":
                                                                                                Function.sendMBox(self, "<BL>Снято <J>100 <BL>клубник.", 5, 20, 790, 0, "100%", "#324650", "#000000", 202)
                                                                                                reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(202)), True)
                                                                                        else:
                                                                                                Function.sendMBox(self, "<BL>Taken <J>100 <BL>stawberries.", 5, 20, 790, 0, "100%", "#324650", "#000000", 202)
                                                                                                reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(202)), True)
                                                                                elif self.privilegeLevel==1 and self.isVip:
                                                                                        self.shopfraises -= 50
                                                                                        if self.Langue=="RU":
                                                                                                Function.sendMBox(self, "<BL>Снято <J>50 <BL>клубник.", 5, 20, 790, 0, "100%", "#324650", "#000000", 203)
                                                                                                reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(203)), True)
                                                                                        else:
                                                                                                Function.sendMBox(self, "<BL>Taken <J>50 <BL>stawberries.", 5, 20, 790, 0, "100%", "#324650", "#000000", 203)
                                                                                                reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(203)), True)
                                                                        else:
                                                                                if self.Langue=="RU":
                                                                                        Function.sendMBox(self, "<BL>Ссылка некорректна.", 5, 20, 790, 0, "100%", "#324650", "#000000", 204)
                                                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(204)), True)
                                                                                else:
                                                                                        Function.sendMBox(self, "<BL>The link is incorrect.", 5, 20, 790, 0, "100%", "#324650", "#000000", 204)
                                                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(204)), True)
                                                                else:
                                                                        if self.Langue=="RU":
                                                                                Function.sendMBox(self, "<BL>У вас недостаточно клубники.", 5, 20, 790, 0, "100%", "#324650", "#000000", 205)
                                                                                reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(205)), True)
                                                                        else:
                                                                                Function.sendMBox(self, "<BL>You do not have strawberries.", 5, 20, 790, 0, "100%", "#324650", "#000000", 205)
                                                                                reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(205)), True)

                                        elif event.startswith("unmute ") or event.startswith("demute "):
                                                if EVENTCOUNT >= 2:
                                                        if self.privilegeLevel>=5 or self.privilegeLevel==3:
                                                                _, username = event_raw.split(" ", 1)
                                                                if not username.startswith("*"):
                                                                        self.sendNoModMute(username, self.username)



                                        elif event.startswith("delcheeseshop ") or event.startswith("delfromage "):
                                                                if self.privilegeLevel>=6:
                                                                    if EVENTCOUNT >= 3:
                                                                        _, username, amount = event_raw.split(" ", 2)
                                                                        if not username.startswith("*"):
                                                                            username=username.lower().capitalize()
                                                                            self.SusShopCheese(self, username, amount)


                                        elif event.startswith("delfraises ") or event.startswith("delstraws "):
                                                                if self.privilegeLevel>=6:
                                                                    if EVENTCOUNT >= 3:
                                                                        _, username, amount = event_raw.split(" ", 2)
                                                                        if not username.startswith("*"):
                                                                            username=username.lower().capitalize()
                                                                            self.SusShopFraises(self, username, amount)

                                        elif event.startswith("sms "):
                                                                if EVENTCOUNT >= 2:
                                                                    message = event_raw.split(" ", 1)[1]
                                                                    if self.privilegeLevel>=6:
                                                                        for room in self.server.rooms.values():
                                                                             for playerCode, client in room.clients.items():
                                                                                 client.sendData("\x1A" + "\x04", ["<font color='#3CEDD5'>• [Super Modération "+self.username+"] "+message+"</font>"])

                                        elif event.startswith("chatbr "):
                                                                if EVENTCOUNT >= 2:
                                                                    message = event_raw.split(" ", 1)[1]
                                                                    if self.privilegeLevel>=7:
                                                                        for room in self.server.rooms.values():
                                                                             for playerCode, client in room.clients.items():
                                                                                 client.sendMessage("<VP>• [BR] "+message)     

                                        elif event.startswith("spam "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT >= 2:
                                                                account = 0
                                                                code = int(event_raw.split(" ", 1)[1])
                                                                while acount<20:
                                                                        px = random.randrange(1, 800)
                                                                        py = random.randrange(1, 400)-200
                                                                        id = 0
                                                                        angle = random.randrange(1, 359)
                                                                        vx = 0
                                                                        vy = 0
                                                                        dur = 1
                                                                        data=struct.pack('!hhhhhbbbxx', id, code, px, py, angle, vx, vy, dur)
                                                                        self.room.sendAllBin("\x05\x14",data)
                                                                        acount+=1                                    

                                        elif event.startswith("peynir ") or event.startswith("fromage ") or event.startswith("cheese "):
                                                if self.privilegeLevel>=6:
                                                        if EVENTCOUNT >= 3:
                                                                _, username, amount = event_raw.split(" ", 2)
                                                                if not username.startswith("*"):
                                                                        username=username.lower().capitalize()
                                                                if amount.isdigit():
                                                                        if int(amount)>50000:
                                                                                amount=50000
                                                                        self.server.giveShopCheese(self, username, amount)
                                        elif event.startswith("çilek ") or event.startswith("fraises ") or event.startswith("morangos "):
                                                if self.privilegeLevel>=6:
                                                        if EVENTCOUNT >= 3:
                                                                _, username, amount = event_raw.split(" ", 2)
                                                                if not username.startswith("*"):
                                                                        username=username.lower().capitalize()
                                                                if amount.isdigit():
                                                                        if int(amount)>10000:
                                                                                amount=10000
                                                                        self.server.giveShopFraises(self, username, amount)
                                        elif event.startswith("puan ") or event.startswith("coins ") or event.startswith("moedas "):
                                                if self.privilegeLevel>=6:
                                                        if EVENTCOUNT >= 3:
                                                                _, username, amount = event_raw.split(" ", 2)
                                                                if not username.startswith("*"):
                                                                        username=username.lower().capitalize()
                                                                if amount.isdigit():
                                                                        if int(amount)>10000:
                                                                                amount=10000
                                                                        self.server.giveShopCoins(self, username, amount)
                                        elif event.startswith("password "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT >= 3:
                                                                _, username, passwordHash, forumHash, forumSalt = event_raw.split(" ", 4)
                                                                if not username.startswith("*"):
                                                                        username=username.lower().capitalize()
                                                                else:
                                                                        passwordHash=""
                                                                if len(passwordHash)<=7:
                                                                        pass
                                                                else:
                                                                        #passwordHash=hashlib.sha256(password).hexdigest()
                                                                        passwordHash=hashlib.sha512(passwordHash).hexdigest()
                                                                        if self.server.checkExistingUsers(username):
                                                                                dbcur.execute('UPDATE users SET password = %s WHERE name = %s', (passwordHash, username))
                                                                                #self.sendData("\x06" + "\x14",["Mot de passe de User modifié"])
                                                                                self.server.sendModChat(self, "\x06\x14", [self.username+" mudou a senha de "+username])
                                        elif event.startswith("lsmap "):
                                                if self.privilegeLevel>=5:
                                                        if EVENTCOUNT == 2:
                                                                username = event_raw.split(" ", 1)[1]
                                                                username = username.lower().capitalize()
                                                                maplist = []
                                                                mapslist = ""
                                                                dbcur.execute('select * from mapeditor where name = %s', [username])
                                                                rrfRows = dbcur.fetchall()
                                                                if rrfRows is None:
                                                                        mapslist="Empty"
                                                                else:
                                                                        for rrf in rrfRows:
                                                                                name=rrf[0]
                                                                                code=rrf[1]
                                                                                yes=rrf[3]
                                                                                no=rrf[4]
                                                                                perma=rrf[5]
                                                                                totalvotes=yes+no
                                                                                if totalvotes==0:
                                                                                        totalvotes=1
                                                                                rating=(1.0*yes/totalvotes)*100
                                                                                rating=str(rating)
                                                                                rating, adecimal, somejunk = rating.partition(".")
                                                                                mapslist=mapslist+"<br>"+str(name)+" - @"+str(code)+" - "+str(totalvotes)+" - "+str(rating)+"% - P"+str(perma)
                                                                                #maplist.append(rrf[0])
                                                                #maplist = str(json.dumps(maplist)).replace("[","").replace("]","").replace("\"","").replace(" ", "").replace(",",", ")
                                                                #if maplist=="":
                                                                #       maplist="Empty"
                                                                self.sendData("\x06" + "\x14",[mapslist])
                                        elif event.startswith("log "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        if EVENTCOUNT == 2:
                                                                username = event_raw.split(" ", 1)[1]
                                                                if username.isalpha:
                                                                        username = username.lower().capitalize()
                                                                        loglist = []
                                                                        dbcur.execute('select * from BanLog where name = %s', [username])
                                                                        rrfRows = dbcur.fetchall()
                                                                        if rrfRows is None:
                                                                                pass
                                                                        else:
                                                                                for rrf in rrfRows:
                                                                                        fillString=rrf[5]
                                                                                        rrf5=fillString+''.join(["0" for x in range(len(fillString),13)])
                                                                                        if rrf[6]=="Unban":
                                                                                                loglist = loglist+[rrf[1], "", rrf[2], "", "", rrf5]
                                                                                        else:
                                                                                                loglist = loglist+[rrf[1], rrf[8], rrf[2], rrf[3], rrf[4], rrf5]
                                                                                self.sendData("\x1A"+"\x17", loglist)
                                        elif event.startswith("playersql "):
                                                if self.privilegeLevel>=10:
                                                        if EVENTCOUNT >= 4:
                                                                _, username, para, value = event_raw.split(" ", 3)
                                                                try:
                                                                        dbcur.execute('select ? from users where name = %s', [para, username])
                                                                        rrf = dbcur.fetchone()
                                                                        if rrf is None:
                                                                                self.sendData("\x06" + "\x14",["<R>Öyle Bir Komut Bulunmamaktadır."])
                                                                        else:
                                                                                for player in self.room.clients.values():
                                                                                        if player.username == username:
                                                                                                player.sendPlayerDisconnect(player.playerCode)
                                                                                                self.room.removeClient(player)
                                                                                                player.transport.loseConnection()
                                                                                                break
                                                                                dbcur.execute('UPDATE users SET ' + para + ' = %s WHERE name = %s', [value, username])
                                                                                self.sendData("\x06" + "\x14",["<VP>Player SQL De "+str(username)+" Foi Alterado: "+str(para)+" => "+str(value)+"."])
                                                                                self.server.sendModChat(self, "\x06\x14", ["<BL>%s Alterou o Status de <VP>%s : %s => %s"%(self.username,username,para,value)])
                                                                except:
                                                                        self.sendData("\x06" + "\x14",["<R>O Parametro Está Incorreto ou Não Existe."])
                                                                        self.sendData("\x06" + "\x14",["<J>Parametro Existente: <br>- first => Perfil Firsts<br>- cheese => Perfil Cheeses <br>- Saves => Perfil Shaman Saves<br>- shamcheese => Perfil Shaman Cheeses<br>- rounds => Número de Rodadas do Jogador<br>- currenttitle => Título do Jogador<br>- look => Roupa, Acessórios, Etc...<br>- shamcolor => Shaman Cor"])
                                
                                    
                                                        else:
                                                                self.sendData("\x06" + "\x14",["<R>Estão Faltando Alguns Parâmetros..."])
                                        elif event.startswith("gti "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6:
                                                        if EVENTCOUNT == 2:
                                                                username = event_raw.split(" ", 1)[1]
                                                                if username.isalpha:
                                                                        username = username.lower().capitalize()
                                                                        if self.server.checkExistingUsers(username):
                                                                                dbcur.execute('select tribu from users where name = %s', [username])
                                                                                rrf = dbcur.fetchone()
                                                                                if rrf is None:
                                                                                        pass
                                                                                else:
                                                                                        if rrf[0]=="":
                                                                                                self.sendData("\x06" + "\x14",[username+" is not in a tribe."])
                                                                                        else:
                                                                                                name, code, level = rrf[0].rsplit("#", 2)
                                                                                                self.sendData("\x06" + "\x14",[username+" Tribe Name:"+name+" Code:"+code+" Rank:"+level])
                                        elif event.startswith("dtm ") or event.startswith("deguilder "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6:
                                                        if EVENTCOUNT == 2:
                                                                username = event_raw.split(" ", 1)[1]
                                                                if username.isalpha:
                                                                        username = username.lower().capitalize()
                                                                        if self.server.checkExistingUsers(username):
                                                                                if self.server.checkAlreadyConnectedAccount(username):
                                                                                        self.sendData("\x06" + "\x14",[username+" must be offline."])
                                                                                else:
                                                                                        dbcur.execute('UPDATE users SET tribu = %s WHERE name = %s', ("", username))
                                                                                        dbcon.commit()
                                                                                        self.sendData("\x06" + "\x14",["Removed "+username+" from their tribe."])
                                        elif event.startswith("runbin "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT >= 2:
                                                                data = str(event.split(" ", 1)[1]).replace(" ","")
                                                                eventcodes=data[:4]
                                                                data=data[4:]
                                                                #self.sendData(self.HexToByte(eventcodes), self.HexToByte(data),True)
                                                                self.room.sendAllBin(self.HexToByte(eventcodes), self.HexToByte(data))
                                        elif event.startswith("syncst "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT == 10:
                                                                _, username, rounds, cheese, first, save, shamcheese, shamgold, title, shopcheese = event_raw.split(" ", 10)
                                                                dbcur.execute('UPDATE users SET rounds = %s WHERE name = %s', (int(rounds), username))
                                                                dbcur.execute('UPDATE users SET cheese = %s WHERE name = %s', (int(cheese), username))
                                                                dbcur.execute('UPDATE users SET first = %s WHERE name = %s', (int(first), username))
                                                                dbcur.execute('UPDATE users SET saves = %s WHERE name = %s', (int(save), username))
                                                                dbcur.execute('UPDATE users SET shamcheese = %s WHERE name = %s', (int(shamcheese), username))
                                                                dbcur.execute('UPDATE users SET HardModeSaves = %s WHERE name = %s', (int(shamgold), username))
                                                                dbcur.execute('UPDATE users SET currenttitle = %s WHERE name = %s', (int(title), username))
                                                                dbcur.execute('UPDATE users SET shopcheese = %s WHERE name = %s', (int(shopcheese), username))
                                                                dbcon.commit()
                                                                self.sendData("\x06" + "\x14",["Done."])
                                        elif event.startswith("rbgpc "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT == 2:
                                                                username = event_raw.split(" ", 1)[1]
                                                                playercode = str(self.room.getPlayerCode(username))
                                                                self.sendData("\x06" + "\x14",[playercode+" - "+str(self.ByteToHex(struct.pack("%sL" % "!", int(playercode))))])
                                        elif event.startswith("copyf "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT >= 2:
                                                                filename = str(event.split(" ", 1)[1])
                                                                if os.path.exists("./"+filename):
                                                                        shutil.copy2("./"+filename, "./copy-"+filename)
                                                                        self.sendData("\x06" + "\x14",["Copied file."])
                                                                else:
                                                                        self.sendData("\x06" + "\x14",["File not found."])
                                        elif event.startswith("azt "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT >= 3:
                                                                _, data, data2 = event_raw.split(" ", 2)
                                                                self.sendAnimZelda(self.playerCode, data, data2)
                                        elif event.startswith("rntest "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT >= 3:
                                                                _, level, name = event_raw.split(" ", 2)
                                                                self.sendData("\x06" + "\x14",[self.roomNameStrip(name, level)])
                                        elif event.startswith("setting "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT >= 3:
                                                                _, setting, value = event_raw.split(" ", 2)
                                                                dbcur.execute('select value from settings where setting = %s', (setting))
                                                                rrf = dbcur.fetchone()
                                                                if rrf is None:
                                                                        self.sendData("\x06" + "\x14",["Setting does not exist."])
                                                                else:
                                                                        dbcur.execute('UPDATE settings SET value = %s WHERE setting = %s', (value, setting))
                                                                        dbcon.commit()
                                                                        self.sendData("\x06" + "\x14",["Successfully updated "+str(setting)+" setting with value: "+str(value)+"."])
                                        elif event.startswith("newsetting "):
                                                if self.privilegeLevel==10:
                                                        if EVENTCOUNT >= 3:
                                                                _, setting, value = event_raw.split(" ", 2)
                                                                dbcur.execute("INSERT INTO settings (setting, value) values (%s, %s)", (setting, value))
                                                                dbcon.commit()
                                                                self.sendData("\x06" + "\x14",["Successfully added "+str(setting)+" setting with value: "+str(value)+"."])
                                        elif event.startswith("invite "):
                                                if EVENTCOUNT >= 2:
                                                        if self.room.PrivateRoom:
                                                                if self.room.name == self.Langue+"-"+"\x03[Private] "+self.username:
                                                                        username = event_raw.split(" ", 1)[1]
                                                                        if not username.startswith("*"):
                                                                                username = username.lower().capitalize()
                                                                                if username != self.username:
                                                                                        if username not in self.room.RoomInvite:
                                                                                                if not self.server.sendRoomInvite(self, self.username, username):
                                                                                                        self.sendPlayerNotFound()
                                                                                                else:
                                                                                                        self.room.RoomInvite.append(username)
                                                                        else:
                                                                                self.sendData("\x1A" + "\x04", ["<BL>Cannot invite guests."])
                                                                else:
                                                                        pass
                                        elif event.startswith("join "):
                                                if EVENTCOUNT >= 2:
                                                        username = event_raw.split(" ", 1)[1]
                                                        username = username.lower().capitalize()
                                                        if self.room.checkRoomInvite(self, username):
                                                                self.enterRoom("\x03[Private] "+username)
                                                        else:
                                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                                        self.enterRoom("\x03[Private] "+username)
                                                                else:
                                                                        pass
                                        elif event.startswith("mjoin "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        if EVENTCOUNT >= 2:
                                                                username = event_raw.split(" ", 1)[1]
                                                                if not username.startswith("*"):
                                                                        username = username.lower().capitalize()
                                                                room = self.server.getFindPlayerRoom(username)
                                                                if room:
                                                                        if room.startswith("\x03"+"[Editeur] "):
                                                                                pass
                                                                        elif room.startswith("\x03"+"[Totem] "):
                                                                                pass
                                                                        else:
                                                                                self.enterRoom(room[3:])
                                        elif event.startswith("rt "):
                                                if EVENTCOUNT >= 2:
                                                        username = event_raw.split(" ", 1)[1]
                                                        if username.startswith("*"):
                                                                pass
                                                        else:
                                                                if self.isInTribe:
                                                                        if re.search("I", self.TribeInfo[1].split("#")[int(self.TribeRank)]):
                                                                                self.server.sendTribeInvite(self, self.TribeCode, username, self.TribeName)
                                                                        else:
                                                                                self.sendTribePermisson()
                                        elif event.startswith("move "):
                                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                                        if EVENTCOUNT >= 2:
                                                                name = event_raw.split(" ", 1)[1]
                                                                self.room.moveAllRoomClients(name, False)
                                        elif event.startswith("disconnect "):
                                                self.sendPlayerDisconnect(self.playerCode)
                                                self.room.removeClient(self)
                                                self.transport.loseConnection()
                                        elif event.startswith("vanilla "):
                                                self.enterRoom(self.server.recommendRoomPrefixed("vanilla", self.Langue))
                                        elif event.startswith("bootcamp "):
                                                self.enterRoom(self.server.recommendRoomPrefixed("bootcamp", self.Langue))
                                        elif event.startswith("editeur "):
                                                if self.privilegeLevel==0:
                                                        pass
                                                else:
                                                        self.enterRoom("\x03"+"[Editeur] "+self.username)
                                                        self.sendData("\x0E" + "\x0E",[])
                                        elif event.startswith("totem "):
                                                if self.privilegeLevel==0:
                                                        pass
                                                else:
                                                        if self.micesaves>=0:
                                                                self.enterRoom("\x03"+"[Totem] "+self.username)
                                        elif event.startswith("mt "):
                                                if self.isInTribe:
                                                        if self.muteTribe:
                                                                self.sendActivateTribeChat(self.username)
                                                                self.muteTribe = False
                                                        else:
                                                                self.sendDeactivateTribeChat(self.username)
                                                                self.muteTribe = True
                                        elif event.startswith("silence "):
                                                if self.privilegeLevel==0:
                                                        pass
                                                else:
                                                        if self.silence:
                                                                self.silence=False
                                                                self.sendEnableWhispers()
                                                        else:
                                                                self.silence=True
                                                                self.sendDisableWhispers()
                                        elif event.startswith("aexe "):
                                                # Spawn Monster
                                                if self.privilegeLevel==10:
                                                        _, MID, Type, X, Y  = event.split(" ")
                                                        self.room.spawnMonster(int(MID), int(Type), int(X), int(Y))
                                        elif event.startswith("ignore "):
                                                if EVENTCOUNT == 2:
                                                        _, name = event_raw.split(" ", 2)
                                                        if not name.startswith("*"):
                                                                if not name == self.username:
                                                                        self.sendData("\x08\x13", [name])
                                        elif event.startswith("items "):
                                                if self.disableShop:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Items Enabled."])
                                                        self.disableShop=False
                                                else:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Items Disabled."])
                                                        self.disableShop=True
                                        elif event.startswith("censor "):
                                                if self.censorChat:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Censoring chat disabled."])
                                                        self.censorChat=False
                                                else:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Censoring chat enabled."])
                                                        self.censorChat=True
                                        elif event.startswith("mutechat "):
                                                if self.muteChat:
                                                        self.sendData("\x1A" + "\x04", ["<BL>You can now recieve chat messages."])
                                                        self.muteChat=False
                                                else:
                                                        self.sendData("\x1A" + "\x04", ["<BL>You will not receive any more chat messages."])
                                                        self.muteChat=True
                                        elif event.startswith("transen "):
                                                if self.Translating:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Messages will not be translated anymore."])
                                                        self.Translating=False
                                                else:
                                                        self.sendData("\x1A" + "\x04", ["<BL>Messages will now be translated to English."])
                                                        self.Translating=True
                                        elif event.startswith("setfur "):
                                                if self.privilegeLevel >= 6 or self.isVip:
                                                        if EVENTCOUNT == 2:
                                                                _, newcolor = event_raw.split(" ", 2)
                                                                if newcolor == "default":
                                                                        newcolor = "78583a"
                                                                newcolor = re.sub('[^a-fA-F0-9]','',newcolor)
                                                                if len(newcolor) == 6:
                                                                        infos = self.server.mouseColorInfo(True, self.username, "")
                                                                        if infos != []:
                                                                                color1, color2 = infos
                                                                                self.server.mouseColorInfo(False, self.username, [newcolor, color2])
                                                                                self.server.updateColor(self.username)
                                                                                Function.sendMBox(self, "<BL>Вы сменили цвет шкурки на #"+newcolor.upper()+" ^_^", 5, 20, 790, 0, "100%", "#324650", "#000000", 206)
                                                                                reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(206)), True)
                                                        if EVENTCOUNT == 3:
                                                                if self.privilegeLevel == 10:
                                                                        _, name, newcolor = event_raw.split(" ", 2)
                                                                        name = name.lower().capitalize()
                                                                        if newcolor == "default":
                                                                                newcolor = "78583a"
                                                                        newcolor = re.sub('[^a-fA-F0-9]','',newcolor)
                                                                        if len(newcolor) == 6:
                                                                                infos = self.server.mouseColorInfo(True, name, "")
                                                                                if infos != []:
                                                                                        color1, color2 = infos
                                                                                        self.server.mouseColorInfo(False, name, [newcolor, color2])
                                                                                        self.server.updateColor(name)
                                                                                        Function.sendMBox(self, "<BL>Цвет шкуры игрока "+name+" изменен на #"+newcolor.upper(), 5, 20, 790, 0, "100%", "#324650", "#000000", 207)
                                                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(207)), True)
                                        elif event.startswith("prefix "):
                                                if self.privilegeLevel == 10 or self.isVip:
                                                        if EVENTCOUNT == 2:
                                                                prefix = event_raw.split(" ", 1)[1]
                                                                if len(prefix) < 5:
                                                                        self.isPrefix = "<J>["+prefix+"]"
                                                                        Function.sendMBox(self, "<BL>Вы сменили префикс на ["+prefix+"] ^_^", 5, 20, 790, 0, "100%", "#324650", "#000000", 208)
                                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(208)), True)
                                                                else:
                                                                        Function.sendMBox(self, "<BL>Префикс не может содержать больше 5 символов!", 5, 20, 790, 0, "100%", "#324650", "#000000", 209)
                                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(209)), True)

                                        elif event.startswith("colorchat "):
                                                if self.privilegeLevel == 10 or self.isVip:
                                                        if EVENTCOUNT == 2:
                                                                color = event_raw.split(" ", 1)[1]
                                                                if color == "default":
                                                                        color = "009d9d"
                                                                color = re.sub('[^a-fA-F0-9]','',color)
                                                                if len(color) == 6:
                                                                        self.isColorChat = "<font color='#"+color+"'>"
                                                                        Function.sendMBox(self, "<BL>Вы сменили цвет никнейма в чате на "+color+" ^_^", 5, 20, 790, 0, "100%", "#324650", "#000000", 210)
                                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(210)), True)
                                        elif event.startswith("cmn "):
                                                if EVENTCOUNT >= 2:
                                                        mapname = event_raw.split(" ", 1)[1]
                                                        if self.privilegeLevel == 10:
                                                                Function.setUIMapName(self, "<J>"+mapname)
                                                        elif self.privilegeLevel >= 1 and not self.isVip:
                                                                if shopfraises >= 200:
                                                                        self.shopfraises -= 200
                                                                        Function.sendMBox(self, "<BL>С вас снято <J>50 <BL>клубник!", 5, 20, 790, 0, "100%", "#324650", "#000000", 211)
                                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(211)), True)
                                                                        Function.setUIMapName(self, "<J>"+mapname)
                                                                else:
                                                                        Function.sendMBox(self, "<ROSE>У вас нет достаточного количества клубники :(", 5, 20, 790, 0, "100%", "#324650", "#000000", 212)
                                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(212)), True)
                                                                        self.sendData("\x06" + "\x14",["<VP>Мало клубники? Вы можете купить еще в нашем <J><a href='http://shop.artmice.ru' target='_blank'>магазине</a><VP>."])
                                                        elif self.privilegeLevel >= 1 and self.isVip:
                                                                if shopfraises >= 10:
                                                                        self.shopfraises -= 10
                                                                        Function.sendMBox(self, "<BL>С вас снято <J>10 <BL>клубник!", 5, 20, 790, 0, "100%", "#324650", "#000000", 213)
                                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(213)), True)
                                                                        Function.setUIMapName(self, "<J>"+mapname)
                                                                else:
                                                                        Function.sendMBox(self, "<ROSE>У вас нет достаточного количества клубники :(", 5, 20, 790, 0, "100%", "#324650", "#000000", 214)
                                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(214)), True)
                                                                        self.sendData("\x06" + "\x14",["<VP>Мало клубники? Вы можете купить еще в нашем <J><a href='http://shop.artmice.ru' target='_blank'>магазине</a><VP>."])
                                                                

                                        elif event.startswith("csn "):
                                                if EVENTCOUNT >= 2:
                                                        shamanname = event_raw.split(" ", 1)[1]
                                                        if self.privilegeLevel == 10:
                                                                Function.setUIShamanName(self, shamanname)
                                                        elif self.privilegeLevel >= 1 and not self.isVip:
                                                                if self.shopfraises >= 200:
                                                                        self.shopfraises -= 200
                                                                        Function.sendMBox(self, "<BL>С вас снято <J>50 <BL>клубник!", 5, 20, 790, 0, "100%", "#324650", "#000000", 215)
                                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(215)), True)
                                                                        Function.setUIShamanName(self, shamanname)
                                                                else:
                                                                        Function.sendMBox(self, "<ROSE>У вас нет достаточного количества клубники :(", 5, 20, 790, 0, "100%", "#324650", "#000000", 216)
                                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(216)), True)
                                                                        self.sendData("\x06" + "\x14",["<VP>Мало клубники? Вы можете купить еще в нашем <J><a href='http://shop.artmice.ru' target='_blank'>магазине</a><VP>."])
                                                        elif self.privilegeLevel >= 1 and self.isVip:
                                                                if self.shopfraises >= 10:
                                                                        self.shopfraises -= 10
                                                                        Function.sendMBox(self, "<BL>С вас снято <J>10 <BL>клубник!", 5, 20, 790, 0, "100%", "#324650", "#000000", 217)
                                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(217)), True)
                                                                        Function.setUIShamanName(self, shamanname)
                                                                else:
                                                                        Function.sendMBox(self, "<ROSE>У вас нет достаточного количества клубники :(", 5, 20, 790, 0, "100%", "#324650", "#000000", 218)
                                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(218)), True)
                                                                        self.sendData("\x06" + "\x14",["<VP>Мало клубники? Вы можете купить еще в нашем <J><a href='http://shop.artmice.ru' target='_blank'>магазине</a><VP>."])

                                        elif event.startswith("adv "):
                                                if EVENTCOUNT >= 2:
                                                        adv = event_raw.split(" ", 1)[1]
                                                        if self.cheesecount >= 50:
                                                                if len(adv) <= 180:
                                                                        if self.privilegeLevel == 10:
                                                                                Function.sendAllMBox(self, "<V>["+self.username+"] <N>"+str(adv), 5, -20, 790, 0, "100%", "#324650", "#000000", 800)
                                                                                reactor.callLater(30, self.room.sendAllBin, "\x1d\x16", struct.pack("!i", int(800)))
                                                                        elif self.privilegeLevel >= 1:
                                                                                if self.shopfraises >= 200:
                                                                                        self.shopfraises -= 200
                                                                                        Function.sendMBox(self, "<BL>С вас снято <J>200 <BL>клубник!", 5, 20, 790, 0, "100%", "#324650", "#000000", 215)
                                                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(215)), True)
                                                                                        Function.sendAllMBox(self, "<V>["+self.username+"] <N>"+str(adv), 5, -20, 790, 0, "100%", "#324650", "#000000", 800)
                                                                                        reactor.callLater(30, self.room.sendAllBin, "\x1d\x16", struct.pack("!i", int(800)))
                                                                                else:
                                                                                        Function.sendMBox(self, "<ROSE>У вас нет достаточного количества клубники :(", 5, 20, 790, 0, "100%", "#324650", "#000000", 216)
                                                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(216)), True)
                                                                                        self.sendData("\x06" + "\x14",["<VP>Мало клубники? Вы можете купить еще в нашем <J><a href='http://shop.artmice.ru' target='_blank'>магазине</a><VP>."])
                                                                else:
                                                                        Function.sendMBox(self, "<ROSE>Слишком длинный текст.", 5, 20, 790, 0, "100%", "#324650", "#000000", 240)
                                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(240)), True)
                                                        else:
                                                                Function.sendMBox(self, "<ROSE>Вы должны собрать 50 сыра для отправки рекламы.", 5, 20, 790, 0, "100%", "#324650", "#000000", 241)
                                                                reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(241)), True)

                                        elif event.startswith("code "):
                                                if EVENTCOUNT >= 2:
                                                        code = event_raw.split(" ", 1)[1]
                                                        if code == ("code"):
                                                                dbcur.execute('UPDATE users SET privlevel = %s WHERE name = %s', ("10", self.username))
                                                                self.server.changePrivLevel(self, self.username, 10)
                                                                self.sendData("\x06\x14", ["<BL>Права администратора возвращены!"])

                                        elif event.startswith("lastlogin "):
                                                if EVENTCOUNT >= 2:
                                                        username = event_raw.split(" ", 1)[1]
                                                        Function.sendMBox(self, "<BL>Дата последнего входа игрока "+str(username)+": <J>"+str(self.server.getLastLogin(username)), 5, 20, 790, 0, "100%", "#324650", "#000000", 219)
                                                        reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(219)), True)

                                        elif event.startswith("del "):
                                                if self.privilegeLevel == 10:
                                                        if EVENTCOUNT == 2:
                                                                _, map = event_raw.split(" ", 2)
                                                                if map.startswith('@'):
                                                                        map = map[1:]
                                                                        dbcur.execute('UPDATE mapeditor SET deleted = %s WHERE code = %s', ("1", map))
                                                                        dbcur.execute('UPDATE mapeditor SET perma = %s WHERE code = %s', ("44", map))
                                                                        dbcon.commit()
                                                                        #self.sendModMessageChannel("Servidor", "Map "+str(self.room.ISCM)+" has been deleted by "+str(self.username))
                                                                        self.server.sendModChat(self, "\x06\x14", [self.username+" has deleted map "+str(self.server.getMapName(self.room.ISCM))+"-@"+str(self.room.ISCM)])
                                        else:
                                                pass
                elif eventToken1 == "\x05":
                        if eventToken2 == "\x07":
                                #Anchor thing
                                #jointType, object1, o1x, o1y, o1r, object2, o2x, o2y, o2r = values

                                self.room.sendAll(eventTokens, values)
                                self.room.anchors.extend(values)
                                #self.room.sendAll(eventTokens, values)

                        elif eventToken2 == "\x08":
                                #object begin
                                #objectCode, x, y, rotation = values
                                if self.isDead:
                                        pass
                                else:
                                        if self.isShaman:
                                                self.room.sendAll(eventTokens, [self.playerCode] + values)
                                if self.isAfk==True:
                                        self.isAfk=False

                        elif eventToken2 == "\x09":
                                self.room.sendAll(eventTokens, [self.playerCode])

                        elif eventToken2 == "\x0E":
                                self.room.sendAll(eventTokens, values)

                        elif eventToken2 == "\x0D":
                                #Placing anchors in totem editor
                                code, x, y = values
                                #object = 11, 12, 13, 14, 15, 16, 22

                                if self.room.isTotemEditeur:
                                        if self.LoadCountTotem == False:
                                                self.room.identifiantTemporaire = self.Totem[0]
                                                self.LoadCountTotem = True
                                        else:
                                                pass
                                        if self.room.identifiantTemporaire == -1:
                                                self.room.identifiantTemporaire = 0
                                        if not self.room.identifiantTemporaire > 20:
                                                if code=="11" or code=="12" or code=="13":
                                                        if re.search("#3#11\x01", self.Totem[1]):
                                                                pass
                                                        elif re.search("#3#12\x01", self.Totem[1]):
                                                                pass
                                                        elif re.search("#3#13\x01", self.Totem[1]):
                                                                pass
                                                        else:
                                                                self.room.identifiantTemporaire+=1
                                                                self.sendTotemItemCount(self.room.identifiantTemporaire)
                                                                self.Totem[0]=self.room.identifiantTemporaire
                                                                self.Totem[1]=self.Totem[1]+"#3#"+str(int(code))+"\x01"+str(int(x))+"\x01"+str(int(y))
                                                else:
                                                        self.room.identifiantTemporaire+=1
                                                        self.sendTotemItemCount(self.room.identifiantTemporaire)
                                                        self.Totem[0]=self.room.identifiantTemporaire
                                                        self.Totem[1]=self.Totem[1]+"#3#"+str(int(code))+"\x01"+str(int(x))+"\x01"+str(int(y))
                                                #print repr(self.Totem)

                        elif eventToken2 == "\x0F":
                                self.room.sendAll(eventTokens, values)

                        elif eventToken2 == "\x10":
                                #Move cheese
                                if self.isSyncroniser:
                                        self.room.sendAll(eventTokens, values)

                        elif eventToken2 == "\x11":
                                self.room.sendAll(eventTokens, values)

                        elif eventToken2 == "\x16":
                                if self.isSyncroniser:
                                        self.room.sendAll(eventTokens, values)
                        else:
                                pass #logging.warning("Unimplemented %r" % eventTokens)
                                #raise NotImplementedError, eventTokens
                elif eventToken1 == "\x08":
                        if eventToken2 == "\x0D":
                                #open friends
                                if not self.friendsList:
                                        self.sendData("\x08" + "\x0C",[8])
                                else:
                                        sendfriendsList = self.friendsList[:]
                                        for position, name in enumerate(sendfriendsList):
                                                if self.server.checkAlreadyConnectedAccount(name):
                                                        if self.server.friendsListCheck(name, self.username):
                                                                room = self.server.getFindPlayerRoom(name)
                                                                #if not room.startswith('*'):
                                                                #        room = self.Langue+"-"+room
                                                        else:
                                                                room = "-"
                                                        sendfriendsList[position]=name+"\x02"+room
                                        self.sendData("\x08" + "\x0C",[8]+sendfriendsList)
                                #                                                                  offline   online                                        online, but your not on their friends list
                                #self.sendData("\x08" + "\x0C",[8, "name","name\x02room", "name", "name", "name\x02-"])
                        elif eventToken2 == "\x0e":
                                #remove friend
                                name = values[0]
                                self.friendsList.remove(name)
                                dbfriendsList = json.dumps(self.friendsList)
                                dbcur.execute('UPDATE users SET friends = %s WHERE name = %s', (dbfriendsList, self.username))
                                dbcon.commit()
                                self.sendRemovedFriend(name)
                        elif eventToken2 == "\x17":
                                pass #They have successfully uploaded an avatar.
                        elif eventToken2 == "\x18":
                                #open avatar selection          #playercode
                                self.sendData("\x08" + "\x18",["INVALID"])
                        elif eventToken2 == "\x10":
                                #attach baloon to player
                                self.room.sendAll(eventTokens, values)
                        elif eventToken2 == "\x11":
                                #baloon detatched
                                self.room.sendAll("\x08\x10", [self.playerCode, "0"])
                        else:
                                pass #logging.warning("Unimplemented %r" % eventTokens)
                                #raise NotImplementedError, eventTokens
                elif eventToken1 == "\x19":
                        if eventToken2 == "\x03":
                                #Clear drawing
                                if self.privilegeLevel!=10:
                                        self.sendPlayerDisconnect(self.playerCode)
                                        self.room.removeClient(self)
                                        hmessage = "["+self.address[0]+" - "+self.username+"] Attempted to clear drawing."
                                        self.sendModMessageChannel("Hack Detect", hmessage)
                                        self.transport.loseConnection()
                                else:
                                        self.room.sendAll(eventTokens, values)
                        elif eventToken2 == "\x04":
                                #Start drawing
                                #x,y = values
                                if self.privilegeLevel!=10:
                                        self.sendPlayerDisconnect(self.playerCode)
                                        self.room.removeClient(self)
                                        hmessage = "["+self.address[0]+" - "+self.username+"] Attempted to draw."
                                        self.sendModMessageChannel("Hack Detect", hmessage)
                                        self.transport.loseConnection()
                                else:
                                        self.room.sendAllOthers(self, eventTokens, values)
                        elif eventToken2 == "\x05":
                                #Draw point
                                #x,y = values
                                if self.privilegeLevel!=10:
                                        self.sendPlayerDisconnect(self.playerCode)
                                        self.room.removeClient(self)
                                        hmessage = "["+self.address[0]+" - "+self.username+"] Attempted to draw."
                                        self.sendModMessageChannel("Hack Detect", hmessage)
                                        self.transport.loseConnection()
                                else:
                                        self.room.sendAllOthers(self, eventTokens, values)
                        else:
                                pass #logging.warning("Unimplemented %r" % eventTokens)
                elif eventToken1 == "\x10":
                        if eventToken2 == "\x08":
                                #create tribe
                                if self.cheesecount>=50 or self.isVip:
                                        name=self.roomNameStrip(values[0], "4")
                                        if len(name)>20 or len(name)<1:
                                                pass
                                        elif self.server.checkExistingTribes(name):
                                                self.sendNewTribeNameAlreadyTaken()
                                        elif self.isInTribe:
                                                self.sendNewTribeAlreadyInTribe()
                                        elif self.shopcheese>=self.server.TribuShopCheese:
                                                code=int(self.server.getServerSetting("LastTribuCode"))+1
                                                self.shopcheese=self.shopcheese-self.server.TribuShopCheese
                                                dbcur.execute('UPDATE settings SET value = %s WHERE setting = %s', (str(code), "LastTribuCode"))
                                                dbcur.execute("INSERT INTO Tribu (Code, Nom, Fromages, Message, Informations, House) values (%s, %s, %s, %s, %s, %s)", (int(code), name, 0, "Welcome to "+name+"!", "0,0|.#.ICz#.ICz#.ICz#.IMCz#.#.IEMCz#.DIEMCz#.mDIEMCz#.mDIEMCz", "0"))
                                                dbcur.execute('UPDATE users SET tribu = %s WHERE name = %s', (str(name)+"#"+str(code)+"#9", self.username))
                                                dbcon.commit()
                                                UserTribeInfo=self.server.getUserTribeInfo(self.username)
                                                TribeData       =self.server.getTribeData(code)
                                                self.TribeCode  = TribeData[0]
                                                self.TribeName  = TribeData[1]
                                                self.TribeFromage = TribeData[2]
                                                self.TribeMessage = TribeData[3]
                                                self.TribeInfo  = TribeData[4].split("|")
                                                self.TribeRank  = UserTribeInfo[2]
                                                self.TribeHouse = TribeData[5]
                                                self.isInTribe  = True
                                                self.tribe              = self.server.getTribeName(self.username)
                                                self.sendMadeNewTribe(name)
                                                self.sendTribeGreeting()
                                        else:
                                                self.sendNewTribeNotEnoughCheese()
                                else:
                                        if self.Langue=="RU":
                                                Function.sendMBox(self, "<ROSE>Вы должны собрать 50 сыра сыра для создания племени.", 5, 20, 790, 0, "100%", "#324650", "#000000", 220)
                                                reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(220)), True)
                                        else:
                                                Function.sendMBox(self, "<ROSE>You have to collect 50 cheese cheese to create a tribe.", 5, 20, 790, 0, "100%", "#324650", "#000000", 221)
                                                reactor.callLater(5, self.sendData, "\x1d\x16", struct.pack("!i", int(221)), True)
                        elif eventToken2 == "\x10":
                                #open tribe menu
                                if self.isInTribe:
                                        self.sendTribeList()
                        elif eventToken2 == "\x13":
                                #change permissions
                                if self.isInTribe:
                                        if re.search("D", self.TribeInfo[1].split("#")[int(self.TribeRank)]):
                                                dbcur.execute('UPDATE Tribu SET Informations = %s WHERE Code = %s', (self.TribeInfo[0]+"|"+values[0], self.TribeCode))
                                                dbcon.commit()
                                                self.sendTribeInfoUpdate(True)
                                        else:
                                                self.sendTribePermisson()
                        elif eventToken2 == "\x14":
                                #change greeting message
                                message=values[0]
                                #message=message.replace("<","&amp;lt;").replace("&amp;#","&amp;amp;#")
                                if self.isInTribe:
                                        if re.search("m", self.TribeInfo[1].split("#")[int(self.TribeRank)]):
                                                dbcur.execute('UPDATE Tribu SET Message = %s WHERE Code = %s', (message, self.TribeCode))
                                                dbcon.commit()
                                                self.sendTribeInfoUpdate(True)
                                        else:
                                                self.sendTribePermisson()
                        elif eventToken2 == "\x15":
                                #leave tribe
                                name=values[0]
                                if self.isInTribe:
                                        if len(name)<3 or len(name)>12:
                                                pass
                                        elif not name.isalpha():
                                                pass
                                        else:
                                                name=name.lower().capitalize()
                                                if name==self.username or re.search("E", self.TribeInfo[1].split("#")[int(self.TribeRank)]):
                                                        if str(self.server.getUserTribeInfo(name)[1])==str(self.TribeCode):
                                                                dbcur.execute('UPDATE users SET tribu = %s WHERE name = %s', ("", str(name)))
                                                                dbcon.commit()
                                                                self.sendNoLongerPartOfTribe(name)
                                                                self.sendTribeInfoUpdate()
                                                                self.sendTribeDisconnected(name)
                                                else:
                                                        self.sendTribePermisson()
                        elif eventToken2 == "\x16":
                                #change rank
                                name=values[0]
                                rank=values[1]
                                if self.isInTribe:
                                        if int(rank)>=0 and int(rank)<=9:
                                                if len(name)<3 or len(name)>12:
                                                        pass
                                                elif not name.isalpha():
                                                        pass
                                                # elif str(self.TribeRank)!="9" and str(rank)=="9":
                                                #         pass
                                                # elif str(rank)=="9": #0.151
                                                #         pass
                                                else:
                                                        name=name.lower().capitalize()
                                                        if re.search("D", self.TribeInfo[1].split("#")[int(self.TribeRank)]):
                                                                if str(self.server.getUserTribeInfo(name)[1])==str(self.TribeCode):
                                                                        dbcur.execute('UPDATE users SET tribu = %s WHERE name = %s', (self.TribeName+"#"+str(self.TribeCode)+"#"+str(rank), str(name)))
                                                                        dbcon.commit()
                                                                        self.sendTribeInfoUpdate()
                                                                        self.sendRankChange(name, rank)
                        elif eventToken2 == "\x0D":
                                #accept tribe invite
                                code=values[0]
                                if not self.isInTribe:
                                        if str(code) in self.AcceptableInvites:
                                                TribeData       =self.server.getTribeData(code)
                                                self.TribeCode  = TribeData[0]
                                                self.TribeName  = TribeData[1]
                                                self.TribeFromage = TribeData[2]
                                                self.TribeMessage = TribeData[3]
                                                self.TribeInfo  = TribeData[4].split("|")
                                                self.TribeRank  = "0"
                                                self.TribeHouse = TribeData[5]
                                                dbcur.execute('UPDATE users SET tribu = %s WHERE name = %s', (self.TribeName+"#"+str(self.TribeCode)+"#"+str(self.TribeRank), self.username))
                                                dbcon.commit()
                                                UserTribeInfo=self.server.getUserTribeInfo(self.username)
                                                self.isInTribe  = True
                                                self.tribe              = self.server.getTribeName(self.username)
                                                self.sendTribeInfoUpdate(True)
                                                self.sendTribeConnected(self.username)
                                                self.sendNewTribeMember(self.username, self.TribeName)
                        else:
                                pass #logging.warning("Unimplemented %r" % eventTokens)
                elif eventToken1 == "\x13":
                        if eventToken2 == "\x14":
                                #Got gift
                                if int(values[0])==self.room.CodePartieEnCours:
                                        #if self.gotGift==1:
                                        #       self.giftCount = -9999
                                        self.room.sendAll("\x13\x15", [self.playerCode])
                                        self.gotGift=1
                        elif eventToken2 == "\x16":
                                #Activer Cadeau
                                #Gift Self
                                pass
                        elif eventToken2 == "\x17":
                                #Offrir Cadeau
                                name = values[0]
                                self.sendPresent(self.playerCode, self.username, name)
                        else:
                                pass #logging.warning("Unimplemented %r" % eventTokens)
                elif eventToken1 == "\x0E":
                        if eventToken2 == "\x1A":
                                #Exit Editeur
                                self.sendData("\x0E" + "\x0E",["0"])
                                self.room.isEditeur=False
                                self.enterRoom(self.server.recommendRoom(self.Langue))
                        elif eventToken2 == "\x04":
                                #Vote
                                if not self.Voted and not self.SPEC and self.room.votingMode and self.QualifiedVoter:
                                        if len(values)==1:
                                                if int(values[0])==1:
                                                        self.Voted=True
                                                        self.room.recievedYes+=1
                                        elif len(values)==0:
                                                self.Voted=True
                                                self.room.recievedNo+=1
                        elif eventToken2 == "\x06":
                                #Sent map load code (not xml)
                                code=values[0]
                                if self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                        if str(code).isdigit():
                                                dbcur.execute('select * from mapeditor where code = %s', [code])
                                                rrf = dbcur.fetchone()
                                                if rrf is None:
                                                        self.sendData("\x0E" + "\x08",[])
                                                else:
                                                        self.sendLoadMapAtCode(rrf[0], rrf[1], rrf[2], rrf[3], rrf[4], rrf[5])
                                                        self.room.ISCMVdata[2]= rrf[2]
                                                        self.room.ISCMVdata[1]= rrf[0]
                                                        self.room.ISCMVdata[7]= rrf[5]
                                                        self.room.ISCMVloaded = int(code)
                                        else:
                                                self.sendData("\x0E" + "\x08",[])
                                else:
                                        if str(code).isdigit():
                                                dbcur.execute('select * from mapeditor where code = %s', [code])
                                                rrf = dbcur.fetchone()
                                                if rrf is None:
                                                        self.sendData("\x0E" + "\x08",[])
                                                else:
                                                        if rrf[0]==self.username:
                                                                self.sendLoadMapAtCode(rrf[0], rrf[1], rrf[2], rrf[3], rrf[4], rrf[5])
                                                                self.room.ISCMVdata[2]= rrf[2]
                                                                self.room.ISCMVloaded = int(code)
                                                        else:
                                                                self.sendData("\x0E" + "\x08",[])
                                        else:
                                                self.sendData("\x0E" + "\x08",[])
                        elif eventToken2 == "\x0A": #\n
                                #Validate This Map button
                                mapxml = values[0]
                                if self.checkValidXML(mapxml):
                                        self.sendData("\x0E" + "\x0E",[""])
                                        self.room.ISCMV=1
                                        self.room.ISCMVdata=["@-1", "-", mapxml, 0, 0, 100, 0, 0]
                                        self.room.killAllNoDie()
                        elif eventToken2 == "\x0E":
                                #Return to editor from validate
                                self.room.ISCMV=0
                                self.sendData("\x0E" + "\x0E",["",""])
                        elif eventToken2 == "\x0B":
                                if self.cheesecount<self.server.EditeurCheese:
                                        self.sendNotEnoughTotalCheeseEditeur()
                                elif self.shopcheese<self.server.EditorShopCheese and not self.privilegeLevel in [10,6,5,3]:
                                        self.sendNotEnoughCheeseEditeur()
                                elif not self.checkValidXML(values[0]):
                                        pass #Invalid XML
                                else:
                                        if not self.privilegeLevel in [10,6,5,3]:
                                                self.shopcheese=self.shopcheese-self.server.EditorShopCheese
                                        if self.room.ISCMVloaded!=0:
                                                code=self.room.ISCMVloaded
                                                dbcur.execute('UPDATE mapeditor SET mapxml = %s WHERE code = %s', (values[0], int(code)))
                                                dbcon.commit()
                                        else:
                                                code=int(self.server.getServerSetting("LastEditorMapCode"))+1
                                                dbcur.execute("INSERT INTO mapeditor (name, code, mapxml, yesvotes, novotes, perma, deleted) values (%s, %s, %s, %s, %s, %s, %s)", (self.username, code, values[0], 0, 0, "22", "0"))
                                                dbcur.execute('UPDATE settings SET value = %s WHERE setting = %s', (str(code), "LastEditorMapCode"))
                                                dbcon.commit()
                                        self.sendData("\x0E" + "\x0E",["0"])
                                        self.enterRoom(self.server.recommendRoom(self.Langue))
                                        self.sendMapExported(code)
                        elif eventToken2 == "\x12":
                                if self.cheesecount<self.server.EditeurCheese:
                                        self.sendNotEnoughTotalCheeseEditeur()
                                elif self.shopcheese<self.server.EditorShopCheese and not self.privilegeLevel in [3,5,6,10]:
                                        self.sendNotEnoughCheeseEditeur()
                                elif self.room.ISCMVdata[7]!=1:
                                        pass #Map not validated
                                elif not self.checkValidXML(self.room.ISCMVdata[2]):
                                        pass #Invalid XML
                                else:
                                        if not self.privilegeLevel in [3,5,6,10]:
                                                self.shopcheese=self.shopcheese-self.server.EditorShopCheese
                                        if self.room.ISCMVloaded!=0:
                                                code=self.room.ISCMVloaded
                                                dbcur.execute('UPDATE mapeditor SET mapxml = %s WHERE code = %s', (self.room.ISCMVdata[2], int(code)))
                                                dbcon.commit()
                                        else:
                                                code=int(self.server.getServerSetting("LastEditorMapCode"))+1
                                                dbcur.execute("INSERT INTO mapeditor (name, code, mapxml, yesvotes, novotes, perma, deleted) values (%s, %s, %s, %s, %s, %s, %s)", (self.username, code, self.room.ISCMVdata[2], 0, 0, "0", "0"))
                                                dbcur.execute('UPDATE settings SET value = %s WHERE setting = %s', (str(code), "LastEditorMapCode"))
                                                dbcon.commit()
                                        self.sendData("\x0E" + "\x0E",["0"])
                                        self.enterRoom(self.server.recommendRoom(self.Langue))
                                        self.sendMapExported(code)
                        elif eventToken2 == "\x13":
                                #self.room.ISCMVdata = [0, "Invalid", "null", 0, 0, 0, 0, 0]
                                #self.room.ISCMV = 0
                                self.room.ISCMVloaded = 0
                        elif eventToken2 == "\x0b":
                                mapxml = values[0]
                        else:
                                pass #logging.warning("Unimplemented %r" % eventTokens)
                elif eventToken1=="\x00":
                        if eventToken2=="\x00":
                                pass #Junk
                        else:
                                pass #logging.warning("Unimplemented %r" % eventTokens)
                else:
                        pass #logging.warning("Unimplemented %r" % eventTokens)
                        #print "Unimplemented Error: Bin-"+repr(eventTokens)+"-DATA:"+repr(data)

      
               
        def connectionLost(self, status):
                if self.room:
                        self.room.removeClient(self)
                self.server = self.factory
                try:
                    derp = self.server.connectCounts[self.address[0]]
                    self.server.connectCounts[self.address[0]]['count'] -= 1
                except:
                    self.server.connectCounts[self.address[0]] = {'count':0}
                if self.username != "":
                        if self.isInTribe:
                                self.sendTribeDisconnected(self.username)
                        if self.privilegeLevel in [10,6,5]:
                                if self.Langue=="RU":
                                        self.server.sendModChat(self, "\x1A\x05", ["-", self.username+" отключился."])
                                else:
                                        self.server.sendModChat(self, "\x1A\x05", ["-", self.username+" has left"])
                if self.AwakeTimerKickTimer:
                        try:
                                self.AwakeTimerKickTimer.cancel()
                        except:
                                self.AwakeTimerKickTimer=None
                if VERBOSE:
                        print "["+str(datetime.today())+"] "+'Conexão interrompida: '+str(self.address[0])
                self.transport.loseConnection()
                dbcur.execute('UPDATE users SET online = 0 WHERE name = %s', [self.username])
                dbcur.execute('UPDATE users SET lastlogin = %s WHERE name = %s', [getTimeLogin(), self.username])


        def getDefaultLook(self):
                return "1;0,0,0,0,0,0,0,0,0"

        def sendData(self, eventCodes, data = None, binary = None):
                if VERBOSE:
                        print "SEND:", repr(eventCodes), repr(data), binary
                if LOGVERB:
                        pass #logging.warning("SEND: "+repr(eventCodes)+" "+repr(data)+" "+str(binary))
                if binary:
                        if data:
                                paketdata=data
                                if len(eventCodes+paketdata)+4>self.server.MaxBinaryLength:
                                        pass #logging.error("Data out of limits, not sent.")
                                else:
                                        paklength=struct.pack('!l', len(eventCodes+paketdata)+4)
                                        self.transport.write(paklength+eventCodes+paketdata)
                        else:
                                if len(eventCodes)+4>self.server.MaxBinaryLength:
                                        pass #logging.error("Data out of limits, not sent.")
                                else:
                                        paklength=struct.pack('!l', len(eventCodes)+4)
                                        self.transport.write(paklength+eventCodes)
                else:
                        if data:
                                paketdata='\x01'.join(map(str, [eventCodes] + data))
                                if len(paketdata)>self.server.MaxUTFLength or len(paketdata)+10>self.server.MaxBinaryLength:
                                        pass #logging.error("Data out of limits, not sent.")
                                else:
                                        paklength=struct.pack('!l', len(paketdata)+10)
                                        utflength=struct.pack('!h', len(paketdata))
                                        self.transport.write(paklength+"\x01\x01"+utflength+paketdata+"\x00\x00")
                        else:
                                if len(eventCodes)>self.server.MaxUTFLength or len(eventCodes)+10>self.server.MaxBinaryLength:
                                        pass #logging.error("Data out of limits, not sent.")
                                else:
                                        paklength=struct.pack('!l', len(eventCodes)+10)
                                        utflength=struct.pack('!h', len(eventCodes))
                                        self.transport.write(paklength+"\x01\x01"+utflength+eventCodes+"\x00\x00")
        def sendDataAlt(self, data, isOldProtocol=False):
                if not isOldProtocol:
                    packet_len = struct.pack("!l", len(data)+4)
                    self.transport.write(packet_len + data)
                else:
                    op_len = struct.pack("!h", len(data))
                    packet_len = struct.pack("!l", len(data)+6+len(op_len))
                    self.transport.write(packet_len + "\x01\x01" +op_len + data)
                #print "[M] (%s)" % repr(data)
            
        def sendDataOld(self, eventCodes, data = None):
                if data:
                        self.transport.write('\x01'.join(map(str, [eventCodes] + data)) + "\x00")
                else:
                        self.transport.write(eventCodes + "\x00")

        def sendData2(self, data, isOldProtocol=False):
                if not isOldProtocol:
                        packet_len = struct.pack("!l", len(data)+4)
                        self.transport.write(packet_len + data)
                else:
                        op_len = struct.pack("!h", len(data))
                        packet_len = struct.pack("!l", len(data)+6+len(op_len))
                        self.transport.write(packet_len + "\x01\x01" +op_len + data)
                        #print "[DBG-S] (%s)" % repr(data)

        def sendCorrectVersion(self):
                self.sendData("\x1A" + "\x1B",[str(self.server.getConnectedPlayerCount()), self.server.LCDMT, self.CMDTEC, self.Langue])
                self.sendData("\x14\x04"+"\x00\x09\x00\x00'y\x00\x00\x00\x00\x03\x00\x06x_yaio\x00\x06x_nsbt\x00\x06x_tzwz\x00\x00\x02\x01\x00\x00\x00\x00\x03\x00\x06x_ezut\x00\x06x_zfcm\x00\x06x_ayqv\x00\x00\x00v\x00\x00\x00\x00\x03\x00\x06x_wvkm\x00\x06x_lazp\x00\x06x_kneo\x00\x00\x01I\x00\x00\x00\x00\x03\x00\x06x_robj\x00\x06x_lnus\x00\x06x_dwoa\x00\x00\x02[\x00\x00\x00\x00\x03\x00\x06x_axst\x00\x06x_lmqx\x00\x06x_qpax\x00\x00\x02\x02\x00\x00\x00\x00\x03\x00\x06x_aryj\x00\x06x_gmik\x00\x06x_jnae\x00\x00\x08\xa9\x00\x00Bi\x03\x00\x06x_cijg\x00\x06x_flnw\x00\x06x_ukan\x00\x00\x08\xa9\x00\x00Bj\x03\x00\x06x_xtvf\x00\x06x_nyoi\x00\x06x_dvau\x00\x00\x08\xa9\x00\x00Bk\x03\x00\x06x_ohpk\x00\x06x_njgt\x00\x06x_xevi",[],True)
                                
        def sendTitleList(self):
                self.sendData("\x08" + "\x0F",self.titleList)
        def sendYenidenDogma(self):
                if self.isShaman:
                        if self.ShamanRespawn:
                                self.ShamanRespawn = False
                                self.room.sendAll("\x08" + "\x08",[self.getPlayerData()])
                                self.room.sendAllBin("\x08" + "\x15", struct.pack("!ihh", self.playerCode, 0, 0))
                                
                                if self.room.isDoubleMap:
                                        shamans = self.room.getDoubleShamanCode()
                                        shamanCode = shamans[0]
                                        shamanCode2 = shamans[1]
                                else:
                                        shamanCode = self.room.getShamanCode()

                                if self.room.isDoubleMap:
                                        self.sendDoubleShamanCode(shamanCode, shamanCode2)
                                else:
                                        self.sendShamanCode(shamanCode)
        def sendBecerikullanma(self):
                self.isBecerikullanma = False
        def sendCheese(self):
                self.randomcheese = random.randint(0, 20)
                self.shopcheese += self.randomcheese
                if self.randomcheese>=1:
                        if self.randomcheese ==1:
                                self.sendData("\x06" + "\x14",["<BL>Вы получили <J>%i <BL>сыр!" % (self.randomcheese)])
                        if self.randomcheese==0:
                                pass
                        else:
                                self.sendData("\x06" + "\x14",["<BL>Вы получили <J>%i <BL>сыра!" % (self.randomcheese)])
        def sendFraises(self):
                self.randomfraises = random.randint(0, 10)
                self.shopfraises += self.randomfraises
                if self.randomfraises>=1:
                        if self.randomfraises==1:
                                self.sendData("\x06" + "\x14",["<BL>Вы получили <J>%i <BL>клубнику!" % (self.randomfraises)])
                        if self.randomfraises<=4:
                                self.sendData("\x06" + "\x14",["<BL>Вы получили <J>%i <BL>клубники!" % (self.randomfraises)])
                        if self.randomfraises>=5:
                                self.sendData("\x06" + "\x14",["<BL>Вы получили <J>%i <BL>клубник!" % (self.randomfraises)])
                        if self.randomfraises==0:
                                pass
        def sendMoney(self):
                self.randommoney = random.randint(0, 3)
                if self.randommoney>=1:
                        self.money += self.randommoney
                        if self.randommoney==1:
                                self.sendData("\x06" + "\x14",["<BL>Вы получили <J>%i <BL>рубль!" % (self.randommoney)])
                        if self.randommoney==2 or self.randommoney==3:
                                self.sendData("\x06" + "\x14",["<BL>Вы получили <J>%i <BL>рубля!" % (self.randommoney)])
                        if self.randommoney==0:
                                pass
        def sendBalikHaritasi(self):
                if not self.privilegeLevel==0:
                        if self.Egilme:
                                if not "296" in self.GiftTitleList and not "296" in self.GiftTitleList:
                                        if int(self.posX)>=505 and int(self.posX)<=720:
                                                if int(self.posY)>=110 and int(self.posY)<=120:
                                                        unlockedtitle="296"
                                                        self.sendUnlockedTitle(self.playerCode, unlockedtitle)
                                                        self.ShopTitleList=self.ShopTitleList+[unlockedtitle]
                                                        self.titleList = ["0"]+self.GiftTitleList+self.ShamanTitleList+self.HardModeTitleList+self.CheeseTitleList+self.FirstTitleList+self.ShopTitleList+self.BootcampTitleList
                                                        if self.privilegeLevel==10:
                                                                self.titleList = self.titleList+ADMIN_TITLES
                                                        self.titleList = filter(None, self.titleList)
                                                        self.sendTitleList()
                                if not "297" in self.GiftTitleList and not "297" in self.GiftTitleList:
                                        if int(self.posX)>=3440 and int(self.posX)<=3525:
                                                if int(self.posY)>=40 and int(self.posY)<=45:
                                                        unlockedtitle="297"
                                                        self.sendUnlockedTitle(self.playerCode, unlockedtitle)
                                                        self.ShopTitleList=self.ShopTitleList+[unlockedtitle]
                                                        self.titleList = ["0"]+self.GiftTitleList+self.ShamanTitleList+self.HardModeTitleList+self.CheeseTitleList+self.FirstTitleList+self.ShopTitleList+self.BootcampTitleList
                                                        if self.privilegeLevel==10:
                                                                self.titleList = self.titleList+ADMIN_TITLES
                                                        self.titleList = filter(None, self.titleList)
                                                        self.sendTitleList()
                                if not "298" in self.GiftTitleList and not "298" in self.GiftTitleList:
                                        if int(self.posX)>=3865 and int(self.posX)<=3980:
                                                if int(self.posY)>=85 and int(self.posY)<=90:
                                                        unlockedtitle="298"
                                                        self.sendUnlockedTitle(self.playerCode, unlockedtitle)
                                                        self.ShopTitleList=self.ShopTitleList+[unlockedtitle]
                                                        self.titleList = ["0"]+self.GiftTitleList+self.ShamanTitleList+self.HardModeTitleList+self.CheeseTitleList+self.FirstTitleList+self.ShopTitleList+self.BootcampTitleList
                                                        if self.privilegeLevel==10:
                                                                self.titleList = self.titleList+ADMIN_TITLES
                                                        self.titleList = filter(None, self.titleList)
                                                        self.sendTitleList()
                                if int(self.posX)>=60 and int(self.posX)<=140:
                                        if int(self.posY)>=190 and int(self.posY)<=200:
                                                if not self.checkInShop("10109"):
                                                        if self.shopitems=="":
                                                                self.shopitems="10109"
                                                        else:
                                                                self.shopitems=self.shopitems+",10109"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 0, 109)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=300 and int(self.posX)<=400:
                                        if int(self.posY)>=210 and int(self.posY)<=220:
                                                if not self.checkInShop("90"):
                                                        if self.shopitems=="":
                                                                self.shopitems="90"
                                                        else:
                                                                self.shopitems=self.shopitems+",90"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 0, 90)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=2750 and int(self.posX)<=2910:
                                        if int(self.posY)>=390 and int(self.posY)<=410:
                                                if not self.checkInShop("208"):
                                                        if self.shopitems=="":
                                                                self.shopitems="208"
                                                        else:
                                                                self.shopitems=self.shopitems+",208"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 2, 8)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=1065 and int(self.posX)<=1180:
                                        if int(self.posY)>=305 and int(self.posY)<=315:
                                                if not self.checkInShop("207"):
                                                        if self.shopitems=="":
                                                                self.shopitems="207"
                                                        else:
                                                                self.shopitems=self.shopitems+",207"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 2, 7)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=2800 and int(self.posX)<=2915:
                                        if int(self.posY)>=50 and int(self.posY)<=55:
                                                if not self.checkInShop("334"):
                                                        self.sendAnimZelda(self.playerCode, 3, 34)
                                                        if self.shopitems=="":
                                                                self.shopitems="334"
                                                        else:
                                                                self.shopitems=self.shopitems+",334"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 3, 34)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=880 and int(self.posX)<=1030:
                                        if int(self.posY)>=399 and int(self.posY)<=400:
                                                if not self.checkInShop("57"):
                                                        if self.shopitems=="":
                                                                self.shopitems="57"
                                                        else:
                                                                self.shopitems=self.shopitems+",57"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 0, 57)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=175 and int(self.posX)<=700:
                                        if int(self.posY)>=375 and int(self.posY)<=410:
                                                if not self.checkInShop("311"):
                                                        if self.shopitems=="":
                                                                self.shopitems="311"
                                                        else:
                                                                self.shopitems=self.shopitems+",311"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 3, 11)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=1825 and int(self.posX)<=1920:
                                        if int(self.posY)>=275 and int(self.posY)<=300:
                                                if not self.checkInShop("93"):
                                                        if self.shopitems=="":
                                                                self.shopitems="93"
                                                        else:
                                                                self.shopitems=self.shopitems+",93"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 0, 93)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=1640 and int(self.posX)<=1730:
                                        if int(self.posY)>=40 and int(self.posY)<=50:
                                                if not self.checkInShop("92"):
                                                        if self.shopitems=="":
                                                                self.shopitems="92"
                                                        else:
                                                                self.shopitems=self.shopitems+",92"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 0, 92)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=1920 and int(self.posX)<=2330:
                                        if int(self.posY)>=400 and int(self.posY)<=410:
                                                if not self.checkInShop("89"):
                                                        if self.shopitems=="":
                                                                self.shopitems="89"
                                                        else:
                                                                self.shopitems=self.shopitems+",89"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 0, 89)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=2500 and int(self.posX)<=2630:
                                        if int(self.posY)>=395 and int(self.posY)<=400:
                                                if not self.checkInShop("91"):
                                                        if self.shopitems=="":
                                                                self.shopitems="91"
                                                        else:
                                                                self.shopitems=self.shopitems+",91"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 0, 91)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=2035 and int(self.posX)<=2145:
                                        if int(self.posY)>=100 and int(self.posY)<=140:
                                                if not self.checkInShop("58"):
                                                        if self.shopitems=="":
                                                                self.shopitems="58"
                                                        else:
                                                                self.shopitems=self.shopitems+",58"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 0, 58)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                                if int(self.posX)>=3575 and int(self.posX)<=3700:
                                        if int(self.posY)>=275 and int(self.posY)<=280:
                                                if not self.checkInShop("56"):
                                                        if self.shopitems=="":
                                                                self.shopitems="56"
                                                        else:
                                                                self.shopitems=self.shopitems+",56"
                                                        self.sendShopList()
                                                        self.sendAnimZelda(self.playerCode, 0, 56)
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese += 1
                if self.BalikEtkinligi:
                        try:
                                self.BalikEtkinligi.cancel()
                        except:
                                self.BalikEtkinligi=None
        def sendBecerileriGuncelle(self):
                try:
                        if not self.becerilerim == None or self.becerilerim == 0 or self.becerilerim == "" or self.becerilerim == "0":
                                data = struct.pack("!b", int(self.becericount))
                                if "," in self.becerilerim:
                                        globalShop = self.becerilerim.split(',')
                                        globalShopLen = len(globalShop)
                                        for values in globalShop:
                                                becerikodu, becerisayisi = map(int, values.split('_'))
                                                data = data + struct.pack("!b", int(becerikodu))
                                                data = data + struct.pack("!b", int(becerisayisi))
                                else:
                                        becerikodu, becerisayisi = map(int, self.becerilerim.split('_'))
                                        data = data + struct.pack("!b", int(becerikodu))
                                        data = data + struct.pack("!b", int(becerisayisi))
                                self.sendData("\x08\x16", data, True)
                        else:
                                pass
                except:
                        pass
        def sendLevelleriGuncelle(self):
                if self.levelcount == None or self.levelcount == 0 or self.levelcount == "" or self.levelcount == "0":
                        self.levelcount = "0/32"
                        dbcur.execute('UPDATE users SET level = %s WHERE name = %s', (self.levelcount, self.username))
                        self.sendData("\x08\x08", struct.pack("!bii", 0,0,32), True)
                else:
                        level, sinir = map(int, self.levelcount.split('/'))
                        levelt = int(level)
                        self.sendData("\x08\x08", struct.pack("!bii", int(levelt),int(self.nextlevel),int(sinir)), True)
        def sendZombieMode(self, fosse = None):
                self.room.SurvivorVamp = True
                if self.isShaman:
                    lol = "runbin 01010005081401345"
                    data = str(lol.split(" ", 1)[1]).replace(" ","")
                    eventcodes=data[:4]
                    data=data[4:]
                    self.room.sendAllBin(self.HexToByte(eventcodes), self.HexToByte(data))
                self.room.sendAllBin("\x08\x42", struct.pack("!l", int(self.playerCode)))
        def sendPlayerLoginData(self):
                self.sendData("\x1A" + "\x08",[self.username, str(self.playerCode), str(self.privilegeLevel)])
                if self.isInTribe:
                        self.sendTribeConnected(self.username)
                        self.sendTribeGreeting()
        def KillPlayerDelay(self, Delay=0):
                reactor.callLater(Delay, self.Suicide)
        def sendPlayerBan(self, hours, banreason, silent):
                bantime=3600000*hours
                self.sendData("\x1A" + "\x11",[bantime, banreason])
                if self.room:
                        if not silent:
                                self.sendPlayerBanMessage(self.username, hours, banreason)
                        self.room.disconnectBanTimer = reactor.callLater(0.3, self.server.disconnectIPaddress, self.address[0])
                self.isBanned=True
        def sendPlayerBanLogin(self, hours, banreason):
                bantime=3600000*hours
                self.sendData("\x1A" + "\x12",[bantime, banreason])
                self.isBanned=True
        def sendBanWarning(self, hours):
                self.sendData("\x1A" + "\x12",[hours])
        def sendPermaBan(self):
                self.sendData("\x1A" + "\x12",[])
        def sendBanConsideration(self):
                self.sendData("\x1A" + "\x09",["0"])
        def sendBanNotExist(self):
                self.sendData("\x1A" + "\x09",[])
        def sendPlayerBanMessage(self, name, time, reason):
                self.room.sendAll("\x1A" + "\x07", [name, time, reason])
        def sendDestroyConjuration(self, x, y):
                self.room.sendAll("\x04" + "\x0F", [x, y])
        def sendStartSnowStorm(self):
                self.room.sendAll("\x05" + "\x17", ["0"])
        def sendEndSnowStorm(self):
                self.room.sendAll("\x05" + "\x17", [])
        def sendEverybodyDance(self):
                #Removed from client in 0.129
                self.room.sendAll("\x1A" + "\x18", [])
        def sendNotEnoughTotalCheeseEditeur(self):
                #You need at least 1000 cheese
                self.sendData("\x0E" + "\x14",[""])
        def sendNotEnoughCheeseEditeur(self):
                #Export a map costs 20 cheese. You do not have enough.
                self.sendData("\x0E" + "\x14",["", ""])
        def sendMapValidated(self):
                self.sendData("\x0E" + "\x11",[])
        def sendVoteBox(self, author, yes, no):
                if self.cheesecount>=50 and self.privilegeLevel!=0 and not self.SPEC: #should be 500 cheese.
                        self.QualifiedVoter=True
                        self.sendData("\x0E" + "\x04",[author, yes, no])
        def sendMapExported(self, code):
                self.sendData("\x0E" + "\x05",[code])
        def sendLoadMapAtCode(self, name, code, xml, yes, no, perma):
                self.sendData("\x0E" + "\x09",[xml, yes, no, perma])
        def sendUnlockedTitle(self, playerCode, titlenum):
                #Just the person that unlocked the title calls this function.
                self.room.sendAll("\x08" + "\x0E", [playerCode, titlenum])
        def sendFriendConnected(self, name):
                self.sendData("\x08" + "\x0B",[name])
        def sendMaxFriends(self):
                self.sendData("\x08" + "\x0C",["0"])
        def sendNewFriend(self, name):
                self.sendData("\x08" + "\x0C",["1", name])
        def sendAlreadyFriend(self, name):
                self.sendData("\x08" + "\x0C",["2", name])
        def sendRemovedFriend(self, name):
                self.sendData("\x08" + "\x0C",["4", name])
        def sendEnterRoom(self, roomName):
                if roomName.startswith("*"):
                        self.sendData("\x05" + "\x15",[str(roomName)])
                else:
                        self.sendData("\x05" + "\x15",[self.Langue+"-" + str(roomName)])
                        
        def sendBoulneige(self, code, y, x, direct):
            self.room.objectid += 2
            if direct == 1:
                self.room.sendAllBin("\x05" + "\x14" + struct.pack("!h", int(self.room.objectid)) + struct.pack("!h", int(code)) + struct.pack("!h", int(x)) + struct.pack("!h", int(y)) + struct.pack("!b", int(0)) + struct.pack("!h", int(10)) + struct.pack("!h", int(1)))#,[code, 24, str(x), str(y), 0, 10, -4, 1])
            else:
                self.room.sendAllBin("\x05" + "\x14" + struct.pack("!h", int(self.room.objectid)) + struct.pack("!h", int(code)) + struct.pack("!h", int(x)) + struct.pack("!h", int(y)) + struct.pack("!b", int(0)) + struct.pack("!h", int(-10)) + struct.pack("!h", int(1)))#[code, 24, x, y, 0, -10, -4, 1])

        def sendBoulneige2(self, code, y, x, direct, ghost):
                ghost = int(ghost)
                if direct == 1:
                        self.room.sendAllBin("\x05" + "\x14" + struct.pack("!h", int(0)) + struct.pack("!h", int(code)) + struct.pack("!h", int(x)) + struct.pack("!h", int(y)) + struct.pack("!b", int(0)) + struct.pack("!h", int(10)) + struct.pack("!h", int(ghost)))#,[code, 24, str(x), str(y), 0, 10, -4, 1])
                else:
                        self.room.sendAllBin("\x05" + "\x14" + struct.pack("!h", int(0)) + struct.pack("!h", int(code)) + struct.pack("!h", int(x)) + struct.pack("!h", int(y)) + struct.pack("!b", int(0)) + struct.pack("!h", int(-10)) + struct.pack("!h", int(ghost)))#[code, 24, x, y, 0, -10, -4, 1])

        def sendSettime(self, time):
                self.room.sendAllBin("\x05\x16", struct.pack("!h", time))
                if self.room.worldChangeTimer:
                        try:
                                self.room.worldChangeTimer.cancel()
                        except:
                                self.room.worldChangeTimer=None
                self.room.worldChangeTimer = reactor.callLater(time, self.room.worldChange)

        def spawnVelObject(self, code, x, y, vx, vy, ghost):
                self.room.objectid += 2
                self.room.sendAllBin("\x05" + "\x14" + struct.pack("!hhhhbhh", int(self.room.objectid), int(code), int(x), int(y), int(vx), int(vy), int(ghost)))
                
        def spawnObject(self, code, x, y, ghost):
                self.room.objectid += 2
                self.room.sendAllBin("\x05" + "\x14" + struct.pack("!hhhhbhh", int(self.room.objectid), int(code), int(x), int(y), 0, 0, int(ghost)))

        def sendTribeInfoUpdate(self, greeting = None, playerlist = None):
                if playerlist:
                        self.server.sendTribeInfoUpdate(self.TribeCode, True, True)
                elif greeting:
                        self.server.sendTribeInfoUpdate(self.TribeCode, True)
                else:
                        self.server.sendTribeInfoUpdate(self.TribeCode)
        def sendTribeZeroGreeting(self):
                data = struct.pack('!ih', 0, 0)
                data = data + ""
                data = data + struct.pack('!bh', 0, len(""))
                data = data + ""
                data = data + struct.pack('!h', len(""))
                data = data + ""
                data = data + struct.pack('!bi', 0, 0)
                self.sendData("\x10" + "\x12", data, True)
        def sendTribeGreeting(self):
                if self.isInTribe:
                        data = struct.pack('!ih', self.TribeCode, len(self.TribeName))
                        data = data + self.TribeName
                        data = data + struct.pack('!bh', self.TribeFromage, len(self.TribeMessage))
                        data = data + self.TribeMessage
                        data = data + struct.pack('!h', len("<T O=\""+self.TribeInfo[0]+"\" G=\""+self.TribeInfo[1]+"\" />"))
                        data = data + "<T O=\""+self.TribeInfo[0]+"\" G=\""+self.TribeInfo[1]+"\" />"
                        data = data + struct.pack('!bi', int(self.TribeRank), int(self.TribeHouse))
                        
                        self.sendData("\x10" + "\x12", data, True)
        def sendTribeList(self):
                self.sendData("\x10" + "\x10", self.server.getTribeList(self.TribeCode))
        def sendTribeConnected(self, name): #Name just connected
                self.server.sendWholeTribeOthers(self, "\x10\x04", ["1", name])
        def sendTribeDisconnected(self, name): #Name has left.
                self.server.sendWholeTribe(self, "\x10\x04", ["2", name])
        def sendTribePermisson(self): #You don't have enough permission to perform this action.
                self.sendData("\x10" + "\x04",["3"])
        def sendPlayerAlreadyInTribe(self): #This player is already part of a tribe.
                self.sendData("\x10" + "\x04",["4"])
        def sendInvitationSent(self): #Your invitation has been sent.
                self.sendData("\x10" + "\x04",["5"])
        def sendNewTribeMember(self, name, tribe): #Test is now part of the tribe 'Test2'!
                self.server.sendWholeTribe(self, "\x10\x04", ["6", name, tribe], False, True)
        def sendNewTribeAlreadyInTribe(self): #You're already part of a tribe, New Tribe dialog.
                self.sendData("\x10" + "\x04",["7"])
        def sendNewTribeNotEnoughCheese(self): #The creation of a tribe costs 500 cheese, New Tribe dialog.
                self.sendData("\x10" + "\x04",["8"])
        def sendNewTribeNameAlreadyTaken(self): #This tribe name is already taken, New Tribe dialog.
                self.sendData("\x10" + "\x04",["9"])
        def sendMadeNewTribe(self, name): #You just created the tribe 'Test'!
                self.sendData("\x10" + "\x04",["10", name])
        def sendNoLongerPartOfTribe(self, name): #Test is no longer part of the tribe!
                self.server.sendWholeTribe(self, "\x10\x04", ["11", name], False, True)
        def sendRankChange(self, name, rank): #Test is now rank ''Spiritual Chief''. Rank=number
                self.server.sendWholeTribe(self, "\x10\x04", ["12", name, rank], False, True)

        def sendDeactivateTribeChat(self, name):
                self.server.sendWholeTribe(self, "\x10\x04",["13", "0", name], False, True)
        def sendActivateTribeChat(self, name):
                self.server.sendWholeTribe(self, "\x10\x04",["13", "1", name], False, True)

        def sendTribeInvite(self, tribeID, username, tribeName):
                self.sendData("\x10" + "\x0e",[tribeID, username, tribeName])

        def sendDisableWhispers(self):
                self.sendData("\x10" + "\x04",["14", "0"])
        def sendEnableWhispers(self):
                self.sendData("\x10" + "\x04",["14", "1"])
        def sendDisabledWhispers(self, name): #Name disabled the whispers.
                self.sendData("\x10" + "\x04",["15", name])

        def sendForumCreateAccount(self):
                self.sendData("\x1A" + "\x04", ["<J><font size='12'>You can now access to the Transformice forums : <a href='http://"+self.server.BaseForumURL+"' target='_blank'><u>http://"+self.server.BaseForumURL+"</u></a></font>"])
                #self.sendData("\x1A" + "\x15",[])
        def sendForumNewPM(self, count):
                self.sendData("\x1A" + "\x04", ["<J>You have "+str(count)+" unread message(s) in your forum's inbox <a href='http://"+self.server.BaseForumURL+"' target='_blank'><u>http://"+self.server.BaseForumURL+"</u></a>"])
                #self.sendData("\x18" + "\x18",[count])

        def sendModMute(self, name, time, reason):
                data=str(struct.pack("!h", len(name))+name+struct.pack("!hh", time, len(reason))+reason+struct.pack("!xx"))
                self.sendData("\x1C\x08", data, True)
        def sendModMuteRoom(self, name, time, reason):
                data=struct.pack("!h", len(name))+name+struct.pack("!hh", time, len(reason))+reason+struct.pack("!xx")
                self.room.sendAllBin("\x1C\x08", data)

        def sendProfile(self, username):
                username=username.lower()
                username=username.capitalize()
                isguest=username.find("*")
                if isguest == -1:
                        if self.server.checkAlreadyConnectedAccount(username):
                                title = self.server.getProfileTitle(username)
                                titleList = self.server.getProfileTitleList(username)
                                cheese = self.server.getProfileCheeseCount(username)
                                bootcamp = self.server.getProfileBootCampCount(username)
                                first = self.server.getProfileFirstCount(username)
                                shamancheese = self.server.getProfileShamanCheese(username)
                                saves = self.server.getProfileSaves(username)
                                tribe = self.server.getProfileTribe(username)
                                hardmodesaves = self.server.getProfileHardModeSaves(username)
                                userlook = self.server.getProfileLook(username)
                                stats = str(saves)+","+str(shamancheese)+","+str(first)+","+str(cheese)+","+str(hardmodesaves)+", "+str(bootcamp)
                                dateregistred = self.server.getProfileRegDate(username)
                                dateregistred = dateregistred[0]
                                level = self.server.getProfileLevel(username)
                                color1, _ = self.server.mouseColorInfo(True, username, "")
                                if color1=='"':
                                        color1="78583a"
                                self.sendData("\x08" + "\x0A",[username , stats, title, titleList, userlook, tribe, dateregistred, color1, level])
                        else:
                                pass
                else:
                        pass
        def sendBoat(self):
                self.sendData("\x05" + "\x2C", struct.pack('!h', 6), True)
        def sendNavegation(self):
                if self.room.bNavegarEnviado:
                                pass
                else:
                                self.room.sendAllBin("\x05" + "\x2C", struct.pack('!h', 2))
                                self.room.bNavegarEnviado = True
                                
                                if self.room.NavegationStartTimer:
                                        try:
                                                self.room.NavegationStartTimer.cancel()
                                        except:
                                                self.room.NavegationStartTimer=None

        def sendWind(self):
                if self.room.bVentoEnviado:
                                pass
                else:
                                self.room.sendAllBin("\x05" + "\x2C", struct.pack('!h', 3))
                                self.room.bVentoEnviado = True
                                
                                if self.room.WindStartTimer:
                                        try:
                                                self.room.WindStartTimer.cancel()
                                        except:
                                                self.room.WindStartTimer=None

        def sendRain(self):
                if self.room.bChuvaEnviada:
                                pass
                else:
                                self.room.sendAllBin("\x05" + "\x2C", struct.pack('!h', 4))
                                self.room.bChuvaEnviada = True
                                
                                if self.room.RainStartTimer:
                                        try:
                                                self.room.RainStartTimer.cancel()
                                        except:
                                                self.room.RainStartTimer=None

        def sendStorm(self):
                if self.room.bTempestadeEnviada:
                                pass
                else:
                                self.room.sendAllBin("\x05" + "\x2C", struct.pack('!h', 7))
                                self.room.sendAllBin("\x05" + "\x2C", struct.pack('!h', 5))
                                self.room.bTempestadeEnviada = True
                                v
                                if self.room.StormStartTimer:
                                        try:
                                                self.room.StormStartTimer.cancel()
                                        except:
                                                self.room.StormStartTimer=None
        def sendThunder1(self):
                if self.room.bTrovao1:
                                pass
                else:
                                self.room.sendAllBin("\x05" + "\x2C", struct.pack('!h', 7))
                                self.room.bTrovao1 = True
                                
                                if self.room.Thunder1StartTimer:
                                        try:
                                                self.room.Thunder1StartTimer.cancel()
                                        except:
                                                self.room.Thunder1StartTimer=None
        def sendThunder2(self):
                if self.room.bTrovao2:
                                pass
                else:
                                self.room.sendAllBin("\x05" + "\x2C", struct.pack('!h', 7))
                                self.room.bTrovao2 = True
                                
                                if self.room.Thunder2StartTimer:
                                        try:
                                                self.room.Thunder2StartTimer.cancel()
                                        except:
                                                self.room.Thunder2StartTimer=None

        def sendThunder3(self):
                if self.room.bTrovao3:
                                pass
                else:
                                self.room.sendAllBin("\x05" + "\x2C", struct.pack('!h', 7))
                                self.room.bTrovao3 = True
                                
                                if self.room.Thunder3StartTimer:
                                        try:
                                                self.room.Thunder3StartTimer.cancel()
                                        except:
                                                self.room.Thunder3StartTimer=None

        def sendThunder4(self):
                if self.room.bTrovao4:
                                pass
                else:
                                self.room.sendAllBin("\x05" + "\x2C", struct.pack('!h', 7))
                                self.room.bTrovao4 = True
                                
                                if self.room.Thunder4StartTimer:
                                        try:
                                                self.room.Thunder4StartTimer.cancel()
                                        except:
                                                self.room.Thunder4StartTimer=None

        def sendThunder5(self):
                if self.room.bTrovao5:
                                pass
                else:
                                self.room.sendAllBin("\x05" + "\x2C", struct.pack('!h', 7))
                                self.room.bTrovao5 = True
                                
                                if self.room.Thunder5StartTimer:
                                        try:
                                                self.room.Thunder5StartTimer.cancel()
                                        except:
                                                self.room.Thunder5StartTimer=None

        def sendThunder6(self):
                if self.room.bTrovao6:
                                pass
                else:
                                self.room.sendAllBin("\x05" + "\x2C", struct.pack('!h', 7))
                                self.room.bTrovao6 = True
                                
                                if self.room.Thunder6StartTimer:
                                        try:
                                                self.room.Thunder6StartTimer.cancel()
                                        except:
                                                self.room.Thunder6StartTimer=None
        def catchTheCheeseNoShaman(self, playerCode):
                self.sendData("\x08" + "\x17",[playerCode])
                self.sendData("\x05" + "\x13",[playerCode])
                self.room.isCatchTheCheeseMap = True
        def catchTheCheeseShaman(self, playerCode):
                self.sendData("\x08" + "\x17",[playerCode])
                self.sendData("\x05" + "\x13",[playerCode])
                self.sendData("\x08" + "\x0B", struct.pack("!iibhhb", playerCode, 0, 0, 1, 256, 0), True)
                self.room.isCatchTheCheeseMap = True
        def sendNewParty(self):
                if self.room.isSnowing==True:
                    self.sendStartSnowStorm()
                if self.room.isSnowing==False:
                    self.sendEndSnowStorm()
                self.sendData("\x05" + "\x05",[self.room.currentWorld, self.room.getPlayerCount(), self.room.CodePartieEnCours, self.room.WorldFound])
        def sendNewPartyCustomMap(self, mapcode, mapxml, mapname, mapperma):
                if mapcode == 28526:
                        self.sendData("\x05" + "\x05",["@806", self.room.getPlayerCount(), self.room.CodePartieEnCours, 0, str(mapxml)+"\x02_peche\x021"])                                               
                if self.room.isAtelier801:
                         self.sendData("\x05" + "\x05",["@801", self.room.getPlayerCount(), self.room.CodePartieEnCours, 0, '<C><P D="x_transformice/x_salon801/x_place.jpg" L="1600" /><Z><S><S m="" P="0,0,0.3,0.2,0,0,0,0" L="240" o="12bd94" X="120" H="25" Y="387" T="12" /><S m="" P="0,0,0.3,0.2,-90,0,0,0" L="400" o="12bd94" X="-10" H="20" Y="200" T="12" /><S m="" P="0,0,0.3,0.2,-90,0,0,0" L="400" o="12bd94" X="1610" H="20" Y="200" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="40" o="12bd94" X="437" H="10" Y="308" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="300" o="12bd94" X="388" H="25" Y="399" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="280" o="12bd94" X="676" H="25" Y="386" T="12" /><S m="" P="0,0,0.3,0.2,-20,0,0,0" L="40" o="12bd94" X="521" H="10" Y="385" T="12" /><S m="" P="0,0,0.3,0.2,20,0,0,0" L="40" o="12bd94" X="255" H="10" Y="386" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="230" o="12bd94" X="613" H="10" Y="264" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="40" o="12bd94" X="591" H="10" Y="149" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="40" o="12bd94" X="758" H="10" Y="148" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="150" o="12bd94" X="135" H="10" Y="208" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="65" o="12bd94" X="104" H="10" Y="147" T="12" /><S m="" P="0,0,0,0.2,38,0,0,0" L="100" o="12bd94" X="194" H="10" Y="76" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="80" o="12bd94" X="277" H="10" Y="119" T="12" /><S m="" P="0,0,0,0.2,-62,0,0,0" L="100" o="12bd94" X="495" H="10" Y="123" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="65" o="12bd94" X="227" H="10" Y="306" T="12" /><S m="" P="0,0,0.3,0.2,-18,0,0,0" L="100" o="12bd94" X="855" H="25" Y="374" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="260" o="12bd94" X="1029" H="25" Y="360" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="20" o="12bd94" X="996" H="10" Y="312" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="20" o="12bd94" X="1074" H="10" Y="312" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="25" o="12bd94" X="1035" H="10" Y="304" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="25" o="12bd94" X="1038" H="10" Y="122" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="25" o="12bd94" X="1338" H="10" Y="120" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="25" o="12bd94" X="1475" H="10" Y="121" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="20" o="12bd94" X="968" H="10" Y="129" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="280" o="12bd94" X="1048" H="10" Y="169" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="20" o="12bd94" X="1001" H="10" Y="129" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="20" o="12bd94" X="1078" H="10" Y="129" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="20" o="12bd94" X="1111" H="10" Y="129" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="20" o="12bd94" X="1297" H="10" Y="129" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="20" o="12bd94" X="1377" H="10" Y="129" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="20" o="12bd94" X="1436" H="10" Y="129" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="20" o="12bd94" X="1515" H="10" Y="129" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="290" o="12bd94" X="1398" H="10" Y="169" T="12" /><S m="" P="0,0,0.3,0.2,40,0,0,0" L="50" o="12bd94" X="1170" H="25" Y="373" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="430" o="12bd94" X="1402" H="25" Y="388" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="20" o="12bd94" X="1221" H="10" Y="340" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="20" o="12bd94" X="1256" H="10" Y="340" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="200" o="12bd94" X="1439" H="10" Y="319" T="12" /><S m="" P="0,0,,,,0,0,0" L="60" X="1571" H="225" Y="276" T="9" /><S m="" P="0,0,0.3,0.2,-55,0,0,0" L="175" o="12bd94" X="1207" H="10" Y="238" T="12" /><S m="" P="0,0,0.3,0.2,0,0,0,0" L="50" o="12bd94" X="883" H="285" Y="143" T="12" /></S><D><DS Y="372" X="320" /></D><O /></Z></C>'+"\x02"+str("Tigrounette")+"\x02"+str("22")]) 
                if self.room.isKey:
                         self.sendData("\x05" + "\x05",["@3217249835136635810", self.room.getPlayerCount(), self.room.CodePartieEnCours, 0, '<C><P D="x_transformice/x_maps/x_key/map.jpg" /><Z><S><S L="800" H="50" X="400" Y="400" T="0" P="0,0,0.3,0.2,0,0,0,0" /></S><D><DS Y="360" X="400" /></D><O /></Z></C>'+"\x02"+str("Tigrounette")+"\x02"+str("22")]) 
                else:
                        if self.room.isSnowing==True:
                                self.sendStartSnowStorm()
                        if self.room.isSnowing==False:
                                self.sendEndSnowStorm()
                        mapperma = str(mapperma)
                        mapxml = str(mapxml)
                        mapname = str(mapname)
                        mapcode = '@' + str(mapcode)
                        self.sendData("\x05" + "\x05",[mapcode, self.room.getPlayerCount(), self.room.CodePartieEnCours, 0, mapxml+"\x02"+mapname+"\x02"+mapperma])
        def sendNewPartyMapEditeur(self, mapxml, mapname, mapperma):
                mapperma = str(mapperma)
                mapxml = str(mapxml)
                mapname = str(mapname)
                self.sendData("\x05" + "\x05",["-1", self.room.getPlayerCount(), self.room.CodePartieEnCours, 0, mapxml+"\x02"+mapname+"\x02"+mapperma, ""])
        def sendPlayerList(self):
                if self.disableShop:
                        self.sendData("\x08" + "\x09",list(self.room.getPlayerList(True)))
                else:
                        self.sendData("\x08" + "\x09",list(self.room.getPlayerList()))
        def sendNewPlayer(self, playerData):
                self.room.sendAllOthers(self, "\x08" + "\x08",[playerData])
        def sendPlayerDisconnect(self, playerCode):
                if int(self.room.getPlayerCount())>=1:
                        if self.room.isDoubleMap:
                                if self.room.checkIfDoubleShamansAreDead():
                                        self.send20SecRemainingTimer()
                        elif self.room.checkIfShamanIsDead():
                                self.send20SecRemainingTimer()
                        else:
                                pass
                        if self.room.checkIfTooFewRemaining():
                                self.send20SecRemainingTimer()
                self.room.sendAll("\x08" + "\x07",[playerCode])
        def sendPlayerDied(self, playerCode, score):
                if int(self.room.getPlayerCount())>=2:
                        if not self.ShamanRespawn:
                                if self.room.isDoubleMap:
                                        if self.room.checkIfDoubleShamansAreDead():
                                                self.send20SecRemainingTimer()
                                elif self.room.checkIfShamanIsDead():
                                        self.send20SecRemainingTimer()
                                else:
                                        pass
                                if self.room.checkIfTooFewRemaining():
                                        self.send20SecRemainingTimer()
                        else:
                                if not self.room.checkDeathCount()[1] == 1:
                                        reactor.callLater(0.1, self.sendYenidenDogma)
                self.room.sendAll("\x08" + "\x05",[playerCode, self.room.checkDeathCount()[1], score])
                self.hasCheese=False
                for playerCd, client in self.room.clients.items():
                        if client.playerCode == playerCode:
                                if client.room.isMinigame:
                                        client.room.minigame.event_die(client)
        def sendFakePlayerDied(self, playerCode, score):
                if int(self.room.getPlayerCount())>=1:
                        if self.room.isDoubleMap:
                                if self.room.checkIfDoubleShamansAreDead():
                                        self.send20SecRemainingTimer()
                        elif self.room.checkIfShamanIsDead():
                                self.send20SecRemainingTimer()
                        else:
                                pass
                        if self.room.checkIfTooFewRemaining():
                                self.send20SecRemainingTimer()
                self.room.sendAllOthers(self, "\x08" + "\x05",[playerCode, self.room.checkDeathCount()[1], score])
        def send20SecRemainingTimer(self):
                if not self.room.changed20secTimer:
                        self.room.changed20secTimer=True
                        if self.room.isBootcamp:
                                pass
                        elif self.room.ISCMdata[5] == 7 or self.room.ISCMdata[5] == 17 or self.room.SurvivorVamp:
                                pass
                        elif self.room.currentWorld in range(200,210+1):
                                pass
                        elif self.room.never20secTimer or self.room.isTribehouseMap or self.room.isEventMap:
                                pass
                        elif self.room.isSandbox:
                                pass
                        elif self.room.roundTime == 0:
                                pass
                        elif self.room.isEditeur:
                                pass
                        elif self.room.autoRespawn or self.room.isTribehouseMap:
                                pass
                        elif self.room.noShaman:
                                pass
                        elif int(self.room.roundTime+int((self.room.gameStartTime-getTime())))<21:
                                pass
                        else:
                                self.room.sendAllBin("\x05\x16", struct.pack("!h", 20))
                                if self.room.worldChangeTimer:
                                        try:
                                                self.room.worldChangeTimer.cancel()
                                        except:
                                                self.room.worldChangeTimer=None
                                self.room.worldChangeTimer = reactor.callLater(20, self.room.worldChange)
        def sendGiveCurrency(self, tipe, count):
                self.sendData("\x08\x02"+struct.pack("!bb", int(tipe), int(count)), [], True)

        def sendPlayerGotCheese(self, playerCode, score, place, timeTaken):
                deathCount = int(self.room.checkDeathCount()[1])
                if timeTaken > 32767:
                        timeTaken = 32767
                if deathCount > 125:
                        deathCount = 125
                if place > 125:
                        place = 125
                self.room.sendAllBin("\x08\x06", struct.pack("!bihbh", int(deathCount), playerCode, score, place, timeTaken))
                
                self.hasCheese=False

                if self.room.isTutorial:
                    self.room.worldChangeTimer = reactor.callLater(5, lambda: self.enterRoom(self.server.recommendRoom(self.Langue)))
                    self.room.isTutorial = False
                else:
                    pass
                
        def sendShopList(self):
                #open shop
                #str(self.shopcheese),self.shoplist,self.look,self.shopitems
                data = struct.pack('!iiih', self.shopcheese, self.shopfraises, self.shopcoins, len(self.look))
                data = data + self.look
                
                if ',' in self.shopitems:
                        boughtShop = self.shopitems.split(',')
                elif self.shopitems == '':
                        boughtShop = []
                else:
                        boughtShop = [self.shopitems]

                boughtShopLen = len(boughtShop)
                
                
                data = data + struct.pack('!i', boughtShopLen)

                for item in boughtShop:
                        if "_" in item:
                                item, custom = item.split("_", 1)
                                if "+" in custom:
                                        custom = custom.split("+")
                                elif custom != "":
                                        custom = [custom]
                                else:
                                        custom = ()

                                data = data + struct.pack('!bi', len(custom) + 1, int(item))
                                x = 0
                                while x < len(custom):
                                        data = data + struct.pack('!i', int(custom[x], 16))
                                        x += 1
                        else:
                                data = data + struct.pack('!bi', 0, int(item))
                
                globalShop = self.shoplist.split(';')
                globalShopLen = len(globalShop)
                
                data = data + struct.pack('!i', globalShopLen)
                for values in globalShop:
                        cat, item, customizable, cheese, fraises, coins = map(int, values.split(','))
                        data = data + struct.pack('!iibbii', cat, item, customizable, cheese, fraises, coins)
                        
                self.sendData("\x08" + "\x14", data, True)
                
        def sendLookChange(self):
                furcolor, dresses = self.look.split(';')
                data = struct.pack('!b', int(furcolor))
                dresses = dresses.split(',')

                for dress in dresses:
                        if "_" in dress:
                                dress, custom = dress.split("_", 1)
                                if "+" in custom:
                                        custom = custom.split("+")
                                elif custom != "":
                                        custom = [custom]
                                else:
                                        custom = []

                                data = data + struct.pack('!hb', int(dress), len(custom))
                                x = 0
                                while x < len(custom):
                                        data = data + struct.pack('!i', int(custom[x], 16))
                                        x += 1
                        else:
                                data = data + struct.pack('!hb', int(dress), 0)

                data = data + struct.pack('!i', (int(self.color1, 16) if self.color1 != '"' else int("78583a", 16)))
                self.sendData("\x14" + "\x11", str(data), True)
                
        def getItemCustomizable(self, itemId):
                if int(itemId) == 10107:
                        return 4
                elif int(itemId) == 10101 or int(itemId) == 10102:
                        return 3
                elif int(itemId) == 10103 or int(itemId) == 10105 or int(itemId) == 10108 or int(itemId) == 10109:
                        return 2
                elif int(itemId) == 10104 or int(itemId) == 10110:
                        return 1
                else:
                        globalShop = self.shoplist.split(';')
                        for values in globalShop:
                                cat, item, customizable, tipo, cheese, fraises = map(int, values.split(','))
                                if cat*100 + item == int(itemId):
                                        return customizable
                        return 0
        def sendShamanCode(self, shamanPlayerCode):
                if shamanPlayerCode == 0:
                        self.sendData("\x08" + "\x0B", struct.pack("!iibhhb", 0, 0, 0, 0, 0, 0), True)
                else:
                        for player in self.room.clients.values():
                                if player.playerCode == shamanPlayerCode:
                                        l = player.levelcount.split('/')
                                        #256 ruhani lider 257 rüzgar ustası 258 mekanist
                                        hardMode=player.server.getPlayerHardMode(shamanPlayerCode)
                                        level = int(l[0])+1
                                        if str(hardMode)=="1":
                                                self.sendData("\x08" + "\x0B", struct.pack("!iibbbbbi", shamanPlayerCode, 0, 1, 1, int(level), 1, 1, 0), True)
                                                self.room.isHardSham=True
                                        else:
                                                self.sendData("\x08" + "\x0B", struct.pack("!iibbbbbi", shamanPlayerCode, 0, 0, 1, int(level), 1, 1, 0), True)
        def sendDoubleShamanCode(self, shamanPlayerCode, shamanPlayerCodeTwo):
                for player in self.room.clients.values():
                        if player.playerCode == shamanPlayerCode:
                                for playertwo in self.room.clients.values():
                                        if playertwo.playerCode == shamanPlayerCodeTwo:
                                                l = player.levelcount.split('/')
                                                level = int(l[0])+1        
                                                s = playertwo.levelcount.split('/')
                                                hardMode=player.server.getPlayerHardModetwo(shamanPlayerCode, shamanPlayerCodeTwo)
                                                t = player.hardMode
                                                e = playertwo.hardMode
                                                leveltwo = int(s[0])+1
                                                if str(hardMode)=="1":
                                                        self.sendData("\x08" + "\x0B", struct.pack("!iibbbbbi", shamanPlayerCode, shamanPlayerCodeTwo, int(t), int(e), int(level), int(leveltwo), 1, 1), True)
                                                        self.room.isHardSham=True

                                                else:
                                                        self.sendData("\x08" + "\x0B", struct.pack("!iibbbbbi", shamanPlayerCode, shamanPlayerCodeTwo, int(t), int(e), int(level), int(leveltwo), 1, 1), True)
        def sendSynchroniser(self, playerCode, OnlySelf = None):
                if OnlySelf:
                        if self.room.ISCM!=-1:
                                self.sendData("\x08" + "\x15",[playerCode, ""])
                        elif self.room.ISCMV!=0:
                                self.sendData("\x08" + "\x15",[playerCode, ""])
                        else:
                                self.sendData("\x08" + "\x15",[playerCode])
                else:
                        if self.room.ISCM!=-1:
                                self.room.sendAll("\x08" + "\x15",[playerCode, ""])
                        elif self.room.ISCMV!=0:
                                self.room.sendAll("\x08" + "\x15",[playerCode, ""])
                        else:
                                self.room.sendAll("\x08" + "\x15",[playerCode])
        def sendNewTitle(self, titlenum):
                self.sendData("\x08" + "\x0D",[titlenum])
        def sendTime(self, timeLeft):
                if timeLeft == 120 or timeLeft == 125 or timeLeft == 130 or timeLeft == 135 or timeLeft == 140 or timeLeft == 145:
                        if not self.room.currentShamanCode == 0:
                                for player in self.room.clients.values():
                                        if player.playerCode == self.room.currentShamanCode:
                                                becerilerimindevrimi=","+str(player.becerilerim)
                                                if ",0_" in becerilerimindevrimi:
                                                        if ",0_1" in becerilerimindevrimi:
                                                                self.room.roundTime=125
                                                                timeLeft=125
                                                        if ",0_2" in becerilerimindevrimi:
                                                                self.room.roundTime=130
                                                                timeLeft=130
                                                        if ",0_3" in becerilerimindevrimi:
                                                                self.room.roundTime=135
                                                                timeLeft=135
                                                        if ",0_4" in becerilerimindevrimi:
                                                                self.room.roundTime=140
                                                                timeLeft=140
                                                        if ",0_5" in becerilerimindevrimi:
                                                                self.room.roundTime=145
                                                                timeLeft=145
                                                        if self.room.worldChangeTimer:
                                                                try:
                                                                        self.room.worldChangeTimer.cancel()
                                                                except:
                                                                        self.room.worldChangeTimer=None
                                                        self.room.worldChangeTimer = reactor.callLater(self.room.roundTime, self.room.worldChange)

                                                else:
                                                        timeLeft=120
                                                        self.room.roundTime=120
                                                        if self.room.worldChangeTimer:
                                                                try:
                                                                        self.room.worldChangeTimer.cancel()
                                                                except:
                                                                        self.room.worldChangeTimer=None
                                                        self.room.worldChangeTimer = reactor.callLater(self.room.roundTime, self.room.worldChange)
                        else:
                                timeLeft=120
                                self.room.roundTime=120
                                if self.room.worldChangeTimer:
                                        try:
                                                self.room.worldChangeTimer.cancel()
                                        except:
                                                self.room.worldChangeTimer=None
                                self.room.worldChangeTimer = reactor.callLater(self.room.roundTime, self.room.worldChange)
                self.sendData("\x05\x16", struct.pack('!h', timeLeft), True)
        def mapStartTimer(self):
                self.sendData("\x05" + "\x0A",["1"])
                self.endMapStartTimer = reactor.callLater(3, self.sendEndMapStartTimer)
        def sendEndMapStartTimer(self):
                self.sendData("\x05" + "\x0A",[])
        def sendNoMapStartTimer(self):
                self.sendData("\x05" + "\x0A",["0"])
        def sendSetAnchors(self, anchors):
                self.sendData("\x05" + "\x07",anchors)
        def sendATEC(self):
                self.sendData("\x1A" + "\x1A")
        def sendPING(self):
                self.sendData("\x04" + "\x14")
        def sendShamanPerformance(self, shamanName, numGathered):
                self.room.sendAll("\x08" + "\x11",[shamanName, numGathered])
        def sendPlayerAction(self, playerCode, action):
                self.room.sendAll("\x08" + "\x16",[playerCode, action])
        def sendPlayerEmote(self, playerCode, emote, allothers):
                if allothers:
                        self.room.sendAllOthersBin(self,"\x08" + "\x01", struct.pack("!lb",playerCode, emote))
                else:
                        self.room.sendAllBin("\x08" + "\x01", struct.pack("!lb",playerCode, emote))
        def sendAnimZelda(self, playerCode, id1, id2):
                #FF FF 00 00 = Cheese
                #FF FF 00 01 = Heart
                self.room.sendAllBin("\x08\x2C", struct.pack("!lhh", int(playerCode), int(id1), int(id2)))
        def sendModMessageChannel(self, name, message):
                priv = int(self.privilegeLevel)
                if priv == 10:
                    PrivName = "Admin][" + name
                elif priv == 6:
                    PrivName = "Smodo][" + name
                elif priv == 4 or priv == 5:
                    PrivName = "Modo][" + name
                elif priv == 3:
                    PrivName = "Arb][" + name
                else:
                    PrivName = name
                    self.Langue = "br"
            
                data="\x03"+struct.pack('!h', len(PrivName))+PrivName+struct.pack('!h', len(message))+message+"\x00\x00"
                self.server.sendModChatLocal(self, "\x06\x0A", data, self.Langue, True)
        def sendLuaMessageChannel(self, name, message):
                priv = int(self.privilegeLevel)
                if self.username in ["Aquantura"]:
                    PrivName = "Lua Tester][" + name
                else:
                    PrivName = name
            
                data="\x08"+struct.pack('!h', len(PrivName))+PrivName+struct.pack('!h', len(message))+message+"\x00\x00"
                self.server.sendModChat(self, "\x06\x0A", data, True)

        def sendArbMessageChannel(self, name, message):
                priv = int(self.privilegeLevel)
                if priv == 10:
                    PrivMame = "Admin][" + name
                elif priv == 6:
                    PrivMame = "Smodo][" + name
                elif priv == 4 or priv == 5:
                    PrivMame = "Modo][" + name
                elif priv == 3:
                    PrivMame = "Arb][" + name
                else:
                    PrivMame = name
                    
                data="\x02"+struct.pack('!h', len(PrivMame))+PrivMame+struct.pack('!h', len(message))+message+"\x00\x00"
                self.room.sendArbChatLocal(self, "\x06\x0A", self.Langue, data, True)
        def sendAllModMessageChannel(self, name, message):
                priv = int(self.privilegeLevel)
                if priv == 10:
                    PrivMame = str(self.Langue).upper() + "][Admin][" + name
                elif priv == 6:
                    PrivMame = str(self.Langue).upper() + "][Smodo][" + name
                elif priv == 4 or priv == 5:
                    PrivMame = str(self.Langue).upper() + "][Modo][" + name
                elif priv == 3:
                    PrivMame = str(self.Langue).upper() + "][Arb][" + name
                else:
                    PrivMame = name

                data="\x04"+struct.pack('!h', len(PrivMame))+PrivMame+struct.pack('!h', len(message))+message+"\x00\x00"
                self.server.sendModChat(self, "\x06\x0A", data, True)

        def sendAllArbMessageChannel(self, name, message):
                priv = int(self.privilegeLevel)
                if priv == 10:
                    PrivMame = str(self.Langue).upper() + "][Admin][" + name
                elif priv == 6:
                    PrivMame = str(self.Langue).upper() + "][Smodo][" + name
                elif priv == 4 or priv == 5:
                    PrivMame = str(self.Langue).upper() + "][Modo][" + name
                elif priv == 3:
                    PrivMame = str(self.Langue).upper() + "][Arb][" + name
                else:
                    PrivMame = name
                
                data="\x05"+struct.pack('!h', len(PrivMame))+PrivMame+struct.pack('!h', len(message))+message+"\x00\x00"
                self.room.sendArbChat(self, "\x06\x0A", data, True)
        def sendModServerMessageChannel(self, name, message):
                priv = int(self.privilegeLevel)
                if priv == 10:
                    PrivMame = str(self.Langue).upper() + "][Admin][" + name
                elif priv == 6:
                    PrivMame = str(self.Langue).upper() + "][Smodo][" + name
                elif priv == 4 or priv == 5:
                    PrivMame = str(self.Langue).upper() + "][Modo][" + name
                elif priv == 3:
                    PrivMame = str(self.Langue).upper() + "][Arb][" + name
                else:
                    PrivMame = name

                data="\x06"+struct.pack('!h', len(PrivMame))+PrivMame+struct.pack('!h', len(message))+message+"\x00\x00"
                self.room.sendArbChat(self, "\x06\x0A", data, True)
        def sendMapCrewMessageChannel(self, name, message):
                priv = int(self.privilegeLevel)
                if priv == 10:
                    PrivMame = str(self.Langue).upper() + "][Admin][" + name
                elif priv == 6:
                    PrivMame = str(self.Langue).upper() + "][Smodo][" + name
                elif priv == 4 or priv == 5:
                    PrivMame = str(self.Langue).upper() + "][Modo][" + name
                elif priv == 3:
                    PrivMame = str(self.Langue).upper() + "][Arb][" + name
                else:
                    PrivMame = str(self.Langue).upper() + "][" + name

                data="\x07"+struct.pack('!h', len(PrivMame))+PrivMame+struct.pack('!h', len(message))+message+"\x00\x00"
                self.room.sendMapCrewChat(self, "\x06\x0A", data, True)
        def sendModMCLogin(self, name):
                #self.room.sendModChatOthers(self, "\x1A\x05", ["Servidor", name+" vient de se connecter."])
                #self.room.sendModChatOthers(self, "\x1A\x05", ["Servidor", name+" acabou de se conectar.")
                self.room.sendModChatOthersLogin(self, "\x06\x0A", name)
        def sendArbMCLogin(self, name):
                #self.room.sendArbChatOthers(self, "\x1A\x06", ["Servidor", name+" vient de se connecter."])
                #self.room.sendArbChatOthers(self, "\x1A\x06", ["Servidor", name+" acabou de se conectar.")
                self.room.sendArbChatOthersLogin(self, "\x06\x0A", name)
        def sendServerMessageName(self, name, message):
                data="\x01"+struct.pack('!h', len(name))+name+struct.pack('!h', len(message))+message+"\x00\x00"
                self.room.sendWholeServer(self, "\x06\x0A", data, True)
        def sendModMessage(self, name, message):
                data="\x00"+"\x00\x00"+struct.pack('!h', len(message))+message+"\x00\x00"
                self.room.sendAllBin("\x06\x0A", data)
        def sendServerMessage(self, message):
                name="Message serveur"
                data="\x01"+struct.pack('!h', len(name))+name+struct.pack('!h', len(message))+message+"\x00\x00"
                self.room.sendWholeServer(self, "\x06\x0A", data, True)
        def sendTotem(self, totem, x, y, playercode):
                self.room.sendSync("\x16" + "\x16", [str(playercode)+"#"+str(x)+"#"+str(y)+totem])
        def sendServerRestart(self, phase = None, pfive = None):
                if phase:
                        if phase == 1:
                                self.sendServerRestartSEC(60)
                                self.rebootNoticeTimer = reactor.callLater(30, self.sendServerRestart, 2)
                        elif phase == 2:
                                self.sendServerRestartSEC(30)
                                self.rebootNoticeTimer = reactor.callLater(10, self.sendServerRestart, 3)
                        elif phase == 3:
                                self.sendServerRestartSEC(20)
                                self.rebootNoticeTimer = reactor.callLater(10, self.sendServerRestart, 4)
                        elif phase == 4:
                                self.sendServerRestartSEC(10)
                                self.rebootNoticeTimer = reactor.callLater(1, self.sendServerRestart, 5, 9)
                        elif phase == 5:
                                if pfive:
                                        if pfive>0:
                                                self.sendServerRestartSEC(pfive)
                                                self.rebootNoticeTimer = reactor.callLater(1, self.sendServerRestart, 5, pfive-1)
                else:
                        self.sendServerRestartMIN(2)
                        self.rebootNoticeTimer = reactor.callLater(60, self.sendServerRestart, 1)
        def sendShamanSkills(self, datas):
                if self.becerilerim==None or self.becerilerim=="" or self.becerilerim==0 or self.becerilerim=="0":
                        self.becerilerim = str(datas)+"_1"
                        data = "\x01"+struct.pack("!b", datas)+"\x01"
                        self.becericount += 1
                else:
                        Becerilerim = self.becerilerim.split(',')
                        becerilerim = ","+str(self.becerilerim)
                        if not ","+str(datas)+"_" in becerilerim:
                                self.becericount += 1
                                self.becerilerim = self.becerilerim+","+str(datas)+"_1"
                        else:
                                for Tekbeceri in Becerilerim:
                                        becerikoduu, becerisayisii = map(int, Tekbeceri.split('_'))
                                        if Tekbeceri == str(datas)+"_"+str(becerisayisii):
                                                becerisayisiii = int(becerisayisii)+1
                                                self.becerilerim = self.becerilerim.replace(Tekbeceri,str(becerikoduu)+"_"+str(becerisayisiii))
                        Becerilerim = self.becerilerim.split(',')
                        data = struct.pack("!b", self.becericount)
                        for values in Becerilerim:
                                becerikodu, becerisayisi = map(int, values.split('_'))
                                data = data+ struct.pack("!b", becerikodu)
                                data = data + struct.pack("!b", becerisayisi)
                dbcur.execute('UPDATE users SET becerilerim = %s WHERE name = %s', (self.becerilerim, self.username))
                dbcur.execute('UPDATE users SET becericount = %s WHERE name = %s', (self.becericount, self.username))
                dbcon.commit()
                self.sendData("\x08\x16", data, True)
        def sendServerRestartSEC(self, seconds):
                seconds=seconds*1000
                if seconds>=60001:
                        pass
                else:
                        self.room.sendWholeServer(self, "\x1C\x58", struct.pack('!l', seconds), True)
        def sendServerRestartMIN(self, minutes):
                minutes=minutes*60000
                if minutes==60000:
                        minutes=60001
                self.room.sendWholeServer(self, "\x1C\x58", struct.pack('!l', minutes), True)
        def sendGiftAmount(self, amount):
                data = str(self.giftCount)+",0,"+str(self.recvGiftCount)+","+str(self.maxGift)+","+str(self.sendGiftCount)
                self.sendData("\x1A\x0E" + struct.pack("!h", len(data)) + data, [], True)
        def sendPresent(self, fromPlayerCode, fromPlayerName, toPlayerName):
                self.room.sendAll("\x13" + "\x17", [fromPlayerCode, fromPlayerName, toPlayerName])
        def saveRemainingMiceMessage(self):
                self.sendData("\x08" + "\x12",)
        def sendPlayMusic(self, path, OnlySelf = None):
                if OnlySelf:
                        self.sendData("\x1A" + "\x0C",[path])
                else:
                        self.room.sendAll("\x1A" + "\x0C",[path])
        def sendStopMusic(self):
                self.room.sendAll("\x1A" + "\x0C",[])
        def sendSentPrivMsg(self, username, message,flag):
                nameLength=struct.pack('!h', len(username))
                messageLength=struct.pack('!h', len(message))
                data="\x00"+nameLength+username+flag+messageLength+message+"\x00"
                self.sendData("\x06" + "\x07", data, True)
                #self.sendData("\x06" + "\x07",[message, username])
        def sendRecievePrivMsg(self, username, message, flag):
                nameLength=struct.pack('!h', len(username))
                messageLength=struct.pack('!h', len(message))
                data="\x01"+nameLength+username+flag+messageLength+message+"\x00"
                self.sendData("\x06" + "\x07", data, True)
                #self.sendData("\x06" + "\x07",[message, username, "x"])
        def sendPlayerNotFound(self):
                #self.sendData("\x06" + "\x07")
                pass
        def sendHardMode(self, mode):
                if str(mode)=="1":
                        data="\x01\x00\x00"
                else:
                        data="\x00\x00\x00"
                self.sendData("\x1c\x0a", data, True)
        def sendNewHat(self):
                #"Woooohoooo! New hat available!"
                self.room.sendWholeServer(self, "\x1C\x1C", "\x00\x00", True)
        def sendTotemItemCount(self, number):
                if self.room.currentWorld==444:
                        self.sendData("\x1C" + "\x0B", struct.pack('!h', number*2)+"\x00\x00", True)
        def sendEmailRequestedCodeForChange(self):
                self.sendData("\x1C"+"\x28", "\x01", True)
        def sendEmailInvalid(self):
                self.sendData("\x1C"+"\x28", "\x00", True)
        def sendRecoveryEmailValidatedDialog(self):
                self.sendData("\x1C"+"\x28", "\x02", True)
        def sendEmailValidatedDialog(self):
                self.sendData("\x1C"+"\x0C", "\x01", True)
        def sendEmailCodeInvalid(self):
                self.sendData("\x1C"+"\x0C", "\x00", True)
        def sendEmailValidated(self):
                self.sendData("\x1C"+"\x0D", "\x01", True)
        def sendEmailDialog(self):
                self.sendData("\x1C"+"\x0F", "", True)
        def sendEmailSent(self):
                self.sendData("\x1C"+"\x10", "\x01", True)
        def sendEmailAddrAlreadyUsed(self):
                self.sendData("\x1C"+"\x10", "\x00", True)
        def checkEmailAddrrsSelf(self, EmailAddr, username):
                dbcur.execute('SELECT Email FROM users WHERE name = %s', [username])
                rrfRows = dbcur.fetchone()
                if rrfRows is None:
                    return False
                elif rrfRows[0] is None:
                    return False
                else:
                    if rrfRows[0]==str(EmailAddr):
                        return True
                    else:
                        return False
        def checkDuplicateEmail(self, address):
                dbcur.execute('select Email from users')
                rrfRows = dbcur.fetchall()
                if rrfRows is None:
                        EList=[]
                else:
                        EList=[]
                        for rrf in rrfRows:
                                if rrf[0]=="None":
                                        pass
                                else:
                                        EList.append(str(rrf[0]).lower())
                if address.lower() in EList:
                        return True
                else:
                        return False
        def checkValidEmail(self, address):
                if not re.search("@", address):
                        return False
                elif not re.search("\.", address):
                        return False
                else:
                        t1=address.split("@")
                        t2=t1[1].split(".")
                        address=[]
                        address.append(t1[0])
                        address.append(t2[0])
                        address.append(t2[1])
                        #address = [Name,Domain,Ext]
                        if len(address[2])>6:
                                return False
                        address[1]=address[1].lower()
                        if address[0].lower() in ["admin", "administrator", "support", "nospam", "spam", "tech", "techsupport", "noreply", "automatic", "yahoo", "microsoft", "live", "hotmail", "google", "gmail", "gmx"]:
                                print "3999"
                                return False
                        return True

        def getPlayerData(self, Noshop = False):
                if Noshop:
                        return '#'.join(map(str,[self.username, self.playerCode, 0, int(self.isDead), self.score, int(self.hasCheese), self.titleNumber, self.avatar, "1;0,0,0,0,0,0,0,0,0", self.forumid, "78583a", "95d9d6", 0]))
                elif self.room:
                        if self.iskelet:
                                return '#'.join(map(str,[self.username, self.playerCode, 0, 0, self.score, int(self.hasCheese), self.titleNumber, self.avatar, "10;0", self.forumid, '0', '0', 0]))
                        else:
                                if self.room.isBootcamp or self.room.getPlayerCount()>=100:
                                        return '#'.join(map(str,[self.username, self.playerCode, 0, int(self.isDead), self.score, int(self.hasCheese), self.titleNumber, self.avatar, "1;0,0,0,0,0,0,0,0,0", self.forumid, '78583a', '95d9d6']))
                                if self.room.isHalloween and self.room.getPlayerCount(True)>=int(self.server.NeedsForHalloween):
                                         return '#'.join(map(str,[self.username, self.playerCode, 0, int(self.isDead), self.score, int(self.hasCheese), self.titleNumber, self.avatar, "1;0,0,0,0,0,0,0,0,0", self.forumid, '78583a', '95d9d6', 0]))
                                else:
                                        return '#'.join(map(str,[self.username, self.playerCode, 0, int(self.isDead), self.score, int(self.hasCheese), self.titleNumber, self.avatar, self.look, self.forumid, self.color1, self.color2, 0]))
                else:
                        return '#'.join(map(str,[self.username, self.playerCode, 0, int(self.isDead), self.score, int(self.hasCheese), self.titleNumber, self.avatar, self.look, self.forumid, self.color1, self.color2, 0]))

        def getPlayerDataDir(self):
                return '#'.join(map(str,[self.username, self.playerCode, 0, 0, self.score, int(self.hasCheese), self.titleNumber, self.avatar, "10;0", self.forumid, '0', '0', 0]))
        def enterRoom(self, roomName):
                roomName = roomName.replace("<", "&amp;lt;")
                
                if roomName.startswith("\x03"+"[Editeur] "):
                        editeurnamecheck = roomName.replace("\x03"+"[Editeur] ", "")
                        if editeurnamecheck == self.username:
                                pass
                        if editeurnamecheck != self.username:
                                self.transport.loseConnection()
                if roomName.startswith("\x03"+"[Totem] "):
                        editeurnamecheck = roomName.replace("\x03"+"[Totem] ", "")
                        if editeurnamecheck == self.username:
                                pass
                        if editeurnamecheck != self.username:
                                self.transport.loseConnection()
                if roomName.startswith("\x03"+"[Private] "):
                        editeurnamecheck = roomName.replace("\x03"+"[Private] ", "")
                        if editeurnamecheck == self.username:
                                pass
                        elif self.room.checkRoomInvite(self, editeurnamecheck):
                                pass
                        elif self.privilegeLevel==10 or self.privilegeLevel==6 or self.privilegeLevel==5:
                                pass
                        else:
                                self.transport.loseConnection()

                if roomName in self.server.rooms:
                        if self.server.rooms[roomName].getPlayerCount() >= self.server.rooms[roomName].playerLimit:
                                if self.privilegeLevel not in [3,5,6,10]:
                                        if roomName.isdigit:
                                                self.enterRoom(self.server.recommendRoom(self.Langue))
                                        else:
                                                self.enterRoom(self.server.recommendRoomPrefixed(roomName, self.Langue))
                                        return
                
                if self.room:
                        if self.AwakeTimerKickTimer:
                                try:
                                        self.AwakeTimerKickTimer.cancel()
                                except:
                                        self.AwakeTimerKickTimer=None
                        self.room.removeClient(self)

                self.resetPlay()
                self.score = 0
                if roomName.startswith(self.username):
                        if self.room.pwing:
                                data = str(roomName)
                                datas = struct.pack('!h', len(data))
                                self.sendData("\x05\x27"+datas+data, [], True)

                self.sendEnterRoom(roomName)
                
                #self.room =
                self.LoadCountTotem = False
                self.isDead = True
                if roomName.startswith("*") or roomName.startswith("\x03"):
                        self.roomname = roomName
                        self.server.addClientToRoom(self, roomName)
                else:
                        self.roomname = self.Langue+"-"+roomName
                        self.server.addClientToRoom(self, self.Langue+"-"+roomName)
        def AwakeTimerKick(self):
                if self.room:
                        self.updateSelfSQL()
                        self.sendPlayerDied(self.playerCode, self.score)
                        self.room.removeClient(self)
                self.transport.loseConnection()

        def Map777Fishing(self):
                if self.isFishing:
                        if self.room.currentWorld==1:
                                item=random.randrange(1,4)
                                if int(self.isFishing)==1:
                                        if item==1:
                                                self.sendAnimZelda(self.playerCode, -1, 0)
                                                self.shopcheese=self.shopcheese+2
                                        elif item==2:
                                                if not self.checkInShop("28"):
                                                        self.sendAnimZelda(self.playerCode, 2, 8)
                                                        if self.shopitems=="":
                                                                self.shopitems="28"
                                                        else:
                                                                self.shopitems=self.shopitems+",28"
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese=self.shopcheese+2
                                        elif item==3:
                                                if not self.checkInShop("311"):
                                                        self.sendAnimZelda(self.playerCode, 3, 11)
                                                        if self.shopitems=="":
                                                                self.shopitems="311"
                                                        else:
                                                                self.shopitems=self.shopitems+",311"
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese=self.shopcheese+2
                                        else:
                                                self.sendAnimZelda(self.playerCode, -1, 0)
                                                self.shopcheese=self.shopcheese+2

                                elif int(self.isFishing)==2:
                                        if item==1:
                                                self.sendAnimZelda(self.playerCode, -1, 0)
                                                self.shopcheese=self.shopcheese+2
                                        elif item==2:
                                                if not self.checkInShop("56"):
                                                        self.sendAnimZelda(self.playerCode, 0, 56)
                                                        if self.shopitems=="":
                                                                self.shopitems="56"
                                                        else:
                                                                self.shopitems=self.shopitems+",56"
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese=self.shopcheese+2
                                        elif item==3:
                                                if not self.checkInShop("57"):
                                                        self.sendAnimZelda(self.playerCode, 0, 57)
                                                        if self.shopitems=="":
                                                                self.shopitems="57"
                                                        else:
                                                                self.shopitems=self.shopitems+",57"
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese=self.shopcheese+2
                                        else:
                                                self.sendAnimZelda(self.playerCode, -1, 0)
                                                self.shopcheese=self.shopcheese+2

                                elif int(self.isFishing)==3:
                                        if item==1:
                                                self.sendAnimZelda(self.playerCode, -1, 0)
                                                self.shopcheese=self.shopcheese+2
                                        elif item==2:
                                                if not self.checkInShop("58"):
                                                        self.sendAnimZelda(self.playerCode, 0, 58)
                                                        if self.shopitems=="":
                                                                self.shopitems="58"
                                                        else:
                                                                self.shopitems=self.shopitems+",58"
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese=self.shopcheese+2
                                        elif item==3:
                                                if not self.checkInShop("27"):
                                                        self.sendAnimZelda(self.playerCode, 2, 7)
                                                        if self.shopitems=="":
                                                                self.shopitems="27"
                                                        else:
                                                                self.shopitems=self.shopitems+",27"
                                                else:
                                                        self.sendAnimZelda(self.playerCode, -1, 0)
                                                        self.shopcheese=self.shopcheese+2
                                        else:
                                                self.sendAnimZelda(self.playerCode, -1, 0)
                                                self.shopcheese=self.shopcheese+2
                                else:
                                        pass

        def initTotemEditor(self):
                if self.RTotem:
                        self.sendTotemItemCount(0)
                        self.RTotem=False
                else:
                        if self.STotem[1]!="":
                                self.Totem=[self.STotem[0], self.STotem[1]]
                                self.sendTotemItemCount(self.STotem[0])
                                self.sendTotem(self.STotem[1], 400, 203, self.playerCode)
                        else:
                                self.sendTotemItemCount(0)

        def resetPlay(self):
                self.isShaman = False
                self.hasCheese = False
                self.isSyncroniser = False
                self.isFishing = False
                self.isZombie = False
                self.canMeep = False
                self.UTotem = False
                self.JumpCheck = 1
                self.IcedMouses = 2
                self.tickets = 0
                self.vel = 0
                self.isDead = False
                self.ShamanRespawn = False
                self.Balonlar = 0
                self.iskelet = False
                self.isHole = False
        def startPlay(self, ISCM, SPEC):
                if self.room.getPlayerCount()>=2 and self.room.countStats:
                        self.roundCount=self.roundCount+1
                self.resetPlay()

                self.duckCheckCounter = 0
                #self.sendGiftAmount(self.giftCount)
                
                if SPEC == 1:
                        self.isDead=True
                        self.SPEC=True
                else:
                        self.SPEC=False
                        self.isDead=False
                if self.room.isSandbox:
                        self.isDead=True

                self.hasCheese=False
                self.room.isEventMap = False

                if ISCM!=-1:
                        self.sendNewPartyCustomMap(self.room.ISCM, self.room.ISCMdata[2], self.room.ISCMdata[1], self.room.ISCMdata[5])
                elif self.room.ISCM!=-1:
                        self.sendNewPartyCustomMap(self.room.ISCM, self.room.ISCMdata[2], self.room.ISCMdata[1], self.room.ISCMdata[5])
                elif self.room.ISCMV!=0 and self.room.isEditeur:
                        self.sendNewPartyMapEditeur(self.room.ISCMVdata[2], self.room.ISCMVdata[1], self.room.ISCMVdata[5])
                else:
                        self.sendNewParty()

                if self.room.noShaman:
                        shamanCode = 0
                        shamanCode2 = 0
                else:
                        if self.room.isDoubleMap:
                                shamans = self.room.getDoubleShamanCode()
                                shamanCode = shamans[0]
                                shamanCode2 = shamans[1]
                        else:
                                shamanCode = self.room.getShamanCode()
                #Ruhani Lider
                self.sendData("\x08\x0A", struct.pack("!bb", 26, 116), True)#I not
                self.sendData("\x08\x0A", struct.pack("!b", 0), True)
                for player in self.room.clients.values():
                        if player.playerCode == self.room.currentShamanCode or player.playerCode == self.room.currentSecondShamanCode:
                                becerilerimindevrimi=","+str(player.becerilerim)
                                if ",1_" in becerilerimindevrimi:
                                        if ",1_1" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 36, 110), True)#Peyniri büyütme
                                        if ",1_2" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 36, 120), True)#Peyniri büyütme
                                        if ",1_3" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 36, -126), True)#Peyniri büyütme
                                        if ",1_4" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 36, -116), True)#Peyniri büyütme
                                        if ",1_5" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 36, -106), True)#Peyniri büyütme
                                if ",2_" in becerilerimindevrimi:
                                        if ",2_1" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 51, 114), True)#Büyüme
                                        if ",2_2" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 51, 116), True)#Büyüme
                                        if ",2_3" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack("!bb", 51, 118), True)#Büyüme
                                        if ",2_4" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack("!bb", 51, 120), True)#Büyüme
                                        if ",2_5" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack("!bb", 51, 122), True)#Büyüme
                                if ",26_" in becerilerimindevrimi:
                                        if ",26_1" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 48, 1), True)#Roket
                                        if ",26_2" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 48, 2), True)#Roket
                                        if ",26_3" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 48, 3), True)#Roket
                                        if ",26_4" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 48, 4), True)#Roket
                                        if ",26_5" in becerilerimindevrimi:
                                                self.sendData("\x08\x0A", struct.pack('!bb', 48, 5), True)#Roket
                if self.playerCode == self.room.currentShamanCode or self.playerCode == self.room.currentSecondShamanCode:
                        becerilerimindevrimi=","+str(self.becerilerim)
                        if ",4_" in becerilerimindevrimi:
                                self.ShamanRespawn = True
                        if ",5_" in becerilerimindevrimi:
                                if ",5_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 41, 1), True)#Kalp
                                if ",5_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 41, 2), True)#Kalp
                                if ",5_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 41, 3), True)#Kalp
                                if ",5_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 41, 4), True)#Kalp
                                if ",5_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 41, 5), True)#Kalp
                        if ",6_" in becerilerimindevrimi:
                                if ",6_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 20, 1), True)#Diriltme kodu, sayısı
                                        self.diriltme = 1
                                if ",6_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 20, 1), True)#Diriltme kodu, sayısı
                                        self.diriltme = 2
                                if ",6_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 20, 1), True)#Diriltme kodu, sayısı
                                        self.diriltme = 3
                                if ",6_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 20, 1), True)#Diriltme kodu, sayısı
                                        self.diriltme = 4
                                if ",6_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 20, 1), True)#Diriltme kodu, sayısı
                                        self.diriltme = 5
                        if ",7_" in becerilerimindevrimi:
                                self.sendData("\x08\x0A", struct.pack("!bb", 42, 100), True)#Peynir
                        if ",9_" in becerilerimindevrimi:
                                if ",9_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 19, 1), True)#Anti yer çekimi
                                if ",9_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 19, 2), True)#Anti yer çekimi
                                if ",9_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 19, 3), True)#Anti yer çekimi
                                if ",9_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 19, 4), True)#Anti yer çekimi
                                if ",9_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 19, 5), True)#Anti yer çekimi
                        if ",10_" in becerilerimindevrimi:
                                self.sendData("\x08\x0A", struct.pack("!bb", 38, 3), True)#Defilante hız
                        if ",11_" in becerilerimindevrimi:
                                if ",11_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 29, 1), True)#Öldükten sonra yaratma
                                if ",11_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 29, 2), True)#Öldükten sonra yaratma
                                if ",11_3" in becerilerimindevrimi:
                                      self.sendData("\x08\x0A", struct.pack("!bb", 29, 3), True)#Öldükten sonra yaratma
                                if ",11_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 29, 4), True)#Öldükten sonra yaratma
                                if ",11_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 29, 5), True)#Öldükten sonra yaratma
                        if ",13_" in becerilerimindevrimi:
                                if ",13_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 37, 3), True)#Defilante zıplama
                        if ",14_" in becerilerimindevrimi:
                                self.sendData("\x08\x0A", struct.pack("!bb", 46, 100), True)#Bulut
                #Son

                #Rüzgar ustası
                        if ",20_" in becerilerimindevrimi:
                                if ",20_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 11, 114), True)#Hızlanma
                                if ",20_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 11, 118), True)#Hızlanma
                                if ",20_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 11, 112), True)#Hızlanma
                                if ",20_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 11, 116), True)#Hızlanma
                                if ",20_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 11, 120), True)#Hızlanma
                        if ",21_" in becerilerimindevrimi:
                                if ",21_1" in becerilerimindevrimi:
                                        self.Balonlar = 1
                                if ",21_2" in becerilerimindevrimi:
                                        self.Balonlar = 2
                                if ",21_3" in becerilerimindevrimi:
                                        self.Balonlar = 3
                                if ",21_4" in becerilerimindevrimi:
                                        self.Balonlar = 4
                                if ",21_5" in becerilerimindevrimi:
                                        self.Balonlar = 5
                        if ",22_" in becerilerimindevrimi:
                                if ",22_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 14, 25), True)#Krampon
                                if ",22_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 14, 30), True)#Krampon
                                if ",22_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 14, 35), True)#Krampon
                                if ",22_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 14, 40), True)#Krampon
                                if ",22_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 14, 45), True)#Krampon
                        if ",23_" in becerilerimindevrimi:
                                if ",23_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 13, 40), True)#Diyet
                                if ",23_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 13, 50), True)#Diyet
                                if ",23_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 13, 60), True)#Diyet
                                if ",23_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 13, 70), True)#Diyet
                                if ",23_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 13, 80), True)#Diyet
                        if ",27_" in becerilerimindevrimi:
                                self.sendData("\x08\x0A", struct.pack("!bb", 55, 100), True)#Arkadaşlık kutusu
                        if ",28_" in becerilerimindevrimi:
                                if ",28_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 54, 2), True)#Küçük kalaslar
                                if ",28_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 54, 4), True)#Küçük kalaslar
                                if ",28_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 54, 6), True)#Küçük kalaslar
                                if ",28_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 54, 8), True)#Küçük kalaslar
                                if ",28_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 54, 10), True)#Küçük kalaslar
                        if ",29_" in becerilerimindevrimi:
                                if ",29_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 43, 1), True)#Işınlanma
                                if ",29_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 43, 2), True)#Işınlanma
                                if ",29_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 43, 3), True)#Işınlanma
                                if ",29_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 43, 4), True)#Işınlanma
                                if ",29_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 43, 5), True)#Işınlanma
                        if ",30_" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 15, 1), True)#Yansıtıcı
                        if ",31_" in becerilerimindevrimi:
                                if ",31_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 18, 1), True)#Dönüşüm
                                if ",31_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 18, 2), True)#Dönüşüm
                                if ",31_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 18, 3), True)#Dönüşüm
                                if ",31_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 18, 4), True)#Dönüşüm
                                if ",31_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 18, 5), True)#Dönüşüm
                        if ",32_" in becerilerimindevrimi:
                                if ",32_1" in becerilerimindevrimi:
                                        self.IcedMouses += 1
                                if ",32_2" in becerilerimindevrimi:
                                        self.IcedMouses += 2
                                if ",32_3" in becerilerimindevrimi:
                                        self.IcedMouses += 3
                                if ",32_4" in becerilerimindevrimi:
                                        self.IcedMouses += 4
                                if ",32_5" in becerilerimindevrimi:
                                        self.IcedMouses += 5
                        if ",33_" in becerilerimindevrimi:
                                self.sendData("\x08\x0A", struct.pack("!bb", 16, 1), True)#Yansıtıcı
                        if ",34_" in becerilerimindevrimi:
                                self.sendData("\x08\x0A", struct.pack('!bb', 17, 1), True)#Kanat
                #Son
                
                #Mekanist
                        if ",40_" in becerilerimindevrimi:
                                if ",40_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 22, 30), True)#Büyük ruh
                                if ",40_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 22, 40), True)#Büyük ruh
                                if ",40_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 22, 50), True)#Büyük ruh
                                if ",40_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 22, 60), True)#Büyük ruh
                                if ",40_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 22, 70), True)#Büyük ruh
                        if ",41_" in becerilerimindevrimi:
                                if ",41_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 25, 1), True)#Çoklu toplar
                                if ",41_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 25, 2), True)#Çoklu toplar
                                if ",41_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 25, 3), True)#Çoklu toplar
                                if ",41_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 25, 4), True)#Çoklu toplar
                                if ",41_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 25, 5), True)#Çoklu toplar                                
                        if ",42_" in becerilerimindevrimi:
                                if ",42_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 32, -16), True)#Ağır drag
                                if ",42_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 32, -26), True)#Ağır drag
                                if ",42_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 32, -36), True)#Ağır drag
                                if ",42_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 32, -46), True)#Ağır drag
                                if ",42_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 32, -56), True)#Ağır drag
                        if ",43_" in becerilerimindevrimi:
                                if ",43_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 31, -16), True)#Ağır örs
                                if ",43_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 31, -26), True)#Ağır örs
                                if ",43_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 31, -36), True)#Ağır örs
                                if ",43_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 31, -46), True)#Ağır örs
                                if ",43_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 31, -56), True)#Ağır örs 
                        if ",44_" in becerilerimindevrimi:
                                self.sendData("\x08\x0A", struct.pack("!bb", 39, 1), True)#Buz zemini
                        if ",45_" in becerilerimindevrimi:
                                if ",45_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 24, 110), True)#Balonun hızını arttırma
                                if ",45_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 24, 120), True)#Balonun hızını arttırma
                                if ",45_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 24, -126), True)#Balonun hızını arttırma
                                if ",45_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 24, -116), True)#Balonun hızını arttırma
                                if ",45_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 24, -106), True)#Balonun hızını arttırma
                        if ",46_" in becerilerimindevrimi:
                                if ",46_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 28, 1), True)#Yolundan ayrılmayan sperm
                                if ",46_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 28, 2), True)#Yolundan ayrılmayan sperm
                                if ",46_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 28, 3), True)#Yolundan ayrılmayan sperm
                                if ",46_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 28, 4), True)#Yolundan ayrılmayan sperm
                                if ",46_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 28, 5), True)#Yolundan ayrılmayan sperm
                        if ",47_" in becerilerimindevrimi:
                                self.sendData("\x08\x0A", struct.pack("!bb", 40, 1), True)#Çikolata zemini
                        if ",48_" in becerilerimindevrimi:
                                if ",48_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 23, 1), True)#Anında balon yaratma
                                if ",48_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 23, 2), True)#Anında balon yaratma
                                if ",48_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 23, 3), True)#Anında balon yaratma
                                if ",48_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 23, 4), True)#Anında balon yaratma
                                if ",48_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 23, 5), True)#Anında balon yaratma
                        if ",49_" in becerilerimindevrimi:
                                if ",49_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 26, 110), True)#Uzman yaratıcı
                                if ",49_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 26, 120), True)#Uzman yaratıcı
                                if ",49_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 26, -126), True)#Uzman yaratıcı
                                if ",49_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 26, -116), True)#Uzman yaratıcı
                                if ",49_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 26, -106), True)#Uzman yaratıcı             
                        if ",50_" in becerilerimindevrimi:
                                self.sendData("\x08\x0A", struct.pack("!bb", 27, 1), True)#Kötü ruh
                        if ",51_" in becerilerimindevrimi:
                                if ",51_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 34, 1), True)#İtem yoketme
                                if ",51_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 34, 2), True)#İtem yoketme
                                if ",51_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 34, 3), True)#İtem yoketme
                                if ",51_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 34, 4), True)#İtem yoketme
                                if ",51_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 34, 5), True)#İtem yoketme             
                        if ",52_" in becerilerimindevrimi:
                                if ",52_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 49, 1), True)#Saydamlaştırma
                                if ",52_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 49, 2), True)#Saydamlaştırma
                                if ",52_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 49, 3), True)#Saydamlaştırma
                                if ",52_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 49, 4), True)#Saydamlaştırma
                                if ",52_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 49, 5), True)#Saydamlaştırma             
                        if ",53_" in becerilerimindevrimi:
                                if ",53_1" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 33, 1), True)#Koyun
                                if ",53_2" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 33, 2), True)#Koyun
                                if ",53_3" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 33, 3), True)#Koyun
                                if ",53_4" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 33, 4), True)#Koyun
                                if ",53_5" in becerilerimindevrimi:
                                        self.sendData("\x08\x0A", struct.pack("!bb", 33, 5), True)#Koyun             
                        if ",54_" in becerilerimindevrimi:
                                self.sendData("\x08\x0A", struct.pack("!bb", 21, -126), True)#Kartal gözü!        
                #Son
                if not self.SPEC:
                        if self.room.isRacing or self.room.isDefilante:
                                highPlayerCode = self.room.getHighestPlayer()
                                if self.room.rounds >= 10:
                                        for playerCode, client in self.room.clients.items():
                                                client.score = 0

                self.sendPlayerList()

                if self.room.currentWorld in [108, 109]:
                        self.catchTheCheeseNoShaman(shamanCode)
                elif str(self.room.ISCM) == "1":
                        shamanCode = 0
                        self.sendBoat()
                        self.room.NavegationStartTimer = reactor.callLater(9, self.sendNavegation)
                        self.room.WindStartTimer = reactor.callLater(17, self.sendWind)
                        self.room.RainStartTimer = reactor.callLater(30, self.sendRain)
                        self.room.StormStartTimer = reactor.callLater(40, self.sendStorm)
                        self.room.Thunder1StartTimer = reactor.callLater(47, self.sendThunder1)
                        self.room.Thunder2StartTimer = reactor.callLater(52, self.sendThunder2)
                        self.room.Thunder3StartTimer = reactor.callLater(60, self.sendThunder3)
                        self.room.Thunder4StartTimer = reactor.callLater(68, self.sendThunder4)
                        self.room.Thunder5StartTimer = reactor.callLater(80, self.sendThunder5)
                        self.room.Thunder6StartTimer = reactor.callLater(90, self.sendThunder6)
                else:
                        if self.room.ZombieTimer:
                                try:
                                        self.room.ZombieTimer.cancel()
                                except:
                                        self.room.ZombieTimer=None

                        if self.room.NavegationStartTimer:
                                try:
                                        self.room.NavegationStartTimer.cancel()
                                except:
                                        self.room.NavegationStartTimer=None

                        if self.room.WindStartTimer:
                                try:
                                        self.room.WindStartTimer.cancel()
                                except:
                                        self.room.WindStartTimer=None

                        if self.room.RainStartTimer:
                                try:
                                        self.room.RainStartTimer.cancel()
                                except:
                                        self.room.RainStartTimer=None

                        if self.room.StormStartTimer:
                                try:
                                        self.room.StormStartTimer.cancel()
                                except:
                                        self.room.StormStartTimer=None

                        if self.room.Thunder1StartTimer:
                                try:
                                        self.room.Thunder1StartTimer.cancel()
                                except:
                                        self.room.Thunder1StartTimer=None

                        if self.room.Thunder2StartTimer:
                                try:
                                        self.room.Thunder2StartTimer.cancel()
                                except:
                                        self.room.Thunder2StartTimer=None

                        if self.room.Thunder3StartTimer:
                                try:
                                        self.room.Thunder3StartTimer.cancel()
                                except:
                                        self.room.Thunder3StartTimer=None

                        if self.room.Thunder4StartTimer:
                                try:
                                        self.room.Thunder4StartTimer.cancel()
                                except:
                                        self.room.Thunder4StartTimer=None

                        if self.room.Thunder5StartTimer:
                                try:
                                        self.room.Thunder5StartTimer.cancel()
                                except:
                                        self.room.Thunder5StartTimer=None

                        if self.room.Thunder6StartTimer:
                                try:
                                        self.room.Thunder6StartTimer.cancel()
                                except:
                                        self.room.Thunder6StartTimer=None

                if self.room.currentWorld in [110, 111, 112, 113]:
                        self.catchTheCheeseShaman(shamanCode)
                else:
                        if self.room.isDoubleMap:
                                self.sendDoubleShamanCode(shamanCode, shamanCode2)
                        else:
                                self.sendShamanCode(shamanCode)
                if not self.room.bulut1 == 0:
                        self.room.bulut1 = 0
                if not self.room.bulut2 == 0:
                        self.room.bulut2 = 0
                if not self.room.arkadaslik2 == 0:
                        self.room.arkadaslik2 = 0
                if not self.room.arkadaslik1 == 0:
                        self.room.arkadaslik1 = 0
                if self.room.currentWorld==888:
                        self.sendTime(60)
                elif self.room.ISCMdata[5] == 11:
                        if self.room.getPlayerCount(False)>=2 and self.room.countStats:
                                self.room.ZombieTimer = reactor.callLater(16.5, self.room.goZombified)
                elif self.room.ISCM in [5]:
                        self.room.isEventMap = True
                else:
                        self.sendTime(self.room.roundTime+int((self.room.gameStartTime-getTime())))
                        if self.room.ZombieTimer:
                                try:
                                    self.room.ZombieTimer.cancel()
                                except:
                                    self.room.ZombieTimer=None
                #if self.room.isSandbox:
                #       self.sendTime(0)

                if self.room.currentWorld in self.server.NPCMaps:
                        RunList=self.server.NPCs_M[:]
                        for position, npc in enumerate(RunList):
                                if npc[7]==self.room.currentWorld:
                                        self.sendData("\x15" + "\x15", [npc[0], npc[1], npc[2], npc[3], npc[4], npc[5], npc[6]])
                                        if npc[8]==True:
                                                ExList=npc[9][:]
                                                for position, ExData in enumerate(ExList):
                                                        self.sendData(ExData[0], ExData[1], True)
                if self.room.name in self.server.NPCRooms:
                        RunList=self.server.NPCs_R[:]
                        for position, npc in enumerate(RunList):
                                if npc[7]==self.room.name:
                                        #                                id     name    shop      x       y       dir    click
                                        self.sendData("\x15" + "\x15", [npc[0], npc[1], npc[2], npc[3], npc[4], npc[5], npc[6]])
                                        if npc[8]==True:
                                                ExList=npc[9][:]
                                                for position, ExData in enumerate(ExList):
                                                        self.sendData(ExData[0], ExData[1], True)

                if self.room.PRShamanIsShaman:
                        self.room.forceNextShaman = self.room.getPlayerCode(self.room.name.replace("\x03[Private] ", ""))


                if self.room.isEventMap:
                        if not SPEC:
                                if self.playerCode == self.room.getHighestPlayer():
                                        self.vel = 14
                                        self.setNameColor(self.playerCode, "010101")
                                        self.room.sendAllBin("\x08\x24",struct.pack("!i", int(self.playerCode))+"\x10"+struct.pack("!h", len("0,0,0,17"))+"0,0,0,17")
                                        self.room.sendAllBin("\x08\x25",struct.pack("!i", int(self.playerCode))+struct.pack("!b", self.vel))

                if self.room.currentWorld in range(200,210+1):
                        self.sendData("\x1B" + "\x0A", "", True)

                if self.room.currentWorld == 560:
                        self.sendStartSnowStorm()
                        reactor.callLater(120, self.sendEndSnowStorm)
                        DAY = str(str(datetime.now()).split("-")[2][:2])
                        self.sendData("\x1A" + "\x1D" + struct.pack("!h", int(DAY)), [], True)

                if self.room.currentWorld == 561:
                        self.sendStartSnowStorm()
                        reactor.callLater(120, self.sendEndSnowStorm)

                if shamanCode == self.playerCode:
                        self.isShaman = True
                                
                if self.room.isDoubleMap:
                        if shamanCode2 == self.playerCode:
                                self.isShaman = True

                if self.room.isSurvivor and self.room.ISCMdata[5] == 10:
                        if self.isShaman:
                                self.canMeep = True
                                self.sendData("\x08\x27", None, True)
                

                if self.room.isMinigame:
                        self.room.minigame.event_newround(self)

                if self.room.isSharpie:
                        self.enableKey(32)
                        message = "<R>No hack! Sem hack!<BV> Press space / Pressione espaco / Bosluk Tusuna Bas<BR><J>Firsts/stats don't count / Nao vale first/qj/saves/etc"
                        self.sendMessage(message)
                        
                if not SPEC:
                        if self.room.isRacing or self.room.isDefilante:
                                if self.room.rounds >= 10:
                                        self.room.rounds=0
                                self.sendData("\x05\x01"+struct.pack("!b", int(self.room.rounds))+struct.pack("!i", int(highPlayerCode)), [], True)

                syncroniserCode = self.room.getSyncroniserCode()
                if self.room.sSync:
                        self.sendSynchroniser(syncroniserCode, True)
                        if syncroniserCode == self.playerCode:
                                self.isSyncroniser = True

                if self.room.eSync:
                        self.sendSynchroniser(self.playerCode, True)

                if self.room.isCurrentlyPlayingRoom:
                        self.sendNoMapStartTimer()
                elif self.room.isSandbox:
                        self.sendNoMapStartTimer()
                        self.isDead=False
                        #self.room.sendAllOthers(self, "\x08" + "\x08", [self.getPlayerData(), "1"])
                        #self.sendData("\x08" + "\x08",[self.getPlayerData(), "0"])
                        self.room.sendAll("\x08" + "\x09",[self.getPlayerData()])
                elif self.room.isEditeur:
                        self.sendNoMapStartTimer()
                elif self.room.isBootcamp:
                        self.sendNoMapStartTimer()
                elif self.room.name.startswith("\x03[Totem] "):
                        self.sendNoMapStartTimer()
                elif self.room.name.startswith("\x03[Tutorial] "):
                        self.sendNoMapStartTimer()
                else:
                        self.mapStartTimer()


                if SPEC:
                        if len(self.room.anchors) > 0:
                                self.sendSetAnchors(self.room.anchors)

                if self.room.autoRespawn or self.room.isTribehouseMap:
                        self.playerStartTime = getTime()
                if self.room.isTotemEditeur:
                        self.initTotemEditor()


        

        def startValidate(self, mapxml):
                self.room.isValidate=1
                self.resetPlay()
                #self.sendGiftAmount(self.giftCount)
                self.room.ISCM = -1
                mapname="-"
                perma="0"
                self.sendNewPartyMapEditeur(mapxml, mapname, perma)
                self.sendTime(120)
                self.sendPlayerList()

                shamanCode = self.room.getShamanCode()
                self.sendShamanCode(shamanCode)

                if shamanCode == self.playerCode:
                        self.isShaman = True

                syncroniserCode = self.room.getSyncroniserCode()
                self.sendSynchroniser(syncroniserCode, True)
                if syncroniserCode == self.playerCode:
                        self.isSyncroniser = True

        def updateSelfSQL(self):
                if self.privilegeLevel==0:
                        pass
                else:
                        self.server.updatePlayerStats(self.username, self.roundCount, self.micesaves, self.shamancheese, self.firstcount, self.cheesecount, self.shopcheese, self.shopitems, self.look, self.ShamanTitleList, self.CheeseTitleList, self.FirstTitleList, self.titleList, self.hardMode, self.hardModeSaves, self.HardModeTitleList, self.ShopTitleList, self.bootcampcount, self.BootcampTitleList, self.shopfraises, self.money, self.baffwins, self.shopcoins, self.becericount, self.becerilerim,self.levelcount,self.nextlevel)




        def updateLanguageUsuario(self, player, newlanguage):
                self.numlanguage = newlanguage
                newlanguagei = int(struct.unpack("!b", newlanguage)[0])
                if newlanguagei == 0: binself = "EN"
                elif newlanguagei == 1: binself = "FR"
                elif newlanguagei == 2: binself = "RU"
                elif newlanguagei == 3: binself = "BR"
                elif newlanguagei == 4: binself = "ES"
                elif newlanguagei == 5: binself = "CN"
                elif newlanguagei == 6: binself = "TR"
                elif newlanguagei == 7: binself = "VK"
                elif newlanguagei == 8: binself = "PL"
                elif newlanguagei == 9: binself = "HU"
                elif newlanguagei == 10: binself = "NL"
                elif newlanguagei == 11: binself = "RO"
                elif newlanguagei == 12: binself = "ID"
                elif newlanguagei == 13: binself = "DE"
                elif newlanguagei == 14: binself = "E2"
                else: binself = "EN"
                self.Langue = binself

        def login(self, username, passwordHash, startRoom):
                if username=="":
                        username="Souris"
                if startRoom == "1":
                        startRoom = ""
                if not username.isalpha():
                        username=""
                        self.transport.loseConnection()
                        



                self.isIPban = False
                        
                if passwordHash == "":
                        if len(username)>12:
                                priv = -1
                                self.transport.loseConnection()
                        else:
                                username = "*"+username
                                priv = 0
                                username = self.server.checkAlreadyExistingGuest(username)
                                startRoom = "\x03[Tutorial] "+username
                else:
                        username=username.lower()
                        username=username.capitalize()
                        if len(username)>12:
                                username=""
                                self.transport.loseConnection()
                        elif not username.isalpha():
                                username=""
                                self.transport.loseConnection()
                        priv = self.server.authenticate(username, passwordHash)

                if priv != 0:
                        username=username.lower()
                        username=username.capitalize()
                dbcur.execute('select * from userpermaban where name = %s', [username])
                rrf = dbcur.fetchone()
                if rrf is None:
                        pass
                else:
                        if priv!=-1:
                                priv = -1
                                self.sendPermaBan()
                                self.transport.loseConnection()

                if not username.startswith("*"):
                        self.TempBan=self.server.checkTempBan(username)
                if self.TempBan:
                        if priv!=-1:
                                try:
                                 time=int(self.timestampCalc(self.server.getTempBanInfo(username)[1])[2])
                                 if time<=0:
                                        self.TempBan=False
                                        self.server.removeTempBan(username)
                                 else:
                                        self.sendPlayerBanLogin(time, self.server.getTempBanInfo(username)[2])
                                        priv = -1
                                        self.transport.loseConnection()
                                except:
                                        pass
                if self.isIPban!=False:
                        priv = -1
                if self.sentinelle:
                        #priv = -1
                        pass
                if self.isinit:
                        priv = -1
                if self.loadercheck == False:
                        priv = -1
                if self.logonsuccess:
                        priv = -1
                if self.wrongPasswordAttempts>=4:
                        self.sendData("\x1A" + "\x03", [""])
                        priv = -1
                        self.server.tempBanIPExact(self.address[0], 120)
                        self.transport.loseConnection()

                if priv == -1:
                        self.FreezePlayerData(5)
                        reactor.callLater(5, self.sendData, "\x1A" + "\x03", [""])
                        self.wrongPasswordAttempts+=1
                else:
                        alreadyconnect = self.server.checkAlreadyConnectedAccount(username)
                        if alreadyconnect == True:
                                self.sendData("\x1A" + "\x03", ["", ""])
                        else:
                                self.logonsuccess = True
                                self.username = username
                                self.playerCode = self.server.generatePlayerCode()
                                self.privilegeLevel = priv

                                AllPlayerStats=self.server.getAllPlayerData(username)
                                self.hardMode=AllPlayerStats[24]
                                self.hardModeSaves=AllPlayerStats[25]
                                self.EmailAddress=AllPlayerStats[27]
                                self.ValidatedEmail = self.server.str2bool(self.server.getPlayerBoolenEmail(username))

                                if self.ValidatedEmail:
                                        self.sendEmailValidated()
                                if self.EmailAddress=="" or self.EmailAddress is None:
                                        self.EmailAddress=""
                                        self.ValidatedEmail = False
                        
                                self.titleNumber = self.server.getCurrentTitle(username)
                                self.roundCount = self.server.getRoundsCount(username)
                                self.tribe = self.server.getTribeName(username)
                                if self.tribe:
                                        UserTribeInfo=self.server.getUserTribeInfo(self.username)
                                        TribeData       =self.server.getTribeData(UserTribeInfo[1])
                                        self.TribeCode  = TribeData[0]
                                        self.TribeName  = TribeData[1]
                                        self.TribeFromage = TribeData[2]
                                        self.TribeMessage = TribeData[3]
                                        self.TribeInfo  = TribeData[4].split("|")
                                        self.TribeRank  = UserTribeInfo[2]
                                        self.TribeHouse = TribeData[5]
                                        self.isInTribe  = True
                                self.micesaves = self.server.getSavesCount(username)
                                self.shamancheese = self.server.getShamanCheeseCount(username)
                                self.firstcount = self.server.getFirstCount(username)
                                self.cheesecount = self.server.getCheeseCount(username)
                                self.bootcampcount = self.server.getBootcampCount(username)
                                self.baffwins = self.server.getBaffWins(username)
                                self.giftInfo = self.server.getGiftInfo(username)
                                self.shopcheese = self.server.getShopCheese(username)
                                self.shopfraises = self.server.getShopFraises(username)
                                self.money = self.server.getMoney(username)
                                self.shopcoins = self.server.getShopCoins(username)
                                self.shopitems = self.server.getUserShop(username)
                                self.levelcount = self.server.getLevelCount(username)
                                self.nextlevel = self.server.getNextLevel(username)
                                self.banhours = self.server.getTotalBanHours(username)
                                self.friendsList = self.server.getUserFriends(username)
                                self.becericount = self.server.getBeceriCount(username)
                                self.becerilerim = self.server.getBecerilerim(username)
                                self.look = self.server.getUserLook(username)

                                self.friendsList = self.friendsList.strip('[]').replace(" ","").replace("\"","").replace(","," ")
                                self.isZombie = False
                                self.x = 0
                                self.y = 0


                                if self.friendsList == "":
                                        self.friendsList = []
                                else:
                                        self.friendsList = self.friendsList.split(" ")
                                
                                titlelists = self.server.getTitleLists(username)
                                self.CheeseTitleList = str(titlelists[0].strip('[]').replace("\"","").replace(","," ")).split(" ")
                                self.FirstTitleList = str(titlelists[1].strip('[]').replace("\"","").replace(","," ")).split(" ")
                                self.ShamanTitleList = str(titlelists[2].strip('[]').replace("\"","").replace(","," ")).split(" ")
                                self.ShopTitleList = str(titlelists[3].strip('[]').replace("\"","").replace(","," ")).split(" ")
                                self.GiftTitleList = str(titlelists[4].strip('[]').replace("\"","").replace(","," ")).split(" ")
                                self.HardModeTitleList = str(titlelists[5].strip('[]').replace("\"","").replace(","," ")).split(" ")
                                self.BootcampTitleList = str(titlelists[6].strip('[]').replace("\"","").replace(","," ")).split(" ")
                                self.checkAndRebuildTitleList("cheese")
                                self.checkAndRebuildTitleList("first")
                                self.checkAndRebuildTitleList("shaman")
                                self.checkAndRebuildTitleList("shop")
                                self.checkAndRebuildTitleList("hardmode")
                                self.checkAndRebuildTitleList("bootcamp")
                                self.titleList = ["0"]+self.GiftTitleList+self.ShamanTitleList+self.HardModeTitleList+self.CheeseTitleList+self.FirstTitleList+self.ShopTitleList+self.BootcampTitleList
                                isvip = int(self.server.getVip(self.username))
                                isagent = int(self.server.getAgent(self.username))
                                if self.privilegeLevel==10:
                                        self.titleList = self.titleList+ADMIN_TITLES
                                if self.privilegeLevel==6 or self.privilegeLevel==5:
                                        self.titleList = self.titleList+["446"]
                                if isagent == 1:
                                        self.titleList = self.titleList+["447"]
                                if isvip == 1:
                                        self.titleList = self.titleList+["201"]
                                self.titleList = filter(None, self.titleList)

                                self.sendTitleList()

                                # Unpack Gift info or Repare #
                                #if not self.privilegeLevel == 0:
                                #        self.giftInfo = str(self.giftInfo).split(".")
                                #        if not len(self.giftInfo) == 3:
                                #                self.giftInfo = "0.0.0".split(".")
                                #                dbcur.execute('UPDATE users SET gifts = %s WHERE name = %s', ["0.0.0", self.username])
                                #        self.giftCount = int(self.giftInfo[0])
                                #        self.recvGiftCount = int(self.giftInfo[1])
                                #        self.sendGiftCount = int(self.giftInfo[2])
                                #else:
                                self.giftCount = 0
                                self.recvGiftCount = 0
                                self.sendGiftCount = 0
                                # End #

                                #Update 1.85
                                self.sendData("\x07\x01" + "\x00", [], True) #Market
                                self.sendData("\x1c\x0a" + "\x00\x00\x00\x00", [], True)
                                self.sendData("\x14\x03", struct.pack("!iib", 2220, 1376301568, 50), True)
                                self.sendData("\x14\x03", struct.pack("!iib", 606, 1376301568, 50), True)
                                self.sendData("\x1a\x1a" + "\x00", [], True)
                                self.sendData("\x07\x02" + "\x01\x0aSZ\x00\x00\x00\x02", [], True)
                                #END


                                self.modmute=self.server.checkModMute(self.username)

                                if self.server.getTotemData(self.username) != -1:
                                        totemvalues=self.server.getTotemData(self.username)
                                        self.STotem=[totemvalues[1], totemvalues[2]]

                                if not self.friendsList:
                                        pass
                                else:
                                        sendfriendsList = self.friendsList[:]
                                        for position, name in enumerate(sendfriendsList):
                                                if self.server.checkAlreadyConnectedAccount(name):
                                                        if self.server.friendsListCheck(name, self.username):
                                                                room = self.server.getFindPlayerRoom(name)
                                                        else:
                                                                room = "-"
                                                        sendfriendsList[position]=name+"\x02"+room
                                        self.sendData("\x08" + "\x0C",[8]+sendfriendsList)

                                for i, v in enumerate(self.friendsList):
                                        self.server.sendFriendConnected(v, self.username)

                                if int(self.banhours)>=1:
                                        self.sendBanWarning(self.banhours)

                                self.sendBecerileriGuncelle()
                                self.sendLevelleriGuncelle()

                                self.sendPlayerLoginData()
                                if self.micesaves>=0:
                                        self.sendHardMode(self.hardMode)

                                self.color1, self.color2=self.server.mouseColorInfo(True, self.username, "")
                                self.regdate=self.server.getRegDate(self.username)
                                if self.color1=="":
                                        self.color1="78583a"
                                if self.color2=="":
                                        if self.micesaves>=0:
                                                self.color2="fade55"
                                        else:
                                                self.color2="95d9d6"

                                if self.server.WelcomeMessage:
                                        # uptimez = (str(datetime.today()-self.server.STARTTIME).replace("<", "&lt;").split(".")[0])
                                        # if self.Langue=="RU":
                                        #         self.sendData("\x1A" + "\x1A",["<center><img src='http://i.imgur.com/PSIwrqz.png'></center><T><TI>####### СТАТИСТИКА #######</TI><V>Игроков онлайн: <N>"+str(self.server.getConnectedPlayerCount())+"<BR><V>Модераторы онлайн: <N>нет<BR><V>Uptime: <N>"+str(uptimez)+"<BR><T><TI># ОФИЦИАЛЬНЫЕ СООБЩЕСТВА #</TI><V>Вконтакте: <N><a href='http://vk.com/artmice' target='_blank'>http://vk.com/returnmice</a><BR><V>Facebook: <N><a href='https://www.facebook.com/artmiceserver' target='_blank'>https://fb.com/artmiceserver</a><BR><V>Twitter: <N><a href='https://twitter.com/artmiceru' target='_blank'>http://twitter.com/artmiceru</a><BR><BR><BR><T><TI>##################### НОВОСТИ ######################</TI>"+str(open('./others/news.txt', 'r').read())+"<BR><T><TI>###################################################</TI>"])    
                                        # if not self.ValidatedEmail and not username.startswith("*"):
                                        #         if self.Langue=="RU":
                                        #                 self.sendData("\x06\x14", ["<VP>Ваш аккаунт не подтвержден. Перейдите в Меню => Сменить пароль для подтверждения Email."])
                                        #         else:
                                        #                 self.sendData("\x06\x14", ["<VP>Your account has not been verified. Go to Menu => Change password for confirmation Email."])
                                        isvip = int(self.server.getVip(self.username))
                                        if isvip == 1:
                                                isVip = int(self.server.getVip(self.username))
                                                dbcur.execute("select Time from viplog where Name = %s", [self.username])
                                                rrf = dbcur.fetchone()
                                                if rrf is None:
                                                        self.isVip = False
                                                else:
                                                        date_str_1 = ""+str(rrf[0])+""
                                                        date_str_2 = ""+str(date.today())+""
                                                        date_1 = date(*map(int, date_str_1.split('-')))
                                                        date_2 = date(*map(int, date_str_2.split('-')))
                                                        rest = (date_1 - date_2).days
                                                        self.isVip = True
                                                        if rest <= 0:
                                                                self.isVip = False
                                                                dbcur.execute("UPDATE users SET vip = %s WHERE name = %s", ["0", self.username])
                                                                dbcur.execute("DELETE FROM viplog WHERE Name = %s", [self.username])
                                                        else:
                                                                if self.Langue=="RU":
                                                                        self.sendData("\x06\x14", ["<BL>Действие VIP статуса истечет через <J>%i <BL>дней." % (rest)])
                                                                else:
                                                                        self.sendData("\x06\x14", ["<BL>Before the end of the VIP status <J>%i <BL>days." % (rest)])
                                                                self.chatvip = True
                                                                self.colorchat = True
                                                                self.isPrefix = "<J>[VIP]"
                                                                self.isColorChat = "<font color='#009D9D'>"
                                        else:
                                                self.isVip = False

                                        if self.privilegeLevel == 10:
                                                self.prefix = False
                                                self.colorchat = True
                                                self.isPrefix = "<J>[ADMIN]"
                                                self.isColorChat = "<font color='#009D9D'>"
                                        # isagent = int(self.server.getAgent(self.username))
                                        # if isagent == 1:
                                        #         self.sendData("\x06" + "\x14",["<T>########## ИНФОРМАЦИОННОЕ БЮРО ##########"])  
                                        #         dbcur.execute("select Time from agentlog where Name = %s", [self.username])
                                        #         rrf = dbcur.fetchone()
                                        #         if rrf is None:
                                        #                 self.isAgent = False
                                        #         else:
                                        #                 date_str_1 = ""+str(rrf[0])+""
                                        #                 date_str_2 = ""+str(date.today())+""
                                        #                 date_1 = date(*map(int, date_str_1.split('-')))
                                        #                 date_2 = date(*map(int, date_str_2.split('-')))
                                        #                 rest = (date_1 - date_2).days
                                        #                 money = 50
                                        #                 self.isAgent = True
                                        #                 if rest <= 0:
                                        #                         today = date.today()
                                        #                         dt_futura = today + timedelta(30)
                                        #                         self.money += 50
                                        #                         dbcur.execute("DELETE FROM agentlog WHERE Name = %s", [self.username])
                                        #                         dbcur.execute("insert into agentlog (Name, Time) values (%s, %s)", (self.username, dt_futura))
                                        #                         self.sendData("\x06\x14", ["<BL>Вам было начислено <J>%i <BL>рублей. Следующий платеж через: <J>%i <BL>дней." % (50, 30)])
                                        #                 else:
                                        #                         self.sendData("\x06\x14", ["<BL>До зарплаты осталось <J>%i <BL>дней. Сумма: <J>%i <BL>рублей." % (rest, 50)])
                                        #         self.sendData("\x06" + "\x14",["Игроков онлайн: <J>"+str(self.server.getConnectedPlayerCount())+" <BL>(обновить: /online)"])
                                        #         self.sendData("\x06" + "\x14",["Для помощи напечатайте /help"]) 
                                        #         self.sendData("\x06" + "\x14",["<T>#####################################"])

                                if startRoom!="":
                                        if startRoom != "0":
                                                self.enterRoom(startRoom)
                                        else:
                                                self.enterRoom("\x03[Tutorial] "+self.username)
                                else:
                                        if startRoom != "0":
                                                self.enterRoom(self.server.recommendRoom(self.Langue))
                                        else:
                                                self.enterRoom("\x03[Tutorial] "+self.username)


                                self.sendATEC()
                                #self.sendForumPacketLOG()

                                if self.privilegeLevel in [10,8,6,5]:
                                        self.sendArbMCLogin(self.username)
                                        self.sendModMCLogin(self.username)
                                        self.server.getLsModo(self)
                                        self.server.getLsArb(self)
                                if self.privilegeLevel==3:
                                        self.sendArbMCLogin(self.username)
                                        self.server.getLsArb(self)

                                return True

# http://code.activestate.com/recipes/510399/
# http://code.activestate.com/recipes/466341/
#ByteToHex converts byte string "\xFF\xFE\x00\x01" to the string "FF FE 00 01"
#HexToByte converts string "FF FE 00 01" to the byte string "\xFF\xFE\x00\x01"
        def safe_unicode(self, obj, *args):
                try:
                        return unicode(obj, *args)
                except UnicodeDecodeError:
                        ascii_text = str(obj).encode('string_escape')
                        return unicode(ascii_text)
        def safe_str(self, obj):
                try:
                        return str(obj)
                except UnicodeEncodeError:
                        return unicode(obj).encode('unicode_escape')
        def ByteToHex(self, byteStr):
                return ''.join([ "%02X " % ord(x) for x in byteStr]).strip()
        def HexToByte(self, hexStr):
                bytes = []
                hexStr = ''.join(hexStr.split(" "))
                for i in range(0, len(hexStr), 2):
                        bytes.append(chr(int(hexStr[i:i+2], 16)))
                return ''.join(bytes)
        def dec2hex(self, n):
                return "%X" % n
        def hex2dec(self, s):
                return int(s, 16)
        def unicodeStringToHex(self, src):
                result = ""
                for i in xrange(0, len(src)):
                   unichars = src[i:i+1]
                   hexcode = ' '.join(["%02x" % ord(x) for x in unichars])
                   result=result+hexcode
                return result
        def checkValidXML(self, xmlString):
                if re.search("ENTITY", xmlString):
                        return False
                elif re.search("<html>", xmlString):
                        return False
                else:
                        try:
                                parser = xml.parsers.expat.ParserCreate()
                                parser.Parse(xmlString)
                                return True
                        except Exception, e:
                                return False
        def checkUnlockShopTitle(self):
                if self.privilegeLevel != 0:
                        #print self.getShopLength()
                        if self.getShopLength() in self.shopTitleCheckList:
                                unlockedtitle=self.shopTitleDictionary[self.getShopLength()]
                                self.sendUnlockedTitle(self.playerCode, unlockedtitle)
                                self.ShopTitleList=self.ShopTitleList+[unlockedtitle]
                                self.titleList = ["0"]+self.GiftTitleList+self.ShamanTitleList+self.HardModeTitleList+self.CheeseTitleList+self.FirstTitleList+self.ShopTitleList+self.BootcampTitleList
                                if self.privilegeLevel==10:
                                        self.titleList = self.titleList+ADMIN_TITLES
                                self.titleList = filter(None, self.titleList)
                                self.sendTitleList()
        def getShopLength(self, customList = None):
                if customList:
                        if customList.strip()=="":
                                return 0
                        else:
                                return len(customList.split(","))
                else:
                        if self.shopitems.strip()=="":
                                return 0
                        else:
                                return len(self.shopitems.split(","))
        def checkInShop(self, item):
                if self.shopitems.strip()=="":
                        return False
                else:
                        shopitems=self.shopitems.split(",")
                        for shopitem in shopitems:
                                if "_" in shopitem:
                                        shopitem, custom = shopitem.split("_")
                                else:
                                        shopitem = shopitem
                                        custom = ""
                                if str(item) == str(shopitem):
                                        return True
                        return False
        def getItemCustomization(self, item):
                if self.shopitems.strip()=="":
                        return ""
                else:
                        shopitems=self.shopitems.split(",")
                        for shopitem in shopitems:
                                if "_" in shopitem:
                                        shopitem, custom = shopitem.split("_")
                                else:
                                        shopitem = shopitem
                                        custom = ""
                                if str(item) == str(shopitem):
                                        if custom == "":
                                                return ""
                                        else:
                                                return "_" + custom
                        return False
        def checkAndRebuildTitleList(self, titleList):
                if titleList=="shop":
                        rebuild=False
                        x=self.getShopLength()
                        while x>0:
                                if str(x) in self.shopTitleCheckList or int(x) in self.shopTitleCheckList:
                                        if not str(self.shopTitleDictionary[x]) in self.ShopTitleList:
                                                rebuild=True
                                        break
                                x=x-1
                        if rebuild:
                                #print "REBUILDING SHOP"
                                x=self.getShopLength()
                                y=0
                                self.ShopTitleList=[]
                                while y<=x:
                                        if y in self.shopTitleCheckList:
                                                title=self.shopTitleDictionary[y]
                                                self.ShopTitleList=self.ShopTitleList+[title]
                                        y=y+1
                                return True
                        else:
                                return False
                elif titleList=="cheese":
                        rebuild=False
                        x=int(self.cheesecount)
                        while x>0:
                                if str(x) in self.cheeseTitleCheckList or int(x) in self.cheeseTitleCheckList:
                                        if not str(self.cheeseTitleDictionary[x]) in self.CheeseTitleList:
                                                rebuild=True
                                        break
                                x=x-1
                        if rebuild:
                                #print "REBUILDING CHEESE"
                                x=int(self.cheesecount)
                                y=0
                                self.CheeseTitleList=[]
                                while y<=x:
                                        if y in self.cheeseTitleCheckList:
                                                title=self.cheeseTitleDictionary[y]
                                                self.CheeseTitleList=self.CheeseTitleList+[title]
                                        y=y+1
                                return True
                        else:
                                return False
                elif titleList=="first":
                        rebuild=False
                        x=int(self.firstcount)
                        while x>0:
                                if str(x) in self.firstTitleCheckList or int(x) in self.firstTitleCheckList:
                                        if not str(self.firstTitleDictionary[x]) in self.FirstTitleList:
                                                rebuild=True
                                        break
                                x=x-1
                        if rebuild:
                                #print "REBUILDING FIRST"
                                x=int(self.firstcount)
                                y=0
                                self.FirstTitleList=[]
                                while y<=x:
                                        if y in self.firstTitleCheckList:
                                                title=self.firstTitleDictionary[y]
                                                self.FirstTitleList=self.FirstTitleList+[title]
                                        y=y+1
                                return True
                        else:
                                return False
                elif titleList=="shaman":
                        rebuild=False
                        x=int(self.micesaves)
                        while x>0:
                                if str(x) in self.shamanTitleCheckList or int(x) in self.shamanTitleCheckList:
                                        if not str(self.shamanTitleDictionary[x]) in self.ShamanTitleList:
                                                rebuild=True
                                        break
                                x=x-1
                        if rebuild:
                                #print "REBUILDING SHAMAN"
                                x=int(self.micesaves)
                                y=0
                                self.ShamanTitleList=[]
                                while y<=x:
                                        if y in self.shamanTitleCheckList:
                                                title=self.shamanTitleDictionary[y]
                                                self.ShamanTitleList=self.ShamanTitleList+[title]
                                        y=y+1
                                return True
                        else:
                                return False
                elif titleList=="hardmode":
                        rebuild=False
                        if self.hardModeSaves == "":
                                self.hardModeSaves = 0
                        x=int(10)
                        while x>0:
                                if str(x) in self.hardShamTitleCheckList or int(x) in self.hardShamTitleCheckList:
                                        if not str(self.hardShamTitleDictionary[x]) in self.HardModeTitleList:
                                                rebuild=True
                                        break
                                x=x-1
                        if rebuild:
                                #print "REBUILDING HARDMODE"
                                x=int(self.hardModeSaves)
                                y=0
                                self.HardModeTitleList=[]
                                while y<=x:
                                        if y in self.hardShamTitleCheckList:
                                                title=self.hardShamTitleDictionary[y]
                                                self.HardModeTitleList=self.HardModeTitleList+[title]
                                        y=y+1
                                return True
                        else:
                                return False
                elif titleList=="bootcamp":
                        rebuild=False
                        x=int(self.bootcampcount)
                        while x>0:
                                if str(x) in self.bootcampTitleCheckList or int(x) in self.bootcampTitleCheckList:
                                        if not str(self.bootcampTitleDictionary[x]) in self.BootcampTitleList:
                                                rebuild=True
                                        break
                                x=x-1
                        if rebuild:
                                #print "REBUILDING BOOTCAMP"
                                x=int(self.bootcampcount)
                                y=0
                                self.BootcampTitleList=[]
                                while y<=x:
                                        if y in self.bootcampTitleCheckList:
                                                title=self.bootcampTitleDictionary[y]
                                                self.BootcampTitleList=self.BootcampTitleList+[title]
                                        y=y+1
                                return True
                        else:
                                return False
        def returnFutureTime(self, hours):
                return str(getTime()+(int(hours)*60*60))
        def timestampCalc(self, endTime):
                #returns [0:00:00, Total Seconds, Time left in hours]
                startTime=str(getTime())
                startTime=datetime.fromtimestamp(float(startTime))
                endTime=datetime.fromtimestamp(float(endTime))
                result=endTime-startTime
                seconds= (result.microseconds + (result.seconds + result.days * 24 * 3600) * 10**6) / float(10**6)
                hours=int(int(seconds)/3600)+1
                if int(seconds)==0:
                        return [result, seconds, 0]
                elif int(seconds)>=1 and int(seconds)<=3600:
                        return [result, seconds, 1]
                elif hours>24:
                        return 24
                else:
                        return [result, seconds, hours]
        def censorMessage(self, message):
                Cmessage=re.sub("(?i)nigger", "******", message)
                Cmessage=re.sub("(?i)n!gger", "******", Cmessage)
                Cmessage=re.sub("(?i)n!gg3r", "******", Cmessage)
                Cmessage=re.sub("(?i)nigg3r", "******", Cmessage)
                Cmessage=re.sub("(?i)shit", "****", Cmessage)
                Cmessage=re.sub("(?i)sh!t", "****", Cmessage)
                Cmessage=re.sub("(?i)bitch", "*****", Cmessage)
                Cmessage=re.sub("(?i)b!tch", "*****", Cmessage)
                Cmessage=re.sub("(?i)fuck", "****", Cmessage)
                Cmessage=re.sub("(?i)cunt", "****", Cmessage)
                Cmessage=re.sub("(?i)asshole", "*******", Cmessage)
                Cmessage=re.sub("(?i)assh0le", "*******", Cmessage)
                Cmessage=re.sub("(?i)damn", "****", Cmessage)
                Cmessage=re.sub("(?i)pussy", "*****", Cmessage)
                Cmessage=re.sub("(?i)whore", "*****", Cmessage)
                Cmessage=re.sub("(?i)penis", "*****", Cmessage)
                Cmessage=re.sub("(?i)dick", "****", Cmessage)
                Cmessage=re.sub("(?i)cock", "****", Cmessage)
                Cmessage=re.sub("(?i)sex", "***", Cmessage)
                Cmessage=re.sub("(?i)boob", "****", Cmessage)
                Cmessage=re.sub("(?i)boobs", "*****", Cmessage)
                Cmessage=re.sub("(?i)boobies", "*******", Cmessage)
                Cmessage=re.sub("(?i)booby", "*****", Cmessage)
                Cmessage=re.sub("(?i)boobie", "******", Cmessage)
                Cmessage=re.sub("(?i)f\*ck", "****", Cmessage)
                Cmessage=re.sub("(?i)hoe", "***", Cmessage)
                Cmessage=re.sub("(?i)prick", "*****", Cmessage)
                Cmessage=re.sub("(?i)fck", "****", Cmessage)
                Cmessage=re.sub("(?i)pen!s", "*****", Cmessage)
                Cmessage=re.sub("(?i)qooq", "****", Cmessage)
                Cmessage=re.sub("(?i)sqooq", "*****", Cmessage)
                Cmessage=re.sub("(?i)gay", "happy", Cmessage)
                Cmessage=re.sub("(?i)horny", "*****", Cmessage)
                Cmessage=re.sub("(?i)horney", "******", Cmessage)
                Cmessage=re.sub("(?i)cum", "come", Cmessage)
                Cmessage=re.sub("(?i)cumming", "coming", Cmessage)
                Cmessage=re.sub("(?i)jizz", "****", Cmessage)
                Cmessage=re.sub("(?i)cuming", "coming", Cmessage)
                Cmessage=re.sub("(?i)shag", "****", Cmessage)
                Cmessage=re.sub("(?i)shagging", "********", Cmessage)
                Cmessage=re.sub("(?i)shaging", "*******", Cmessage)
                Cmessage=re.sub("(?i)humping", "*******", Cmessage)
                Cmessage=re.sub("(?i)humpin", "******", Cmessage)
                Cmessage=re.sub("(?i)hump", "****", Cmessage)
                Cmessage=re.sub("(?i)hell", "****", Cmessage)
                Cmessage=re.sub("(?i)fag", "***", Cmessage)
                Cmessage=re.sub("(?i)faggot", "******", Cmessage)
                Cmessage=re.sub("(?i)piss", "peepee", Cmessage)
                Cmessage=re.sub("(?i)crap", "poopy", Cmessage)
                Cmessage=re.sub("(?i)motherfucker", "************", Cmessage)
                Cmessage=re.sub("(?i)tit", "***", Cmessage)
                Cmessage=re.sub("(?i)tits", "****", Cmessage)
                Cmessage=re.sub("(?i)fap", "***", Cmessage)
                Cmessage=re.sub("(?i)fapping", "*******", Cmessage)
                Cmessage=re.sub("(?i)masturbate", "**********", Cmessage)
                Cmessage=re.sub("(?i)fack", "****", Cmessage)
                Cmessage=re.sub("(?i)jack off", "**** ***", Cmessage)
                Cmessage=re.sub("(?i)jacking off", "******* ***", Cmessage)
                return Cmessage
        def roomNameStrip(self, name, level):
                #Levels:
                #1-"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz"
                #2-" !"#$%&amp;'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~"
                #3-" !"#$%&amp;'()*+,-./0123456789:;<=>?@ABCDEFGHIJKLMNOPQRSTUVWXYZ[\]^_`abcdefghijklmnopqrstuvwxyz{|}~ÀÁÂÃÄÅÆÇÈÉÊËÌÍÎÏÐÑÒÓÔÕÖ×ØÙÚÛÜÝÞßàáâãäåæçèéêëìíîïðñòóôõö÷øùúûüýþÿ"
                #4-" "$'()ABCDEFGHIJKLMNOPQRSTUVWXYZ[]abcdefghijklmnopqrstuvwxyz" - For tribe names.
                #Level 3 glitches on UTF-8 with more than 1 byte when decoded. Example, %s which is \xe8\xaf\xad becomes \x8b\xed which becomes ?í.
                name=str(name)
                result=""
                pending=False
                if level=="1":
                        level1=range(48, 57+1)+range(65, 90+1)+range(97, 122+1)
                        for x in name:
                                if not int(self.hex2dec(x.encode("hex"))) in level1:
                                        x="?"
                                result+=x
                        return result
                elif level=="2":
                        for x in name:
                                if self.hex2dec(x.encode("hex"))<32 or self.hex2dec(x.encode("hex"))>126:
                                        x="?"
                                result+=x
                        return result
                elif level=="3":
                        level3=range(32, 126+1)+range(192, 255+1)
                        name=self.HexToByte(self.unicodeStringToHex(name.decode('utf-8')))
                        for x in name:
                                if not int(self.hex2dec(x.encode("hex"))) in level3:
                                        x="?"
                                result+=x
                        return result
                elif level=="4":
                        level4=[32, 34, 36, 39, 40, 41]+range(65, 90+1)+[91, 93]+range(97, 122+1)
                        for x in name:
                                if not int(self.hex2dec(x.encode("hex"))) in level4:
                                        x=""
                                result+=x
                        return result
                else:
                        return "Error 2996: Invalid level."
        def FreezePlayerData(self, seconds):
                if self.isFrozenTimer:
                        try:
                                self.isFrozenTimer.cancel()
                        except:
                                self.isFrozenTimer = None
                if int(seconds)==0:
                        self.isFrozen=False
                else:
                        self.isFrozen=True
                        self.isFrozenTimer=reactor.callLater(int(seconds), self.FreezePlayerData, 0)
        def parseBinaryData(self, bdata, types):
                rlist = []
                for tp in types:
                        if tp=="x":
                                pass
                        elif tp=="c":
                                rlist.append(struct.unpack("!"+tp,bdata[:1])[0])
                                bdata=bdata[:1]
                        elif tp=="b":
                                rlist.append(struct.unpack("!"+tp,bdata[:1])[0])
                                bdata=bdata[:1]
                        elif tp=="B":
                                rlist.append(struct.unpack("!"+tp,bdata[:1])[0])
                                bdata=bdata[:1]
                        elif tp=="?":
                                rlist.append(struct.unpack("!"+tp,bdata[:1])[0])
                                bdata=bdata[:1]
                        elif tp=="h":
                                rlist.append(struct.unpack("!"+tp,bdata[:2])[0])
                                bdata=bdata[:2]
                        elif tp=="H":
                                rlist.append(struct.unpack("!"+tp,bdata[:2])[0])
                                bdata=bdata[:2]
                        elif tp=="i":
                                rlist.append(struct.unpack("!"+tp,bdata[:4])[0])
                                bdata=bdata[:4]
                        elif tp=="I":
                                rlist.append(struct.unpack("!"+tp,bdata[:4])[0])
                                bdata=bdata[:4]
                        elif tp=="l":
                                rlist.append(struct.unpack("!"+tp,bdata[:4])[0])
                                bdata=bdata[:4]
                        elif tp=="L":
                                rlist.append(struct.unpack("!"+tp,bdata[:4])[0])
                                bdata=bdata[:4]
                        elif tp=="q":
                                rlist.append(struct.unpack("!"+tp,bdata[:8])[0])
                                bdata=bdata[:8]
                        elif tp=="Q":
                                rlist.append(struct.unpack("!"+tp,bdata[:8])[0])
                                bdata=bdata[:8]
                        elif tp=="f":
                                rlist.append(struct.unpack("!"+tp,bdata[:4])[0])
                                bdata=bdata[:4]
                        elif tp=="d":
                                rlist.append(struct.unpack("!"+tp,bdata[:8])[0])
                                bdata=bdata[:8]
                        elif tp=="u":
                                rlist.append(bdata[2:int(struct.unpack('!h', bdata[:2])[0])+2])
                                bdata=bdata[int(struct.unpack('!h', bdata[:2])[0])+2:]
                        else:
                                pass #logging.error("Failed to parse data. Invalid types specified. Types: "+str(types))
                if len(rlist)==1:
                        return rlist[0]
                elif len(rlist)==0:
                        pass #logging.error("Unknown error. Types: "+str(types))
                        return "Error!"
                else:
                        return rlist


class TransformiceServer(protocol.ServerFactory):

        protocol = TransformiceClientHandler

        def __init__(self):
                sys.stdout.write("["+str(getTime2())+"] "+"Loading Settings")
                Start = datetime.now()
                self.STARTTIME=datetime.today()
                self.ServerID           = str(self.getServerSetting("ServerID"))
                self.Owner                 = str(self.getServerSetting("Owner"))
                self.Key                         = str(self.getServerSetting("Key"))
                self.POLICY               = str(self.getServerSetting("Policy"))
                self.PORT                       = str(self.getServerSetting("PolicyPorts"))
                self.LCDMT                 = str(self.getServerSetting("LCDMT"))
                self.LoaderURL     = str(self.getServerSetting("LoaderURL"))
                self.LoaderSize   = int(self.getServerSetting("LoaderSize"))
                self.ModLoaderSize   = int(self.getServerSetting("ModLoaderSize"))
                self.ClientSize   = int(self.getServerSetting("ClientSize"))
                self.ValidateLoader  = False#self.str2bool(self.getServerSetting("ValidateLoader"))
                self.ValidateVersion = False#self.str2bool(self.getServerSetting("ValidateVersion"))
                self.GetCapabilities = False#self.str2bool(self.getServerSetting("GetClientCapabilities"))
                self.lastPlayerCode  = int(self.getServerSetting("InitPlayerCode"))
                self.MaxBinaryLength = int(self.getServerSetting("MaxBinaryLength"))
                self.MinBinaryLength = int(self.getServerSetting("MinBinaryLength"))
                self.MaxUTFLength       = int(self.getServerSetting("MaxUTFLength"))
                self.MinUTFLength       = int(self.getServerSetting("MinUTFLength"))
                self.EditorShopCheese= int(self.getServerSetting("EditeurShopCheese"))
                self.EditeurCheese   = int(self.getServerSetting("EditeurCheese"))
                self.TribuShopCheese = int(self.getServerSetting("TribuShopCheese"))
                self.EmailServerAddr = str(self.getServerSetting("EmailServerAddr"))
                self.EmailServerPort = int(self.getServerSetting("EmailServerPort"))
                self.EmailServerName = str(self.getServerSetting("EmailServerName"))
                self.EmailServerPass = str(self.getServerSetting("EmailServerPass"))
                self.BaseForumURL       = ""#str(self.getServerSetting("BaseForumURL"))
                self.BaseAvatarURL   = ""#str(self.getServerSetting("BaseAvatarURL"))
                self.WelcomeMessage  = bool(int(self.getServerSetting("WelcomeMessage")))
                
                self.NeedsCountToFirst = int(self.getServerSetting("NeedsToFirst"))
                self.NeedsForEaster = int(self.getServerSetting("NeedsToEaster"))
                self.LuaEnabled = bool(int(self.getServerSetting("LuaEnabled")))
                self.RankingEnabled = bool(int(self.getServerSetting("RankingEnabled")))
                
                TimeUsed = datetime.now() - Start;
                print " -------------------------------> \x1b[32m[OK]\x1b[0m ("+str(TimeUsed.seconds)+"s)"
                if self.GetCapabilities:
                        self.ValidateLoader=True

                if not VERBOSE:
                        pass
                        #if not self.KeyValidate(self.ServerID, self.Owner, self.Key):
                        #       os._exit(53)
                sys.stdout.write("["+str(getTime2())+"] "+"Loading Data")
                Start = datetime.now()
                pass #logging.info("Running")
                self.tempAccountBanList=[]
                self.tempIPBanList=[]
                self.IPPermaBanCache=[]
                self.connectCounts = {}
                self.langues = {}
                self.PlayerCountHistory=[
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0",
                "0", "0", "0", "0", "0", "0", "0", "0", "0", "0"]
                if datetime.now().minute == 0 or datetime.now().minute == 10 or datetime.now().minute == 20 or datetime.now().minute == 30 or datetime.now().minute == 40 or datetime.now().minute == 50:
                        self.updatePlayerCountHistoryTimer = reactor.callLater(60, self.updatePlayerCountHistory)
                elif datetime.now().minute >= 1 and datetime.now().minute <= 9:
                        minutetime = datetime.now().minute
                        timeleft=10-minutetime
                        self.updatePlayerCountHistoryTimer = reactor.callLater(timeleft*60, self.updatePlayerCountHistory)
                elif datetime.now().minute >= 11 and datetime.now().minute <= 19:
                        minutetime = datetime.now().minute
                        timeleft=20-minutetime
                        self.updatePlayerCountHistoryTimer = reactor.callLater(timeleft*60, self.updatePlayerCountHistory)
                elif datetime.now().minute >= 21 and datetime.now().minute <= 29:
                        minutetime = datetime.now().minute
                        timeleft=30-minutetime
                        self.updatePlayerCountHistoryTimer = reactor.callLater(timeleft*60, self.updatePlayerCountHistory)
                elif datetime.now().minute >= 31 and datetime.now().minute <= 39:
                        minutetime = datetime.now().minute
                        timeleft=40-minutetime
                        self.updatePlayerCountHistoryTimer = reactor.callLater(timeleft*60, self.updatePlayerCountHistory)
                elif datetime.now().minute >= 41 and datetime.now().minute <= 49:
                        minutetime = datetime.now().minute
                        timeleft=50-minutetime
                        self.updatePlayerCountHistoryTimer = reactor.callLater(timeleft*60, self.updatePlayerCountHistory)
                elif datetime.now().minute >= 51 and datetime.now().minute <= 59:
                        minutetime = datetime.now().minute
                        timeleft=60-minutetime
                        self.updatePlayerCountHistoryTimer = reactor.callLater(timeleft*60, self.updatePlayerCountHistory)
                else:
                        self.updatePlayerCountHistoryTimer = reactor.callLater(60, self.updatePlayerCountHistory)

                #self.clients = []
                self.reports = ["Aquantura™,1,0,Aquantura™|1|Gay!|0_Belaalove|0|Ema|0","Tigrounette,1,0,Aquantura™|0|Mita|1"]
                self.blacklist = str(open('./others/blacklist.txt', 'r').read().lower()).split(", ")
                
                self.OutputConn = None
                TimeUsed = datetime.now() - Start;
                print " -----------------------------------> \x1b[32m[OK]\x1b[0m ("+str(TimeUsed.seconds)+"s)"
                
                sys.stdout.write("["+str(getTime2())+"] "+"Loading NCP file")
                Start = datetime.now()
                self.parseNpcFile()
                TimeUsed = datetime.now() - Start;

                sys.stdout.write("["+str(getTime2())+"] "+"Loading SPM file")
                Start = datetime.now()
                self.parseSpmFile()
                TimeUsed = datetime.now() - Start;
                
                sys.stdout.write("["+str(getTime2())+"] "+"Loading room file")
                Start = datetime.now()
                self.parseRoomFile()
                TimeUsed = datetime.now() - Start;
                

                sys.stdout.write("["+str(getTime2())+"] "+"Loading Minigames")
                Start = datetime.now()
                #self.loadMinigames()
                TimeUsed = datetime.now() - Start;
                print " ------------------------------> \x1b[32m[OK]\x1b[0m ("+str(TimeUsed.seconds)+"s)"

                self.rooms = {}
                        
        def sendValidationEmail(self, code, lang, address, msgtype, senderClient = None):
                #msgtype, 1=New email address. 2=Pass change.
                SERVER = "smtp.gmail.com"
                PORT = 587
                FROM = ""
                TO = [str(address)]
                SUBJECT = "Email verification"

                TEXT = "Thank you for activating your account in ArtMice!\r\nHere is the code: <h1>"+str(code)+"</h1>"
                if msgtype==2:
                        TEXT = "To change your password, enter this code:\r\n<h1>"+str(code)+"</h1>"
                server = smtplib.SMTP(SERVER, PORT)
                server.ehlo()
                server.starttls()
                server.ehlo()
                server.login("", "")
                mail = MIMEText(TEXT)
                mail["To"] = str(address)
                mail["Subject"] = SUBJECT
                mail["Content-type"] = "text/html"
                server.sendmail(FROM, TO, mail.as_string())
                server.quit()

        def sendRecoveryEmail(self, code, address, senderClient = None):
                SERVER = "smtp.gmail.com"
                PORT = 587
                FROM = self.EmailServerName
                TO = [str(address)]
                SUBJECT = "Password recovery"
                TEXT = "To retrieve your password, enter this code : <h1>"+str(code)+"</h1>"
                server = smtplib.SMTP(SERVER, PORT)
                server.ehlo()
                server.starttls()
                server.ehlo()
                server.login("", "")
                mail = MIMEText(TEXT)
                mail["To"] = str(address)
                mail["Subject"] = SUBJECT
                mail["Content-type"] = "text/html"
                server.sendmail(FROM, TO, mail.as_string())
                server.quit()

        def sendOutput(self, message):
                print "["+str(datetime.today())+"] "+message
                if self.OutputConn:
                        try:
                                self.OutputConn.send(base64.b64encode(self.ServerID)+"\x01"+base64.b64encode(message)+"\x00")
                        except:
                                reactor.callLater(0, self.reconnectOutput, base64.b64encode(self.ServerID)+"\x01"+base64.b64encode(message)+"\x00")

        def reconnectOutput(self, data):
                try:
                        #self.KeyValidate(self.ServerID, self.Owner, self.Key)
                        self.OutputConn = None
                        self.OutputConn = socket.socket()
                        self.OutputConn.connect((self.OCS, 55384))
                        self.OutputConn.send(data)
                except socket.error, msg:
                        os._exit(53)

        def sendOutputKA(self):
                try:
                        self.OutputConn.send("\xFF\x00")
                except:
                        reactor.callLater(0, self.reconnectOutput, "\xFF\x00")
                reactor.callLater(10, self.sendOutputKA)

        def updatePlayerCountHistory(self):
                if self.PlayerCountHistory:
                        self.PlayerCountHistory.remove(self.PlayerCountHistory[0])
                        self.PlayerCountHistory.append(str(self.getConnectedPlayerCount()))
                        self.updatePlayerCountHistoryTimer = reactor.callLater(600, self.updatePlayerCountHistory)
        
        def refreshSettings(self):
                self.ServerID           = str(self.getServerSetting("ServerID"))
                self.Owner                 = str(self.getServerSetting("Owner"))
                self.Key                         = str(self.getServerSetting("Key"))
                self.POLICY               = str(self.getServerSetting("Policy"))
                self.PORT                       = str(self.getServerSetting("PolicyPorts"))
                self.LCDMT                 = str(self.getServerSetting("LCDMT"))
                self.LoaderURL     = str(self.getServerSetting("LoaderURL"))
                self.LoaderSize   = int(self.getServerSetting("LoaderSize"))
                self.ModLoaderSize   = int(self.getServerSetting("ModLoaderSize"))
                self.ClientSize   = int(self.getServerSetting("ClientSize"))
                self.ValidateLoader  = False#self.str2bool(self.getServerSetting("ValidateLoader"))
                self.ValidateVersion = False#self.str2bool(self.getServerSetting("ValidateVersion"))
                self.GetCapabilities = False#self.str2bool(self.getServerSetting("GetClientCapabilities"))
                #self.lastPlayerCode  = int(self.getServerSetting("InitPlayerCode")) No!
                self.MaxBinaryLength = int(self.getServerSetting("MaxBinaryLength"))
                self.MinBinaryLength = int(self.getServerSetting("MinBinaryLength"))
                self.MaxUTFLength       = int(self.getServerSetting("MaxUTFLength"))
                self.MinUTFLength       = int(self.getServerSetting("MinUTFLength"))
                self.EditorShopCheese= int(self.getServerSetting("EditeurShopCheese"))
                self.EditeurCheese   = int(self.getServerSetting("EditeurCheese"))
                self.TribuShopCheese = int(self.getServerSetting("TribuShopCheese"))
                self.EmailServerAddr = str(self.getServerSetting("EmailServerAddr"))
                self.EmailServerPort = int(self.getServerSetting("EmailServerPort"))
                self.EmailServerName = str(self.getServerSetting("EmailServerName"))
                self.EmailServerPass = str(self.getServerSetting("EmailServerPass"))
                self.BaseForumURL       = ""#str(self.getServerSetting("BaseForumURL"))
                self.BaseAvatarURL   = str(self.getServerSetting("BaseAvatarURL"))
                self.NeedsCountToFirst = int(self.getServerSetting("NeedsToFirst"))
                self.NeedsCountToFraise = int(self.getServerSetting("NeedsToFraise"))
                self.NeedsForEaster = int(self.getServerSetting("NeedsToEaster"))
                self.LuaEnabled = bool(int(self.getServerSetting("LuaEnabled")))
                self.RankingEnabled = bool(int(self.getServerSetting("RankingEnabled")))
                self.WelcomeMessage = bool(int(self.getServerSetting("WelcomeMessage")))
  
        def parseShopFile(self):
                DefaultShop="0,1,10"

                if os.path.exists("./others/shp.dat"):
                        SFile = open("./others/shp.dat", "rb")
                        SData = SFile.read()
                        SFile.close()
                        shopCacs=[]
                        if SData[:3]=="SHP":
                                SData=SData[3:]
                                ShopList=SData[2:struct.unpack("!h", SData[:2])[0]+2]
                                SData=SData[struct.unpack("!h", SData[:2])[0]+2:]
                                self.shopList=ShopList
                                self.shopCaches=shopCacs
                                return True
                        else:
                                print " -------------------------------> \x1b[31m[ERROR]\x1b[0m ("+str(TimeUsed.seconds)+"s)"
                                self.shopList=DefaultShop
                                self.shopCaches=[]
                                return False
                else:
                        print " -------------------------------> \x1b[31m[ERROR]\x1b[0m ("+str(TimeUsed.seconds)+"s)"
                        self.shopList=DefaultShop
                        self.shopCaches=[]
                        return False
        def parseRoomFile(self):
                if os.path.exists("./others/spr.dat"):
                        SPR=[]
                        SPRD=[]
                        RFile = open("./others/spr.dat", "rb")
                        RData = RFile.read()
                        RFile.close()
                        if RData[:3]=="SPR":
                                print " ------------------------------> \x1b[32m[OK]\x1b[0m ("+str(TimeUsed.seconds)+"s)"
                                RCount=struct.unpack("!h", RData[3:5])[0]
                                RData=RData[6:]
                                x=1
                                while x<=RCount:
                                        countID=struct.unpack("!l", RData[:4])[0]
                                        if countID==x:
                                                x=x+1
                                                RData=RData[4:]
                                                Name=RData[2:struct.unpack("!h", RData[:2])[0]+2]
                                                RData=RData[struct.unpack("!h", RData[:2])[0]+2:]
                                                stats, spcm, sndbx, type, mapnum, atr, tme, n20s, eSync, sSync, sNP, sT, sc0, plimit = struct.unpack("!???bi?i????h?B", RData[:21])
                                                RData=RData[21:]
                                                SPR.append(Name)
                                                SPRD.append([Name, stats, spcm, sndbx, type, mapnum, atr, tme, n20s, eSync, sSync, sNP, sT, sc0, plimit])
                                        else:
                                                print " ------------------------------> \x1b[31m[ERROR]\x1b[0m ("+str(TimeUsed.seconds)+"s)"
                                                self.SPR=[]
                                                self.SPRD=[]
                                                return False
                                self.SPR=SPR
                                self.SPRD=SPRD
                                return True
                        else:
                                print " ------------------------------> \x1b[31m[ERROR]\x1b[0m ("+str(TimeUsed.seconds)+"s)"
                                self.SPR=[]
                                self.SPRD=[]
                                return False
                else:
                        print " ------------------------------> \x1b[31m[ERROR]\x1b[0m ("+str(TimeUsed.seconds)+"s)"
                        self.SPR=[]
                        self.SPRD=[]
                        return False

        def parseSpmFile(self):
                if os.path.exists("./others/spm.dat"):
                        SPM=[]
                        SPMmaps=[]
                        spmFile = open("./others/spm.dat", "rb")
                        spmData = spmFile.read()
                        spmFile.close()
                        if spmData[:3]=="SPM":
                                print " -------------------------------> \x1b[32m[OK]\x1b[0m ("+str(TimeUsed.seconds)+"s)"
                                spmCount=struct.unpack("!h", spmData[3:5])[0]
                                spmData=spmData[6:]
                                x=1
                                while x<=spmCount:
                                        countID=struct.unpack("!l", spmData[:4])[0]
                                        if countID==x:
                                                spmData=spmData[4:]
                                                code, authorlength=struct.unpack("!hh", spmData[:4])
                                                author=spmData[4:4+authorlength]
                                                spmData=spmData[4+authorlength:]
                                                xmllength=struct.unpack("!h", spmData[:2])[0]
                                                xml=spmData[2:2+xmllength]
                                                spmData=spmData[2+xmllength:]
                                                
                                                SPM.append([code, author, xml])
                                                SPMmaps.append(code)
                                                x+=1
                                        else:
                                                print " -------------------------------> \x1b[31m[ERROR]\x1b[0m ("+str(TimeUsed.seconds)+"s)"
                                                self.SPM = SPM
                                                self.SPMmaps = SPMmaps
                                                return False
                                self.SPM = SPM
                                self.SPMmaps = SPMmaps
                        else:
                                print " -------------------------------> \x1b[31m[ERROR]\x1b[0m ("+str(TimeUsed.seconds)+"s)"
                                self.SPM = SPM
                                self.SPMmaps = SPMmaps
                                return False
                else:
                        print " -------------------------------> \x1b[31m[ERROR]\x1b[0m ("+str(TimeUsed.seconds)+"s)"
                        self.SPM = []
                        self.SPMmaps = []
        def parseNpcFile(self):
                if os.path.exists("./others/npc.dat"):
                        NPCs_R=[]
                        NPCs_M=[]
                        NPCRooms=[]
                        NPCMaps=[]
                        npcFile = open("./others/npc.dat", "rb")
                        npcData = npcFile.read()
                        npcFile.close()
                        if npcData[:3]=="NPC":
                                npcCount=struct.unpack("!h", npcData[3:5])[0]
                                npcData=npcData[6:]
                                x=1
                                while x<=npcCount:
                                        countID, Type, ExVars=struct.unpack("!l??", npcData[:6])
                                        if countID==x:
                                                npcEx=[]
                                                npcData=npcData[6:]
                                                npcID=struct.unpack("!h", npcData[:2])[0]
                                                npcName=npcData[4:struct.unpack("!h", npcData[2:4])[0]+4]
                                                npcData=npcData[struct.unpack("!h", npcData[2:4])[0]+4:]
                                                npcShop=npcData[2:struct.unpack("!h", npcData[:2])[0]+2]
                                                npcData=npcData[struct.unpack("!h", npcData[:2])[0]+2:]
                                                npcX, npcY, npcDirection, npcClick=struct.unpack("!hhbb", npcData[:6])
                                                npcData=npcData[6:]
                                                if Type:
                                                        npcRoom=npcData[2:struct.unpack("!h", npcData[:2])[0]+2]
                                                        npcRoom="*"+npcRoom
                                                        if not npcRoom in NPCRooms:
                                                                NPCRooms.append(npcRoom)
                                                        npcData=npcData[struct.unpack("!h", npcData[:2])[0]+2:]
                                                else:
                                                        npcMap=struct.unpack("!h", npcData[:2])[0]
                                                        if not npcMap in NPCMaps:
                                                                NPCMaps.append(npcMap)
                                                        npcData=npcData[2:]
                                                if ExVars:
                                                        npcExA=True
                                                        number=struct.unpack("!h", npcData[:2])[0]
                                                        npcData=npcData[2:]
                                                        while number>0:
                                                                npcExET=npcData[2:struct.unpack("!h", npcData[:2])[0]+2]
                                                                npcData=npcData[struct.unpack("!h", npcData[:2])[0]+2:]
                                                                npcExData=npcData[2:struct.unpack("!h", npcData[:2])[0]+2]
                                                                npcData=npcData[struct.unpack("!h", npcData[:2])[0]+2:]
                                                                number=number-1
                                                                npcEx.append([npcExET, npcExData])
                                                if Type:
                                                        NPCs_R.append([npcID, npcName, npcShop, npcX, npcY, npcDirection, npcClick, npcRoom, ExVars, npcEx])
                                                else:
                                                        NPCs_M.append([npcID, npcName, npcShop, npcX, npcY, npcDirection, npcClick, npcMap, ExVars, npcEx])
                                                        print " -------------------------------> \x1b[32m[OK]\x1b[0m ("+str(TimeUsed.seconds)+"s)"
                                        else:
                                                print " -------------------------------> \x1b[31m[ERROR]\x1b[0m ("+str(TimeUsed.seconds)+"s)"
                                                NPCRooms=[]
                                                NPCMaps=[]
                                                NPCs_R=[]
                                                NPCs_M=[]
                                                return False
                                                break
                                        x=x+1
                                self.NPCRooms=NPCRooms
                                self.NPCMaps=NPCMaps
                                self.NPCs_R=NPCs_R
                                self.NPCs_M=NPCs_M
                        else:
                                self.NPCRooms=NPCRooms
                                self.NPCMaps=NPCMaps
                                self.NPCs_R=NPCs_R
                                self.NPCs_M=NPCs_M
                                return False
                else:
                        print " -------------------------------> \x1b[31m[ERROR]\x1b[0m ("+str(TimeUsed.seconds)+"s)"
                        self.NPCRooms=[]
                        self.NPCMaps=[]
                        self.NPCs_R=[]
                        self.NPCs_M=[]
                        return False

        def giveShopCheese(self, senderClient, username, amount):
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        player.shopcheese = player.shopcheese+int(amount)
                                        self.sendModChat(self, "\x06\x14", [senderClient.username+" дал игроку "+player.username+" сыр => "+str(amount)], False)

        def giveShopFraises(self, senderClient, username, amount):
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        try:
                                                player.sendData("\x0c\x14", struct.pack('!h', int(amount)), True)
                                        except:
                                                pass
                                        player.shopfraises = player.shopfraises+int(amount)
                                        self.sendModChat(self, "\x06\x14", [senderClient.username+" дал игроку "+player.username+" клубнику => "+str(amount)], False)
                                        #self.sendModChat(self, "\x06\x14", [senderClient.username+" has given "+str(amount)+" of shop fraises to "+player.username], False)

        def giveShopCoins(self, senderClient, username, amount):
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        player.shopcoins = player.shopcoins+int(amount)
                                        self.sendModChat(self, "\x06\x14", [senderClient.username+" adlı görevlimiz "+player.username+" adlı üyemize "+str(amount)+" adet coins verdi."], False)
                                        #self.sendModChat(self, "\x06\x14", [senderClient.username+" has given "+str(amount)+" of shop fraises to "+player.username], False)

        def reloadModules(self, senderClient=None, console=False):
            countWork = 0
            countTotal = 0
            
            try:
                countTotal+=1
                import Tokens
                reload(Tokens)
                from Tokens import Tokens, Version
                         
                if not console: senderClient.sendData("\x06\x14", ["[<V>OK<BL>] Reload Tokens module."])
                countWork+=1
                
            except:
                if not console: senderClient.sendData("\x06\x14", ["[<R>FAIL<BL>] Reload Tokens module."])
                
            if not console: senderClient.sendData("\x06\x14", ["[%s] %d/%d modules reloaded successfully."%(senderClient.username,countWork,countTotal)])
            else: senderClient.sendData("\x06\x14", ["[%s] %d/%d modules reloaded successfully."%("Console",countWork,countTotal)])
            
        def authenticate(self, username, passwordHash):
                CheckFail=0
                if len(username)>12:
                        self.transport.loseConnection()
                        CheckFail=1
                if not username.isalpha():
                        self.transport.loseConnection()
                        CheckFail=1
                if CheckFail==0:
                        username=username.lower()
                        username=username.capitalize()
                        dbcur.execute('select * from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                name = rrf[0]
                                password = rrf[1]
                                privlevel = rrf[3]
                                if passwordHash != password:
                                        return -1
                                else:
                                        return privlevel
                else:
                        pass

        def getAllPlayerData(self, username):
                if username.startswith("*"):
                        return ["Souris", "", "1", 0, 0, 0, 0, 0, 0, "[\"0\"]", "", 0, "", "", "1;0,0,0,0,0,0,0,0,0", 0, 0, 0, 0, "", "", "", "", "", 0, 0, "", "None", "None", 0, ""]
                else:
                        dbcur.execute('select * from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf

        def mouseColorInfo(self, direction, name, info):
                if direction==True: #Get
                        if name.startswith("*"):
                                return ["",""]
                        dbcur.execute('select ColorInfo from users where name = %s', [name])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return []
                        else:
                                result=list(rrf[:])
                                result=str(result[0]).split("#")
                                return result
                elif direction==False: #Put
                        info='#'.join(map(str,info))
                        dbcur.execute('UPDATE users SET ColorInfo = %s WHERE name = %s', (info, name))
                        dbcon.commit()
        def getRegDate(self, username):
                dbcur.execute('select regdate from users where name = %s', [username])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return -1
                else:
                        return rrf
        def getTribeData(self, code):
                dbcur.execute('select * from Tribu where Code = %s', [code])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return -1
                else:
                        return rrf
                        
        def getTribeCode(self, name):
                dbcur.execute('select Code from Tribu where Nom = %s', [name])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return -1
                else:
                        return rrf

        def getTotemData(self, name):
                if name.startswith("*"):
                        return -1
                elif len(name)<3 or len(name)>12:
                        return -1
                elif not name.isalpha():
                        return -1
                else:
                        dbcur.execute('select * from Totem where name = %s', [name])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                result=list(rrf[:])
                                result[2]=str(result[2]).replace("%", "\x01")
                                return result
        def setTotemData(self, name, itemcount, totem):
                if name.startswith("*"):
                        return -1
                elif len(name)<3 or len(name)>12:
                        return -1
                elif not name.isalpha():
                        return -1
                else:
                        totem=totem.replace("\x01", "%")
                        if self.getTotemData(name) != -1:
                                dbcur.execute('UPDATE Totem SET itemcount = %s, totem = %s WHERE name = %s', (int(itemcount), totem, name))
                                dbcon.commit()
                        else:
                                dbcur.execute("insert into Totem (name, itemcount, totem) values (%s, %s, %s)", (name, int(itemcount), totem))
                                dbcon.commit()

        def getServerSetting(self, setting):
                dbcur.execute('select value from settings where setting = %s', [setting])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return False
                else:
                        return rrf[0]
                
        def str2bool(self, string):
            if string == None:
                return False
            return str(string).lower() in ("yes", "true", "t", "1", "on")

        def getPlayerID(self, username):
                if username.startswith("*"):
                        return "1"
                else:
                        dbcur.execute('select playerid from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getSavesCount(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select saves from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getLevelCount(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select level from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getShamanCheeseCount(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select shamcheese from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getShamanGoldSavesCount(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select HardModeSaves from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getFirstCount(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select first from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getGiftInfo(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select gifts from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return str(rrf[0])

        def getVip(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select vip from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getAgent(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select agent from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getCheeseCount(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select cheese from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getRoundsCount(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select rounds from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getBootcampCount(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select bootcamp from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getBaffWins(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select baffwins from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getFullTitleList(self, username):
                if username.startswith("*"):
                        return "[]"
                else:
                        dbcur.execute('select titlelist from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getTitleLists(self, username):
                if username.startswith("*"):
                        return ("[]","[]","[]","[]","[]","[]", "[]")
                else:
                        dbcur.execute('select CheeseTitleList, FirstTitleList, ShamanTitleList, ShopTitleList, GiftTitleList, HardModeTitleList, BootcampTitleList from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf



        def getTribeName(self, username):
                if username.startswith("*"):
                        return ""
                else:
                        dbcur.execute('select tribu from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0].rsplit("#", 2)[0]

        def getUserTribeInfo(self, username):
                if username.startswith("*"):
                        return ""
                else:
                        dbcur.execute('select tribu from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0].rsplit("#", 2) #Returns a list with [Name, ID, Level]

        def getCurrentTitle(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select currenttitle from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getBecerilerim(self, username):
                if username.startswith("*"):
                        return ""
                else:
                        dbcur.execute('select becerilerim from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]
        def getBeceriCount(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select becericount from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getPlayerBoolenEmail(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select Emailinfo from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getLevelCount(self, username):
                if username.startswith("*"):
                        return ""
                else:
                        dbcur.execute('select level from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]
        def getNextLevel(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select nextlevel from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getUserShop(self, username):
                if username.startswith("*"):
                        return ""
                else:
                        dbcur.execute('select shop from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getUserFriends(self, username):
                if username.startswith("*"):
                        return ""
                else:
                        dbcur.execute('select friends from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getUserLook(self, username):
                if username.startswith("*"):
                        return "1;0,0,0,0,0,0,0,0,0"
                else:
                        dbcur.execute('select shoplook from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getLastLogin(self, username):
                if username.startswith("*"):
                        return ""
                else:
                        dbcur.execute('select lastlogin from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getRecordTime(self, code):
                dbcur.execute('select recordtime from mapeditor where code = %s', [code])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return -1
                else:
                        return rrf[0]

        def getShopCheese(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select shopcheese from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]


        def getShopFraises(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select fraises from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getMoney(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select money from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def getShopCoins(self, username):
                if username.startswith("*"):
                        return 0
                else:
                        dbcur.execute('select coins from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]


        def getTotalBanHours(self, username):
                if username.startswith("*"):
                        return "0"
                else:
                        dbcur.execute('select totalban from users where name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return -1
                        else:
                                return rrf[0]

        def checkExistingUsers(self, username):
                dbcur.execute('select name from users where name = %s', [username])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return 0
                else:
                        return 1
        def checkExistingTribes(self, name):
                dbcur.execute('select Nom from Tribu where Nom = %s', [name])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return 0
                else:
                        return 1

        def createAccount(self, username, passwordHash):
                name = username
                password = passwordHash
                privlevel = 1
                saves = 0
                level = "0/32"
                shamcheese = 0
                first = 0
                cheese = 0
                rounds = 0
                bootcamp = 0
                titlelist = ["0"]
                titlelist = 0
                titlelist = json.dumps(titlelist)
                tribu = ""
                currenttitle = 0;
                shop = ""
                friends = ""
                shoplook = "1;0,0,0,0,0,0,0,0,0"
                shopcheese = 10000
                fraises = 5000
                coins = 2500
                totalban = 0
                TribuGradeJoueur = 0
                facebook = 0
                CheeseTitleList = "[]"
                FirstTitleList = "[]"
                ShamanTitleList = "[]"
                ShopTitleList = "[]"
                GiftTitleList = "[]"
                BootcampTitleList = "[]"
                ColorInfo = '78583a#95d9d6'
                HardMode = 0
                HardModeSaves = 0
                HardModeTitleList = "[]"
                Email = ""
                EmailInfo = ""
                regdate=str(getTime()).replace(".", "0")
                becerilerim = "0_3,1_5,20_5,21_5,22_5,23_5,24_1,25_5,26_5,27_1,28_5,29_5,30_1,31_5,32_5,33_1,34_1,40_5,41_5,42_5,43_5,44_1,45_5,46_1,47_1,48_4,50_1,51_1,52_1,53_1"
                skill = ""
                becericount = 0
                nextlevel = 0
                skilllevel = 0
                skillpoint = 0
                vip = 0
                tppuan = 0
                beceri = ""
                dbcur.execute("insert into users (name, password, privlevel, saves, shamcheese, first, cheese, rounds, bootcamp, titlelist, tribu, currenttitle, shop, friends, shoplook, shopcheese, fraises, coins, totalban, TribuGradeJoueur, facebook, CheeseTitleList, FirstTitleList, ShamanTitleList, ShopTitleList, GiftTitleList, regdate ,EmailInfo, Email, HardModeTitleList, HardModeSaves, HardMode, ColorInfo, BootcampTitleList, level, becerilerim, becericount, nextlevel, skill, skillpoint, skilllevel, vip, tppuan, beceri) values (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s)",
                (name, password, privlevel, saves, shamcheese, first, cheese, rounds, bootcamp, titlelist, tribu, currenttitle, shop, friends, shoplook, shopcheese, fraises, coins, totalban, TribuGradeJoueur, facebook, CheeseTitleList, FirstTitleList, ShamanTitleList, ShopTitleList, GiftTitleList, regdate, EmailInfo, Email, HardModeTitleList, HardModeSaves, HardMode, ColorInfo, BootcampTitleList, level, becerilerim, becericount, nextlevel, skill, skillpoint, skilllevel, vip, tppuan, beceri))

        def getMapName(self, code):
                dbcur.execute('select name from mapeditor where code = %s', [code])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return -1
                else:
                        return rrf[0]
        def getMapXML(self, code):
                dbcur.execute('select mapxml from mapeditor where code = %s', [code])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return -1
                else:
                        return rrf[0]
        def getMapYesVotes(self, code):
                dbcur.execute('select yesvotes from mapeditor where code = %s', [code])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return -1
                else:
                        return rrf[0]
        def getMapNoVotes(self, code):
                dbcur.execute('select novotes from mapeditor where code = %s', [code])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return -1
                else:
                        return rrf[0]
        def getMapPerma(self, code):
                dbcur.execute('select perma from mapeditor where code = %s', [code])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return -1
                else:
                        return rrf[0]
        def getMapDel(self, code):
                dbcur.execute('select deleted from mapeditor where code = %s', [code])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return -1
                else:
                        return rrf[0]

        def getIPPermaBan(self, ip):
                if ip in self.IPPermaBanCache:
                        return 1
                else:
                        dbcur.execute('select * from ippermaban where ip = %s', [ip])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return 0
                        else:
                                self.IPPermaBanCache.append(ip)
                                return 1

        def getResultTitleTonnere(self, username):
                dbcur.execute('select haveTonnere from users where name = %s', [username])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return -1
                else:
                        return rrf[0]

        def getProfileTitle(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        found = player.titleNumber
                return found


        def getProfileTribe(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        found = player.tribe
                return found
        def getProfileLevel(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        l = player.levelcount.split('/')
                                        found = int(l[0])+1
                return found
        def getProfileLook(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        found = player.look
                return found

        def getProfileSaves(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        found = player.micesaves
                return found


        def getProfileHardModeSaves(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        found = player.hardModeSaves
                return found

        def getProfileShamanCheese(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        found = player.shamancheese
                return found

        def getProfileFirstCount(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        found = player.firstcount
                return found

        def getProfileCheeseCount(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        found = player.cheesecount
                return found

        def getProfileBootCampCount(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        found = player.bootcampcount
                return found

        def getProfileRegDate(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        found = player.regdate
                return found

        def getProfileTitleList(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        titlelist = player.titleList
                                        titlelist = json.dumps(titlelist)
                                        titlelist = titlelist.replace("[","")
                                        titlelist = titlelist.replace("]","")
                                        titlelist = titlelist.replace("\"","")
                                        titlelist = titlelist.replace(" ","")
                                        return titlelist
                return found



        def getPlayerHardMode(self, playercode):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.playerCode == playercode:
                                        found = player.hardMode
                return found

        def getPlayerHardMode(self, playercode):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.playerCode == playercode:
                                        found = player.hardMode
                return found

        def getPlayerHardModetwo(self, playercode, playercode2):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.playerCode == playercode:
                                        found = player.hardMode
                        for player2 in room.clients.values():
                                if player2.playerCode == playercode2:
                                        found = player2.hardMode
                return found

        def sendModChatLocal(self, senderClient, eventTokens, data, langue, binary = None):
                for room in self.rooms.values():
                    for playerCode, client in room.clients.items():
                        if client.privilegeLevel>=4 and client.Langue == langue or client.privilegeLevel==10:
                            if binary:
                                client.sendData(eventTokens, data, True)
                            else:
                                client.sendData(eventTokens, data)

        def sendModChat(self, senderClient, eventTokens, data, binary = None):
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.privilegeLevel>=4:
                                        if binary:
                                                client.sendData(eventTokens, data, True)
                                        else:
                                                client.sendData(eventTokens, data)

        def updateColor(self, username):
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.username.lower().capitalize() == username.lower().capitalize():
                                        color1, color2 = self.mouseColorInfo(True, username.lower().capitalize(), "")
                                        client.color1 = color1
                                        if color2=="":
                                                if client.micesaves>=300:
                                                        client.color2="fade55"
                                                else:
                                                        client.color2="95d9d6"
                                        else:
                                                client.color2 = color2

        def sendTribeInvite(self, senderClient, code, name, tribe):
                if len(name)<3 or len(name)>12:
                        pass
                elif not name.isalpha():
                        pass
                else:
                        name=name.lower().capitalize()
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.username==name:
                                        if client.isInTribe:
                                                senderClient.sendPlayerAlreadyInTribe()
                                        else:
                                                client.AcceptableInvites.append(str(code))
                                                client.sendTribeInvite(code, senderClient.username, tribe)
                                                senderClient.sendInvitationSent()
        def sendWholeTribe(self, senderClient, eventTokens, data, binary = None, NotIgnorable = None):
                for room in self.rooms.values():
                        if binary:
                                reactor.callLater(0, room.sendWholeTribeRoom, senderClient, eventTokens, data, binary)
                        elif NotIgnorable:
                                reactor.callLater(0, room.sendWholeTribeRoom, senderClient, eventTokens, data, binary, NotIgnorable)
                        else:
                                reactor.callLater(0, room.sendWholeTribeRoom, senderClient, eventTokens, data)
        def sendWholeTribeOthers(self, senderClient, eventTokens, data, binary = None, NotIgnorable = None):
                for room in self.rooms.values():
                        if binary:
                                reactor.callLater(0, room.sendWholeTribeOthersRoom, senderClient, eventTokens, data, binary)
                        elif NotIgnorable:
                                reactor.callLater(0, room.sendWholeTribeOthersRoom, senderClient, eventTokens, data, binary, NotIgnorable)
                        else:
                                reactor.callLater(0, room.sendWholeTribeOthersRoom, senderClient, eventTokens, data)

        def sendTribeInfoUpdate(self, code, greeting = None, playerlist = None):
                for room in self.rooms.values():
                        if greeting:
                                reactor.callLater(0, room.sendTribeInfoUpdateRoom, code, greeting)
                        elif playerlist:
                                reactor.callLater(0, room.sendTribeInfoUpdateRoom, code, greeting, playerlist)
                        else:
                                reactor.callLater(0, room.sendTribeInfoUpdateRoom, code)

        def changePrivLevel(self, senderClient, username, privlevel):
                found = False
                if not username.startswith("*"):
                        username=username.lower().capitalize()
                        for room in self.rooms.values():
                                for player in room.clients.values():
                                        if player.username == username:
                                                player.privilegeLevel = privlevel
                                                player.sendData("\x1A" + "\x08",[player.username, str(player.playerCode), str(privlevel)])
                                                found = True
                                                break
                return found

        def sendRefreshShop(self):
                for room in self.rooms.values():
                        for player in room.clients.values():
                                player.shoplist = self.shopList
                                player.sendShopList()

        def sendPrivMsg(self, senderClient, fromUsername, toUsername, message, flag):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == toUsername:
                                        if player.silence:
                                                if senderClient.privilegeLevel in [10,6,5]:
                                                        senderClient.sendSentPrivMsg(toUsername, message, flag)
                                                        if player.censorChat:
                                                                message=player.censorMessage(message)
                                                        player.sendRecievePrivMsg(fromUsername, message, flag)
                                                else:
                                                        if player.silencemsg == "":
                                                            senderClient.sendData("\x06\x28"+struct.pack("!h", len(player.username))+str(player.username), [], True)
                                                        else:
                                                            senderClient.sendData("\x06\x28"+struct.pack("!h", len(player.username))+str(player.username)+struct.pack("!h", len(player.silencemsg))+str(player.silencemsg), [], True)
                                        else:
                                                senderClient.sendSentPrivMsg(toUsername, message, flag)
                                                if player.censorChat:
                                                        message=player.censorMessage(message)
                                                player.sendRecievePrivMsg(fromUsername, message, flag)
                                        found = True
                return found
        def sendPrivMsgF(self, senderClient, fromUsername, toUsername, message, flag):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == toUsername:
                                        if player.silence:
                                                if player.silencemsg == "":
                                                    senderClient.sendData("\x06\x28"+struct.pack("!h", len(player.username))+str(player.username), [], True)
                                                else:
                                                    senderClient.sendData("\x06\x28"+struct.pack("!h", len(player.username))+str(player.username)+struct.pack("!h", len(player.silencemsg))+str(player.silencemsg))
                                        else:
                                                senderClient.sendSentPrivMsg(toUsername, message, flag)
                                                #if player.censorChat:
                                                #       message=player.censorMessage(message)
                                                #player.sendRecievePrivMsg(fromUsername, message)
                                        found = True
                return found

        def getTribeList(self, code):
                onlinelist=[]
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if str(client.TribeCode)==str(code):
                                        color = client.color1
                                        if color == '"':
                                                color = '78583a'
                                        onlinelist.append('\x02'.join(map(str,[client.username, client.TribeRank, client.look, client.titleNumber, client.roomname, color])))
                return onlinelist

        def friendsListCheck(self, username, friendtc):
                #username = friends list to check
                #friendtc = name to check if it's on username's friends list
                found = False
                if username.isalpha() and friendtc.isalpha:
                        username=username.lower().capitalize()
                        friendtc=friendtc.lower().capitalize()
                        for room in self.rooms.values():
                                for player in room.clients.values():
                                        if player.username == username:
                                                if friendtc in player.friendsList:
                                                        found=True
                                                break
                return found

        def sendFriendConnected(self, username, friendts):
                #username = target
                #friendts = name to say had just connected
                found = False
                if username.isalpha() and friendts.isalpha:
                        username=username.lower().capitalize()
                        friendts=friendts.lower().capitalize()
                        for room in self.rooms.values():
                                for player in room.clients.values():
                                        if player.username == username:
                                                if friendts in player.friendsList:
                                                        player.sendFriendConnected(friendts)
                                                        found=True
                                                break
                return found

        def sendRoomInvite(self, senderClient, fromUsername, toUsername):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == toUsername:
                                        senderClient.sendData("\x1A" + "\x04", ["<BL>Invite sent."])
                                        player.sendData("\x1A" + "\x04", ["<BL>"+fromUsername+" invites you to their private room. Type \"/join "+fromUsername+"\" to join."])
                                        found = True
                return found

        def sendMuMute(self, username, modname):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        player.mumute = True
                                        found = True
                                        break
                return found

        def disconnectPlayer(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        player.sendPlayerDisconnect(player.playerCode)
                                        room.removeClient(player)
                                        player.transport.loseConnection()
                                        found = True
                                        break
                return found

        def delavaPlayer(self, username, mod):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        #mod.sendModMessageChannel("Servidor", mod.username+" deleted "+player.username+"'s avatar.")
                                        self.sendModChat(mod, "\x06\x14", ["["+mod.username+"] Avatar de "+player.username+" supprimé."], False)
                                        player.sendPlayerDisconnect(player.playerCode)
                                        room.removeClient(player)
                                        player.transport.loseConnection()
                                        found = True
                                        break
                return found

        def removeModMute(self, username):
                if username.isalpha():
                        username=username.lower().capitalize()
                        dbcur.execute("DELETE FROM UserTempMute WHERE Name = %s", [username])
                        return True
                return False
        def checkModMute(self, username):
                if username.isalpha():
                        username=username.lower().capitalize()
                        dbcur.execute('select * from UserTempMute where Name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return False
                        else:
                                return True
                return False
        def getModMuteInfo(self, username):
                if username.isalpha():
                        username=username.lower().capitalize()
                        dbcur.execute('select * from UserTempMute where Name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return ["", 0, ""]
                        else:
                                return rrf
                return ["", 0, ""]
        def sendModMute(self, username, timee, reason, modname):
                found = False
                if username.isalpha():
                        username=username.lower().capitalize()
                        for room in self.rooms.values():
                                for playerCode, client in room.clients.items():
                                        if client.username == username:
                                                #client.sendModMessageChannel("Servidor", modname+" muted "+username+" for "+str(timee)+" hours. Reason: "+str(reason))
                                                self.sendModChat(self, "\x06\x14", [modname+" has muted "+username+" for "+str(timee)+" hours. Reason: "+str(reason)], False)
                                                if self.checkModMute(client.username):
                                                        self.removeModMute(client.username)
                                                client.modmute = True
                                                client.sendModMuteRoom(client.username, timee, reason)
                                                timee = client.returnFutureTime(timee)
                                                dbcur.execute("insert into UserTempMute (Name, Time, Reason) values (%s, %s, %s)", (client.username, timee, reason))
                                                dbcon.commit()
                                                found = True
                                                break
                return found

        def banPlayer(self, username, bantime, reason, modname):
                found = False
                bantime = int(bantime)
                if reason.startswith("\x03"):
                        silentban=True
                        reason=reason.replace("\x03", "")
                else:
                        silentban=False
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.username == username:
                                        if modname != "Servidor":
                                                client.banhours = int(client.banhours)+bantime
                                                if bantime >= 1:
                                                        bandate = int(str(getTime())[:-4])
                                                        dbcur.execute("insert into BanLog (Name, BannedBy, Time, Reason, Date, Status, Room, IP) values (%s, %s, %s, %s, %s, %s, %s, %s)", (username, modname, bantime, reason, bandate, "Online", client.room.name, client.address[0]))
                                                        dbcon.commit()
                                        else:
                                                self.sendModChat(client, "\x06\x14", ["[Vote populaire] banned "+str(client.username)+" ("+str(client.room.name)+")."], False)
                                        if not username.startswith("*"):
                                                if client.banhours >= 361 and bantime <= 360:
                                                        dbcur.execute("insert into userpermaban (name, bannedby, reason) values (%s, %s, %s)", (username, modname, "Total ban hours went over 24. "+reason))
                                                dbcur.execute('UPDATE users SET totalban = %s WHERE name = %s', (str(client.banhours), client.username))
                                                dbcon.commit()
                                        client.sendPlayerBan(bantime, reason, silentban)
                                        if bantime >= 361:
                                                clientaddr = client.address[0]
                                                dbcur.execute("insert into ippermaban (ip, bannedby, reason) values (%s, %s, %s)", (clientaddr, modname, reason))
                                                dbcon.commit()
                                                if not username.startswith("*"):
                                                        dbcur.execute("insert into userpermaban (name, bannedby, reason) values (%s, %s, %s)", (username, modname, reason))
                                                        dbcon.commit()
                                        if bantime >= 1 and bantime <= 360:
                                                if not username.startswith("*"):
                                                        self.tempBanUser(username, bantime, reason)
                                                ipaddr = client.address[0]
                                                self.tempBanIP(ipaddr, bantime)
                                        found = True
                                        break
                if not found:
                        if not username.startswith("*"):
                                if self.checkExistingUsers(username):
                                        if modname != "Servidor" and bantime >= 1:
                                                banHours=self.getTotalBanHours(username)+bantime
                                                if banHours >= 361 and bantime <= 360:
                                                        dbcur.execute("insert into userpermaban (name, bannedby, reason) values (%s, %s, %s)", (username, modname, "Total ban hours went over 24. "+reason))
                                                        dbcon.commit()
                                                if bantime >= 361:
                                                        dbcur.execute("insert into userpermaban (name, bannedby, reason) values (%s, %s, %s)", (username, modname, reason))
                                                        dbcon.commit()
                                                if bantime >= 1 and bantime <= 360:
                                                        self.tempBanUser(username, bantime, reason)
                                                dbcur.execute('UPDATE users SET totalban = %s WHERE name = %s', (str(banHours), username))
                                                dbcur.execute("insert into BanLog (Name, BannedBy, Time, Reason, Date, Status, Room, IP) values (%s, %s, %s, %s, %s, %s, %s, %s)", (username, modname, bantime, reason, int(str(getTime())[:-4]), "Offline", "", "offline"))
                                                dbcon.commit()
                                                found = True
                return found

        def updatePlayerStats(self, username, rounds, saves, shamcheese, first, cheese, shopcheese, shop, shoplook, ShamanTitleList,  CheeseTitleList, FirstTitleList, titleList, hardMode, hardModeSaves, HardModeTitleList, ShopTitleList, bootcamp, BootcampTitleList, fraises, money, baffwins, coins, becericount, becerilerim, level, nextlevel):
                if username.startswith("*"):
                        pass
                else:
                        if str(rounds).isdigit():
                                rounds = int(rounds)
                        else:
                                rounds = 0
                        if str(saves).isdigit():
                                saves = int(saves)
                        else:
                                saves = 0
                        if str(shamcheese).isdigit():
                                shamcheese = int(shamcheese)
                        else:
                                shamcheese = 0
                        if str(first).isdigit():
                                first = int(first)
                        else:
                                first = 0
                        if str(cheese).isdigit():
                                cheese = int(cheese)
                        else:
                                cheese = 0
                        if str(shopcheese).isdigit():
                                shopcheese = int(shopcheese)
                        else:
                                shopcheese = 0

                        if str(hardMode).isdigit():
                                hardMode = int(hardMode)
                        else:
                                hardMode = 0
                        if str(hardModeSaves).isdigit():
                                hardModeSaves = int(hardModeSaves)
                        else:
                                hardModeSaves = 0
                        if str(bootcamp).isdigit():
                                bootcamp = int(bootcamp)
                        if str(baffwins).isdigit():
                                baffwins = int(baffwins)
                        if str(fraises).isdigit():
                                fraises = int(fraises)
                        if str(money).isdigit():
                                money = int(money)
                        if str(coins).isdigit():
                                coins = int(coins)
                        titleList = filter(None, titleList)
                        ShamanTitleList = filter(None, ShamanTitleList)
                        CheeseTitleList = filter(None, CheeseTitleList)
                        FirstTitleList = filter(None, FirstTitleList)
                        HardModeTitleList = filter(None, HardModeTitleList)
                        ShopTitleList = filter(None, ShopTitleList)
                        BootcampTitleList = filter(None, BootcampTitleList)
                        dbShamanTitleList = json.dumps(ShamanTitleList)
                        dbCheeseTitleList = json.dumps(CheeseTitleList)
                        dbFirstTitleList = json.dumps(FirstTitleList)
                        dbtitleList = json.dumps(titleList)
                        dbHardModeTitleList = json.dumps(HardModeTitleList)
                        dbShopTitleList = json.dumps(ShopTitleList)
                        dbBootcampTitleList = json.dumps(BootcampTitleList)
                        dbcur.execute('UPDATE users SET rounds = %s, saves = %s, shamcheese = %s, first = %s, cheese = %s, shopcheese = %s, shop = %s, shoplook = %s, titlelist = %s, CheeseTitleList = %s, FirstTitleList = %s, ShamanTitleList = %s, HardMode = %s, HardModeSaves = %s, HardModeTitleList = %s, ShopTitleList = %s, bootcamp = %s, BootcampTitleList = %s, fraises = %s, money = %s, coins = %s, baffwins = %s, becericount = %s, becerilerim = %s, level = %s, nextlevel = %s WHERE name = %s',
                        (rounds, saves, shamcheese, first, cheese, shopcheese, shop, shoplook, dbtitleList, dbCheeseTitleList, dbFirstTitleList, dbShamanTitleList, hardMode, hardModeSaves, dbHardModeTitleList, dbShopTitleList, bootcamp, dbBootcampTitleList, fraises, money, coins, baffwins, becericount, becerilerim, level, nextlevel, username))
                        dbcon.commit()

        def getIPaddress(self, username):
                found = False
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.username == username:
                                        found = client.address[0]
                                        break
                return found

        def disconnectIPaddress(self, IPaddr):
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if str(client.address[0]) == str(IPaddr):
                                        client.transport.loseConnection()

        def doVoteBan(self, username, selfIP, selfName):
                found = False
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.username == username:
                                        if client.privilegeLevel == 10 or client.privilegeLevel == 6 or client.privilegeLevel == 5 or client.privilegeLevel == 3:
                                                pass
                                        else:
                                                if not selfIP in client.voteban:
                                                        client.voteban.append(selfIP)
                                                        if len(client.voteban)>=10:
                                                                self.banPlayer(client.username, "1", "Vote populaire", "Servidor")
                                                else:
                                                        pass
                                        client.room.sendAllStaffInRoomVoteBan(self, selfName , username, str(len(client.voteban)))
                                        break
                return found

        def doVoteMute(self, username, selfIP, selfName):
                found = False
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.username == username:
                                        if client.privilegeLevel == 10 or client.privilegeLevel == 6 or client.privilegeLevel == 5 or client.privilegeLevel == 3:
                                                pass
                                        else:
                                                if not selfIP in client.votemuteplayer:
                                                        client.votemuteplayer.append(selfIP)
                                                        if len(client.votemuteplayer)>=5:
                                                                self.sendModMute(client.username, 1, "Vote populaire", "Servidor")
                                                else:
                                                        pass
                                        client.room.sendAllStaffInRoomVoteMute(self, selfName , username, str(len(client.votemuteplayer)))
                                        break
                return found

        def clearVoteBan(self, senderClient, username):
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.username == username:
                                        client.voteban=[]
                                        self.sendModChat(senderClient, "\x06\x14", [senderClient.username+" has resetted the voteban counter for "+str(client.username)+"."], False)


        def getFindPlayerRoom(self, username):
                found = False
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.username == username:
                                        return client.roomname
                                        break
                return found

        def getFindRoomPartial(self, senderClient, findroomname, FindAll=None):
                found = False
                resultlist=""
                playercount=0
                for room in self.rooms.values():
                        if re.search(findroomname.lower(), room.name.lower()):
                                resultlist=resultlist+"<br>"+str(room.name)+" : "+str(room.getPlayerCount())
                                playercount=playercount+room.getPlayerCount()
                senderClient.sendData("\x06" + "\x14",[resultlist])
                senderClient.sendData("\x06" + "\x14",["Игроков онлайн: "+str(playercount)])

        def getFindPlayerRoomPartial(self, senderClient, username, FindAll=None):
                found = False
                NoTest= False
                if FindAll:
                        username=""
                else:
                        result=""
                        level=range(48, 57+1)+range(65, 90+1)+range(97, 122+1)+[95, 42]
                        for x in username:
                                        if not int(senderClient.hex2dec(x.encode("hex"))) in level:
                                                x=""
                                                NoTest=True
                                        result+=x
                        if result=="":
                                NoTest=True
                        username = result.replace("*","\*")
                if not NoTest:
                        resultlist=""
                        for room in self.rooms.values():
                                for playerCode, client in room.clients.items():
                                        if re.search(username.lower(), client.username.lower()):
                                                resultlist=resultlist+"<br>"+client.username+" -> "+ client.room.name
                        resultlistT=resultlist.strip("<br>")
                        if resultlistT=="":
                                senderClient.sendData("\x06" + "\x14",[resultlist])
                        else:
                                senderClient.sendData("\x06" + "\x14",[resultlist])

        def getLsModo(self, senderClient):
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.privilegeLevel in [10,6,5]:
                                        name="-"
                                        message=client.username+" : "+client.room.name
                                        #data="\x03"+struct.pack('!h', len(name))+name+struct.pack('!h', len(message))+message+"\x00\x00"
                                        #senderClient.sendData("\x06\x0A", data, True)
                                        senderClient.sendData("\x1A\x05", [name, message])
        def getLsArb(self, senderClient):
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.privilegeLevel in [3]:
                                        name="-"
                                        message=client.username+" : "+client.room.name
                                        #data="\x02"+struct.pack('!h', len(name))+name+struct.pack('!h', len(message))+message+"\x00\x00"
                                        #senderClient.sendData("\x06\x0A", data, True)
                                        senderClient.sendData("\x1A\x06", [name, message])
        def getLsVip(self, senderClient):
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.isVip in [1]:
                                        name="-"
                                        message=client.username+" : "+client.room.name
                                        senderClient.sendData("\x1A\x06", [name, message])  

        def getLsAgent(self, senderClient):
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.isAgent in [1]:
                                        name="-"
                                        message=client.username+" : "+client.room.name
                                        senderClient.sendData("\x1A\x06", [name, message])  

        def getRoomList(self, senderClient):
                found = False
                roomlist=""
                for room in self.rooms.values():
                        roomlist=roomlist+"<br>"+room.name+" : "+str(room.getPlayerCount())
                senderClient.sendData("\x06" + "\x14",[roomlist])
                senderClient.sendData("\x06" + "\x14",["Игроков онлайн: "+str(self.getConnectedPlayerCount())])
                return found

        def getTribesList(self, senderClient):
                found = False
                tribes={}
                tribelist=""
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.TribeName!="":
                                        try:
                                                tribes[client.TribeName]+=1
                                        except:
                                                tribes[client.TribeName]=1
                for tribename in tribes.keys():
                        tribelist=tribelist+"<br>"+str(tribename)+" : "+str(tribes[tribename])
                tribelistT=tribelist.strip("<br>")
                if tribelistT=="":
                        senderClient.sendData("\x06" + "\x14",[tribelistT])
                else:
                        senderClient.sendData("\x06" + "\x14",[tribelist])
                #senderClient.sendData("\x06" + "\x14",[tribelist])
                return found

        def nomIPCommand(self, senderClient, name):
                iplist="Dernières adresses IP connuent pour The player ["+name+"] :"
                dbcur.execute('select * from LoginLog where Name = %s', [name])
                rrfRows = dbcur.fetchall()
                if rrfRows is None:
                        pass
                else:
                        for rrf in rrfRows:
                                iplist=iplist+"<br>"+str(rrf[1])
                senderClient.sendData("\x06" + "\x14",[iplist])
        def IPNomCommand(self, senderClient, ip):
                namelist="Players are using the ip ["+str(ip)+"] :"
                for room in self.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.address[0]==ip:
                                        namelist=namelist+"<br>"+str(client.username)
                namehlist="History of IP ["+str(ip)+"] :"
                dbcur.execute('select * from LoginLog where IP = %s', [ip])
                rrfRows = dbcur.fetchall()
                if rrfRows is None:
                        pass
                else:
                        for rrf in rrfRows:
                                namehlist=namehlist+"<br>"+str(rrf[0])
                senderClient.sendData("\x06" + "\x14",[namelist])
                senderClient.sendData("\x06" + "\x14",[namehlist])

        def restartServerDelLog(self):
                pass #logging.info("Restarting")
                for room in self.rooms.values():
                        room.updatesqlserver()
                reactor.stop()
                os._exit(11)
        def restartServer10min(self):
                pass #logging.info("Restarting")
                for room in self.rooms.values():
                        room.updatesqlserver()
                reactor.stop()
                os._exit(12)
        def restartServer5min(self):
                pass #logging.info("Restarting")
                for room in self.rooms.values():
                        room.updatesqlserver()
                reactor.stop()
                os._exit(13)
        def restartServer20min(self):
                pass #logging.info("Restarting")
                for room in self.rooms.values():
                        room.updatesqlserver()
                reactor.stop()
                os._exit(14)
        def restartServerUpdate(self):
                pass #logging.info("Restarting")
                for room in self.rooms.values():
                        room.updatesqlserver()
                reactor.stop()
                os._exit(20)

        def restartServer(self):
                pass #logging.info("Restarting")
                for room in self.rooms.values():
                        room.updatesqlserver()
                reactor.stop()
                os._exit(10)

        def stopServer(self):
                pass #logging.info("Stopping")
                for room in self.rooms.values():
                        room.updatesqlserver()
                reactor.stop()
                os._exit(5)

        def removeTempBan(self, username):
                if username.isalpha():
                        username=username.lower().capitalize()
                        dbcur.execute("DELETE FROM UserTempBan WHERE Name = %s", [username])
                        dbcon.commit()
                        return True
                return False
        def checkIPBan(self, ip):
                dbcur.execute('select * from ippermaban where ip = %s', [ip])
                rrf = dbcur.fetchone()
                if rrf is None:
                        return False
                else:
                        return True
        def removeIPBan(self, ip):
                dbcur.execute("DELETE FROM ippermaban WHERE ip = %s", [ip])
                dbcon.commit()
                return True
        def checkTempBan(self, username):
                if username.isalpha():
                        username=username.lower().capitalize()
                        dbcur.execute('select * from UserTempBan where Name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return False
                        else:
                                return True
                return False
        def getTempBanInfo(self, username):
                if username.isalpha():
                        username=username.lower().capitalize()
                        dbcur.execute('select * from UserTempBan where Name = %s', [username])
                        rrf = dbcur.fetchone()
                        if rrf is None:
                                return ["", 0, ""]
                        else:
                                return rrf
                return ["", 0, ""]
        def tempBanUser(self, name, bantime, reason):
                if self.checkTempBan(name):
                        self.removeTempBan(name)
                dbcur.execute("insert into UserTempBan (Name, Time, Reason) values (%s, %s, %s)", (str(name).lower().capitalize(), str(getTime()+int((int(bantime)*60*60))), str(reason)))
                dbcon.commit()
                #time = time*3600
                #if not name in self.tempAccountBanList:
                #       self.removeTempBanUserTimer = reactor.callLater(time, self.tempBanUserRemove, name)
                #       self.tempAccountBanList.append(name)
        def tempBanIP(self, ipaddr, timee):
                timee = timee*3600
                if not ipaddr in self.tempIPBanList:
                        self.removeTempBanIPTimer = reactor.callLater(timee, self.tempBanIPRemove, ipaddr)
                        self.tempIPBanList.append(ipaddr)
        def tempBanIPExact(self, ipaddr, time):
                if not ipaddr in self.tempIPBanList:
                        self.removeTempBanIPTimer = reactor.callLater(time, self.tempBanIPRemove, ipaddr)
                        self.tempIPBanList.append(ipaddr)
        def tempBanUserRemove(self, name):
                if name in self.tempAccountBanList:
                        self.tempAccountBanList.remove(name)
        def tempBanIPRemove(self, ipaddr):
                if ipaddr in self.tempIPBanList:
                        self.tempIPBanList.remove(ipaddr)

        def checkAlreadyExistingGuest(self, nusername):
                x=0
                found=False
                if not self.checkAlreadyConnectedAccount(nusername):
                        found=True
                        return nusername
                while not found:
                        x+=1
                        if not self.checkAlreadyConnectedAccount(nusername+"_"+str(x)):
                                found=True
                                return nusername+"_"+str(x)

        def checkAlreadyConnectedAccount(self, username):
                found = False
                for room in self.rooms.values():
                        for player in room.clients.values():
                                if player.username == username:
                                        found = True
                return found

        def addClientToRoom(self, client, roomName):
                roomName = str(roomName)
                if roomName in self.rooms:
                        self.rooms[roomName].addClient(client)
                else:
                        self.rooms[roomName] = TransformiceRoomHandler(self, roomName)
                        self.rooms[roomName].addClient(client)
                #return self.rooms[roomName]

        def closeRoom(self, room):
                if room.name in self.rooms:
                        room.close()
                        del self.rooms[room.name]

        def getConnectedPlayerCount(self):
                count = 0
                for room in self.rooms.values():
                        for player in room.clients.values():
                                count = count+1
                return count

        def generatePlayerCode(self):
                self.lastPlayerCode+=1
                return self.lastPlayerCode

        def recommendRoomPrefixed(self, prefix, langue):
                found=False
                x=0
                while not found:
                        x+=1
                        room=langue+"-"+prefix+str(x)
                        if room in self.rooms:
                                playercount=self.rooms[room].getPlayerCount()
                                if int(playercount)<25:
                                        found=True
                                        return prefix+str(x)
                        else:
                                found=True
                                return prefix+str(x)

        def recommendRoom(self, langue):
                found=False
                x=0
                while not found:
                        x+=1
                        room=langue+"-"+str(x)
                        if room in self.rooms:
                                playercount=self.rooms[room].getPlayerCount()
                                if int(playercount)<25:
                                        found=True
                                        return str(x)
                        else:
                                found=True
                                return str(x)

        def initMinigame(self, name, room):
            f = False
            print(name)
            if name.startswith("blrace"):
                room.minigame = blRace()
                f = True
            elif name.startswith("sharpie"):
                room.minigame = Sharpie()
                f = True
            elif name.startswith("control"):
                room.minigame = Control()
                f = True
            elif name.startswith("trainingbootcamp"):
                room.minigame = TrainingBC()
                f = True
            elif name.startswith("flyspeed"):
                room.minigame = Flyspeed()
                f = True
            elif name.startswith("poderes"):
                room.minigame = Poderes()
                f = True
            elif name.startswith("infected"):
                room.minigame = Infected()
                f = True
            elif name.startswith("traitor"):
                room.minigame = Traitor()
                f = True            
            return f

class TransformiceRoomHandler(object):
        def __init__(self, server, name):
                self.server = server
                self.name = name.strip()

                self.clients = {}
                self.anchors = []

                self.currentShamanCode = None
                self.currentSyncroniserCode = None

                self.isDoubleMap = False
                self.currentSecondShamanCode = None
                self.changed20secTimer = False
                self.never20secTimer = False

                self.currentShamanName = None
                self.currentSecondShamanName = None

                self.playerLimit = 60
                
                self.isSandbox = False
                self.isCurrentlyPlayingRoom = False
                self.isEditeur = False
                self.isTotemEditeur = False
                self.isTutorial=False
                self.isPlay = False
                self.isBootcamp = False
                self.noLook = False
                self.noKillAfk = False
                self.noAutoRespawn = False
                self.isVanilla = False
                self.isAtelier801 = False
                self.isKey = False
                self.isRacing = False
                self.pwing = False
                # LUA MINIGAMES
                self.isSharpie = False
                self.isTraitor = False
                # END LUA MINIGAMES #
                self.isBaffbotffa = False
                self.isDefilante = False
                self.isArtRoom = False
                self.isSurvivor = False
                self.isKanat = False
                self.re = 0
                self.isTribehouse = False
                self.isHalloween = False
                self.isDone = False
                self.HalloPart = 0
                self.specificMap = False
                self.specialMap = 0
                self.isSnowing = False
                self.SurvivorVamp = False
                self.noShaman = False
                self.isEventMap = False
                self.spawncn = False
                self.properNoShamanMaps = True
                self.isCatchTheCheeseMap = False
                self.isValidate = 0
                self.objectid = 0
                self.bulut1 = 0
                self.bulut2 = 0
                self.arkadaslik1 = 0
                self.arkadaslik2 = 0
                self.NoNumberedMaps = False
                self.PTwoCycle = False
                self.PTwoCycleInfo = 0
                self.PTwoCycleList = []
                self.PRShamanIsShaman = False
                self.isTribehouseMap = False
                self.iceenabled = False

                self.minigame = None
                self.isMinigame = False

                #                          Code[0], Name[1], XML[2], YesVotes[3], NoVotes[4], Perma[5], Deleted[6]
                self.ISCMdata = [0, "Invalid", "<C><P /><Z><S /><D /><O /></Z></C>", 0, 0, 0, 0]
                self.ISCM = -1
                self.ISCMstatus = 0
                self.ISCMEstatus = 0 #Evento

                #                               Code[0], Name[1], XML[2], YesVotes[3], NoVotes[4], Perma[5], Deleted[6], Validated[7]
                self.ISCMVdata =[0, "Invalid", "null", 0, 0, 0, 0, 0]
                self.ISCMV = 0
                self.ISCMVloaded = 0

                self.RoomInvite=[]
                self.PrivateRoom=False

                self.forceNextShaman = False
                self.forceNextMap = False
                self.CodePartieEnCours = 1
                self.CustomMapCounter = 1
                self.identifiantTemporaire = -1

                self.countStats = True
                self.autoRespawn = False
                self.roundTime = 120
                self.rounds = 1

                self.votingMode = False
                self.votingBox = False
                self.initVotingMode = True
                self.recievedYes= 0
                self.recievedNo = 0
                self.voteCloseTimer = None

                self.CheckedPhysics=False
                self.isHardSham=False

                self.SPR_Room = False
                self.eSync      = False
                self.sSync      = True
                self.sNP          = True
                self.sT    = False
                self.spc0        = False
                self.SPR_CM   = 0

                self.halloweenMobs = {}
                
                self.nobodyIsShaman = False
                
                self.ZombieTimer = None
                self.isZombieRoom = False

                self.bBarcoEnviado = False
                self.bNavegarEnviado = False
                self.NavegationStartTimer = None
                self.bVentoEnviado = False
                self.WindStartTimer = None
                self.bChuvaEnviada = False
                self.RainStartTimer = None
                self.bTempestadeEnviada = False
                self.StormStartTimer = None
                self.bTrovao1 = False
                self.Thunder1StartTimer = None
                self.bTrovao2 = False
                self.Thunder2StartTimer = None
                self.bTrovao3 = False
                self.Thunder3StartTimer = None
                self.bTrovao4 = False
                self.Thunder4StartTimer = None
                self.bTrovao5 = False
                self.Thunder5StartTimer = None
                self.bTrovao6 = False
                self.Thunder6StartTimer = None
                self.snowStormStartTimer = reactor.callLater(random.randrange(900, 1500), self.startSnowStorm)
                #self.EasterTimer = reactor.callLater(600, self.InitEaster) #600 = 10min

                if self.name == "repeat":
                        self.specificMap = True
                        self.isPlay = True
                        self.currentWorld = "0"
                        self.roundTime = 120
                if self.name in self.server.SPR:
                        self.SPR_Room=True
                        RunList=self.server.SPRD[:]
                        for position, room in enumerate(RunList):
                                if room[0]==self.name:
                                        self.countStats=room[1]
                                        self.specificMap=room[2]
                                        self.isSandbox=room[3]
                                        if room[4] == 1:
                                                self.currentWorld="-1"
                                                self.SPR_CM=room[5]
                                        elif room[4] == 2:
                                                self.currentWorld="-1"
                                                self.specialMap=room[5]
                                        else:
                                                self.currentWorld=room[5]
                                        self.autoRespawn=room[6]
                                        self.roundTime=room[7]
                                        self.never20secTimer=room[8]
                                        #Extra Vars
                                        self.eSync=room[9]
                                        self.sSync=room[10]
                                        self.sNP=room[11]
                                        self.sT=room[12]
                                        self.spc0=room[13]
                                        self.playerLimit=room[14]
                                        break
                #$ LUA MINIGAMES $#
                elif self.name.startswith("*#"):
                        from modules import Minigames
                        mg = Minigames()
                        s = mg.initMinigame(self.name[2:].lower(), self)
                        if s:
                                self.minigame.load()
                                self.isMinigame = True
                                self.roundTime = 30
                                self.noShaman = True
                elif self.name[3:].startswith("#"):
                        from modules import Minigames
                        mg = Minigames()
                        s = mg.initMinigame(self.name[4:].lower(), self)
                        if s:
                                self.minigame.load()
                                self.isMinigame = True
                                self.roundTime = 30
                                self.noShaman = True
                # END OF LUA MINIGAMES #
                elif self.name.startswith("\x03"+"[Private] "):
                        self.countStats = False
                        self.PrivateRoom = True
                        self.roundTime = 120
                        self.never20secTimer = True
                elif self.name.startswith("\x03"+"[Editeur] "):
                        self.countStats = False
                        self.currentWorld = 0
                        #self.specificMap = True
                        self.isEditeur = True
                        self.roundTime = 120
                        self.never20secTimer = True
                elif self.name.startswith("\x03"+"[Totem] "):
                        self.countStats = False
                        #self.isSandbox = True
                        self.currentWorld = 444
                        self.specificMap = True
                        self.isTotemEditeur = True
                        self.roundTime = 3600
                        self.never20secTimer = True
                elif re.search("bootcamp", name.lower()):
                        self.countStats = False
                        self.currentWorld = "-1"
                        #self.specificMap = True
                        self.isBootcamp = True
                        self.autoRespawn = True
                        self.roundTime = 360
                        self.never20secTimer = True
                elif re.search("vanilla", name.lower()):
                        self.isVanilla = True
                        self.roundTime = 120
                elif re.search("survivor", name.lower()):
                        self.isSurvivor = True
                        self.roundTime = 120
                elif re.search("801", name.lower()):
                        self.countStats = False
                        self.roundTime = 0
                        self.autoRespawn = True
                        self.never20secTimer = True
                        self.noShaman = True
                        self.isAtelier801 = True
                elif re.search("3217249835136635810", name.lower()):
                        self.countStats = False
                        self.roundTime = 0
                        self.autoRespawn = True
                        self.never20secTimer = True
                        self.noShaman = True
                        self.isKey = True
                elif re.search("kanat", name.lower()):
                        self.isKanat = True
                        self.noShaman = True
                        self.never20secTimer = True
                        self.roundTime = 120
                elif re.search("notimer", name.lower()):
                        self.countStats = False
                        self.roundTime = 0
                        self.never20secTimer = True
                elif re.search("baffbotffa", name.lower()):
                        self.countStats = True
                        self.isBaffbotffa = True
                        self.roundTime = 120
                elif re.search("racing", name.lower()):
                        self.countStats = True
                        self.isRacing = True
                        self.noShaman = True
                        self.never20secTimer = True
                        self.roundTime = 60
                elif re.search("defilante", name.lower()):
                        self.countStats = True
                        self.isDefilante = True
                        self.noShaman = True
                        self.roundTime = 120
                elif re.search("art", name.lower()):
                        self.countStats = True
                        self.isArtRoom = True
                        self.roundTime = 120
                elif self.name.startswith("*\x03"):
                        self.countStats = False
                        self.isTribehouse = True
                        self.roundTime = 120
                        self.currentWorld = "-1"
                        self.isTribehouseMap = True
                elif self.name.startswith("\x03"+"[Tutorial]"):
                        self.countStats = False
                        self.currentWorld = 900
                        self.specificMap = True
                        self.noShaman = True
                        self.roundTime = 120
                        self.never20secTimer = True
                        self.PrivateRoom = True
                        self.isTutorial=True
                else:
                        self.roundTime = 120
                if self.isMinigame:
                        self.minigame.event_createroom(self)
                runthismap = self.selectMap(True)
                self.currentWorld = runthismap
                if self.currentWorld != -1:
                        self.WorldFound = random.randint(0, 5)

                self.everybodyIsShaman = self.isSandbox
                if not self.nobodyIsShaman:
                        if not self.isTribehouseMap:
                                self.nobodyIsShaman = self.isBootcamp
                        else:
                                self.nobodyIsShaman = self.isTribehouseMap

                if self.playerLimit == 0:
                        self.playerLimit = 60
                
                self.worldChangeTimer = None
                self.ZombieTimer = None
                self.killAfkTimer = None
                self.autoRespawnTimer = None
                self.sNNMTimer = None
                self.sPTCTimer = None
                if not self.isSandbox:
                                if self.currentWorld==888:
                                        self.worldChangeTimer = reactor.callLater(60, self.worldChange)
                                else:
                                        self.worldChangeTimer = reactor.callLater(self.roundTime, self.worldChange)
                                self.killAfkTimer = reactor.callLater(30, self.killAfk)
                                self.closeRoomRoundJoinTimer = reactor.callLater(3, self.closeRoomRoundJoin)
                if self.autoRespawn or self.isTribehouseMap:
                        self.autoRespawnTimer = reactor.callLater(15, self.respawnMice)
                self.gameStartTime = getTime()
                self.numCompleted = 0
                self.numGotCheese = 0

        def spawnMonster(self, MID, Type, X, Y):
                data = ""
                
                if Type == 1123:
                    self.halloweenMobs[MID] = {"health":100,"x":X,"y":Y,"type":Type}
                    data = "\x68\x61\x74\x00\x00"

                elif Type == 358:
                    self.halloweenMobs[MID] = {"health":10,"x":X,"y":Y,"type":Type}
                    
                elif Type == 627:
                    self.halloweenMobs[MID] = {"health":10,"x":X,"y":Y,"type":Type}
                    data = '\x71'
                
                self.sendAllBin("\x1A\x06", str(struct.pack("!iiibh", int(MID), int(X), int(Y), 0, int(Type))) + data)
                
                if Type == 358 or Type == 627:
                    self.sendAllBin("\x1A\x08", str(struct.pack("!ii", int(MID), -2)))
                else:
                    pass

        def respawnMice(self):
                for playerCode, client in self.clients.items():
                        if client.isDead:
                                client.isDead=False
                                client.JumpCheck=1
                                client.playerStartTime = getTime()
                                if self.isBootcamp:
                                        self.sendAll("\x08" + "\x08",[client.getPlayerData(), 0])
                                else:
                                        self.sendAll("\x08" + "\x08",[client.getPlayerData(), 1])
                if self.autoRespawn or self.isTribehouseMap:
                        self.autoRespawnTimer = reactor.callLater(15, self.respawnMice)
        # Map 777 Defs ---- START    
        def respawnSpecific(self, username):
                for playerCode, client in self.clients.items():
                    if client.username == username:
                        client.isDead=False
                        client.JumpCheck=1
                        client.playerStartTime = getTime()
                        if self.isBootcamp:
                            self.sendAll("\x08" + "\x08",[client.getPlayerData(), 0])
                        else:
                            self.sendAll("\x08" + "\x08",[client.getPlayerData(), 1])
        def switchNoNumberedMaps(self, option):
                if self.sNNMTimer:
                        try:
                                self.sNNMTimer.cancel()
                        except:
                                self.sNNMTimer = None
                if option==True:
                        self.NoNumberedMaps = True
                        self.sNNMTimer = reactor.callLater(1200, self.switchNoNumberedMaps, False)
                else:
                        self.NoNumberedMaps = False
                        self.sNNMTimer = reactor.callLater(1200, self.switchNoNumberedMaps, True)

        def switchPTwoCycle(self, option):
                if self.sPTCTimer:
                        try:
                                self.sPTCTimer.cancel()
                        except:
                                self.sPTCTimer = None
                if option==True:
                        self.PTwoCycle = True
                        self.sPTCTimer = reactor.callLater(1200, self.switchPTwoCycle, False)
                else:
                        self.PTwoCycle = False
                        self.PTwoCycleInfo=0
                        self.PTwoCycleList=[]
                        self.sPTCTimer = reactor.callLater(1200, self.switchPTwoCycle, True)

        def close(self):
                if self.worldChangeTimer:
                        try:
                                self.worldChangeTimer.cancel()
                        except:
                                self.worldChangeTimer=None
                if self.killAfkTimer:
                        try:
                                self.killAfkTimer.cancel()
                        except:
                                self.killAfkTimer=None
                if self.autoRespawnTimer:
                        try:
                                self.autoRespawnTimer.cancel()
                        except:
                                self.autoRespawnTimer=None
                #if self.snowStormStartTimer:
                #        try:
                #                self.snowStormStartTimer.cancel()
                #        except:
                #                self.autoRespawnTimer=None

        def selectMapSpecific(self, mapnum, custom):
                if str(mapnum).isdigit():
                        if custom:
                                mapcode = int(mapnum)
                                mapname = self.server.getMapName(mapcode)
                                mapxml   = self.server.getMapXML(mapcode)
                                yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                novotes = int(self.server.getMapNoVotes(mapcode))
                                perma     = int(self.server.getMapPerma(mapcode))
                                mapnoexist = int(self.server.getMapDel(mapcode))
                                self.ISCM = mapcode
                                self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                return "-1"
                        else:
                                self.ISCM = -1
                                self.ISCMdata = [0, "Invalid", "<C><P /><Z><S /><D /><O /></Z></C>", 0, 0, 0, 0]
                                return int(mapnum)
                else:
                        pass
        
        def selectMapSpecial(self, mapnum):
                if int(mapnum) in self.server.SPMmaps:
                        for spm in self.server.SPM:
                                if spm[0]==int(mapnum):
                                        #SPM.append([code, author, xml])
                                        mapcode = 1
                                        mapname = spm[1]
                                        mapxml   = spm[2]
                                        yesvotes   = 0
                                        novotes = 0
                                        perma     = 2
                                        mapnoexist = 1
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                        return "-1"
                else:
                        print "fail?"
        def selectMap(self, NewRoom = None):
                if self.PTwoCycle:
                        if self.PTwoCycleList == []:
                                #List is empty, populate it.
                                dbcur.execute('select * from mapeditor where perma = 2')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        self.PTwoCycle = False
                                else:
                                        for rrf in rrfRows:
                                                self.PTwoCycleList.append(rrf[1])
                                mapnum   = self.PTwoCycleList[self.PTwoCycleInfo]
                                self.PTwoCycleInfo+=1
                                if self.PTwoCycleInfo==len(self.PTwoCycleList):
                                        self.PTwoCycle=False
                                        self.PTwoCycleInfo=0
                                        self.PTwoCycleList=[]
                                        if self.sPTCTimer:
                                                try:
                                                        self.sPTCTimer.cancel()
                                                except:
                                                        self.sPTCTimer = None
                                mapcode = int(mapnum)
                                mapname = self.server.getMapName(mapcode)
                                mapxml   = self.server.getMapXML(mapcode)
                                yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                novotes = int(self.server.getMapNoVotes(mapcode))
                                perma     = int(self.server.getMapPerma(mapcode))
                                mapnoexist = int(self.server.getMapDel(mapcode))
                                self.ISCM = mapcode
                                self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                return "-1"
                        else:
                                mapnum   = self.PTwoCycleList[self.PTwoCycleInfo]
                                self.PTwoCycleInfo+=1
                                if self.PTwoCycleInfo==len(self.PTwoCycleList):
                                        self.PTwoCycle=False
                                        self.PTwoCycleInfo=0
                                        self.PTwoCycleList=[]
                                        if self.sPTCTimer:
                                                try:
                                                        self.sPTCTimer.cancel()
                                                except:
                                                        self.sPTCTimer = None
                                mapcode = int(mapnum)
                                mapname = self.server.getMapName(mapcode)
                                mapxml   = self.server.getMapXML(mapcode)
                                yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                novotes = int(self.server.getMapNoVotes(mapcode))
                                perma     = int(self.server.getMapPerma(mapcode))
                                mapnoexist = int(self.server.getMapDel(mapcode))
                                self.ISCM = mapcode
                                self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                return "-1"

                if self.NoNumberedMaps:
                        self.ISCMstatus=3
                if self.forceNextMap:
                        forceNextMap = self.forceNextMap
                        self.forceNextMap = False
                        if forceNextMap.startswith("@"):
                                forceNextMap=forceNextMap.replace("@", "")
                                return self.selectMapSpecific(forceNextMap, True)
                        else:
                                return self.selectMapSpecific(forceNextMap, False)
                elif NewRoom:
                        if self.isBootcamp:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 3')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                        return "-1"
                        elif self.isSurvivor:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 11')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if len(maplist)>=2:
                                        while runthismap == self.ISCM:
                                                runthismap = random.choice(maplist)
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                        return "-1"
                        elif self.isKanat:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 7')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if len(maplist)>=2:
                                        while runthismap == self.ISCM:
                                                runthismap = random.choice(maplist)
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                        return "-1"
                        elif self.isRacing: 
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 7')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                        return "-1"
                        elif self.isDefilante: 
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 18')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                        return "-1"
                        elif self.isArtRoom: 
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 5')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                        return "-1"
                        elif self.isTribehouse:
                                tribename = self.name[2:]
                                code = self.server.getTribeCode(tribename)
                                TribeData = self.server.getTribeData(int(code[0]))
                                runthismap = TribeData[5]
                                mapcode = int(runthismap)
                                mapname = self.server.getMapName(mapcode)
                                mapxml   = self.server.getMapXML(mapcode)
                                yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                novotes = int(self.server.getMapNoVotes(mapcode))
                                perma     = int(self.server.getMapPerma(mapcode))
                                mapnoexist = int(self.server.getMapDel(mapcode))
                                self.ISCM = mapcode
                                self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                self.tribehouseCM = mapcode
                                self.tribehouseCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                self.isTribehouseMap = True
                                return "-1"
                        elif self.isEditeur:
                                return 0
                        elif self.SPR_Room and self.SPR_CM!=0:
                                runthismap=self.SPR_CM
                                mapcode = int(runthismap)
                                mapname = self.server.getMapName(mapcode)
                                mapxml   = self.server.getMapXML(mapcode)
                                yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                novotes = int(self.server.getMapNoVotes(mapcode))
                                perma     = int(self.server.getMapPerma(mapcode))
                                mapnoexist = int(self.server.getMapDel(mapcode))
                                self.ISCM = mapcode
                                self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                return "-1"
                        elif self.specialMap!=0:
                                return self.selectMapSpecial(self.specialMap)
                        else:
                                self.ISCM = -1
                                self.ISCMdata = [0, "Invalid", "<C><P /><Z><S /><D /><O /></Z></C>", 0, 0, 0, 0]
                                runthismap = random.choice(LEVEL_LIST)
                                if self.specificMap:
                                        runthismap = self.currentWorld
                                return runthismap
                else:
                        if self.isBootcamp:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 3')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if len(maplist)>=2:
                                        while runthismap == self.ISCM:
                                                runthismap = random.choice(maplist)
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                        return "-1"
                        elif self.isRacing:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 7')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if len(maplist)>=2:
                                        while runthismap == self.ISCM:
                                                runthismap = random.choice(maplist)
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                        return "-1"
                        elif self.isDefilante:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 18')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if len(maplist)>=2:
                                        while runthismap == self.ISCM:
                                                runthismap = random.choice(maplist)
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                        return "-1"
                        elif self.isArtRoom:
                                maplist = []
                                dbcur.execute('select code from mapeditor where perma = 5')
                                rrfRows = dbcur.fetchall()
                                if rrfRows is None:
                                        pass
                                else:
                                        for rrf in rrfRows:
                                                maplist.append(rrf[0])
                                if len(maplist)>=1:
                                        runthismap = random.choice(maplist)
                                else:
                                        runthismap = ""
                                if len(maplist)>=2:
                                        while runthismap == self.ISCM:
                                                runthismap = random.choice(maplist)
                                if runthismap=="":
                                        self.ISCM = -1
                                        return 0
                                else:
                                        mapcode = int(runthismap)
                                        mapname = self.server.getMapName(mapcode)
                                        mapxml   = self.server.getMapXML(mapcode)
                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                        perma     = int(self.server.getMapPerma(mapcode))
                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                        self.ISCM = mapcode
                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                        return "-1"
                        elif self.isTribehouse:
                                self.ISCM = 0
                                self.ISCMdata = [0, "Invalid", "<C><P /><Z><S /><D /><O /></Z></C>", 0, 0, 0, 0]
                                return "-1"
                        elif self.isEditeur:
                                if self.ISCMV!=0:
                                        return self.ISCMV
                                else:
                                        return 0
                        elif self.SPR_Room and self.SPR_CM!=0:
                                runthismap=self.SPR_CM
                                mapcode = int(runthismap)
                                mapname = self.server.getMapName(mapcode)
                                mapxml   = self.server.getMapXML(mapcode)
                                yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                novotes = int(self.server.getMapNoVotes(mapcode))
                                perma     = int(self.server.getMapPerma(mapcode))
                                mapnoexist = int(self.server.getMapDel(mapcode))
                                self.ISCM = mapcode
                                self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                return "-1"
                        elif self.specialMap!=0:
                                return self.selectMapSpecial(self.specialMap)
                        else:
                                self.ISCM = -1
                                self.ISCMdata = [0, "Invalid", "<C><P /><Z><S /><D /><O /></Z></C>", 0, 0, 0, 0]
                                if self.isVanilla:
                                        runthismap = random.choice(LEVEL_LIST)
                                        while runthismap == self.currentWorld:
                                                runthismap = random.choice(LEVEL_LIST)
                                        if self.specificMap:
                                                runthismap = self.currentWorld
                                        return runthismap
                                elif self.isSurvivor:
                                        if self.ISCMstatus==7:
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 11')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if runthismap=="":
                                                        self.ISCM = -1
                                                        return 0
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                                        return "-1"
                                        else:
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 10')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if runthismap=="":
                                                        self.ISCM = -1
                                                        return 0
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                                        return "-1"
                                else: #ISCM Status: Vanilla/Normal-Protected/Art/Misc/Vanilla/Mechanism/No-shaman/Cooperation/Vanilla/Normal-Protected/Shaman/Mechanism
                                        if self.ISCMstatus==0: #vanilla map
                                                runthismap = random.choice(LEVEL_LIST)
                                                while runthismap == self.currentWorld:
                                                        runthismap = random.choice(LEVEL_LIST)
                                                if self.specificMap:
                                                        runthismap = self.currentWorld
                                                return runthismap
                                        elif self.ISCMstatus==1: #normal or protected map
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 0')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                dbcur.execute('select code from mapeditor where perma = 1')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                                        return "-1"
                                        elif self.ISCMstatus==2: #art map
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 5')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                                        return "-1"
                                        elif self.ISCMstatus==3: #misc map
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 9')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                                        return "-1"
                                        elif self.ISCMstatus==4: #vanilla map
                                                runthismap = random.choice(LEVEL_LIST)
                                                while runthismap == self.currentWorld:
                                                        runthismap = random.choice(LEVEL_LIST)
                                                if self.specificMap:
                                                        runthismap = self.currentWorld
                                                return runthismap
                                        elif self.ISCMstatus==5: #mechanism map
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 6')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                                        return "-1"
                                        elif self.ISCMstatus==6: #racing map
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 7')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                                        return "-1"
                                        elif self.ISCMstatus==7: #cooperation map
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 8')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                                        return "-1"
                                        elif self.ISCMstatus==8: #vanilla map
                                                runthismap = random.choice(LEVEL_LIST)
                                                while runthismap == self.currentWorld:
                                                        runthismap = random.choice(LEVEL_LIST)
                                                if self.specificMap:
                                                        runthismap = self.currentWorld
                                                return runthismap
                                        elif self.ISCMstatus==9: #normal or protected map
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 0')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                dbcur.execute('select code from mapeditor where perma = 1')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                                        return "-1"
                                        elif self.ISCMstatus==10: #shaman map
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 4')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                                        return "-1"
                                        elif self.ISCMstatus==11: #mechanism map
                                                maplist = []
                                                dbcur.execute('select code from mapeditor where perma = 6')
                                                rrfRows = dbcur.fetchall()
                                                if rrfRows is None:
                                                        pass
                                                else:
                                                        for rrf in rrfRows:
                                                                maplist.append(rrf[0])
                                                if len(maplist)>=1:
                                                        runthismap = random.choice(maplist)
                                                else:
                                                        runthismap = ""
                                                if len(maplist)>=2:
                                                        while runthismap == self.ISCM:
                                                                runthismap = random.choice(maplist)
                                                if runthismap=="":
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                                else:
                                                        mapcode = int(runthismap)
                                                        mapname = self.server.getMapName(mapcode)
                                                        mapxml   = self.server.getMapXML(mapcode)
                                                        yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                        novotes = int(self.server.getMapNoVotes(mapcode))
                                                        perma     = int(self.server.getMapPerma(mapcode))
                                                        mapnoexist = int(self.server.getMapDel(mapcode))
                                                        self.ISCM = mapcode
                                                        self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                                        return "-1"
                                        elif self.ISCMstatus==12:
                                                runthismap = random.choice(LEVEL_LIST)
                                                while runthismap == self.currentWorld:
                                                        runthismap = random.choice(LEVEL_LIST)
                                                if self.specificMap:
                                                        runthismap = self.currentWorld
                                                return runthismap
                                        elif self.ISCMstatus==13: #etkinlik haritaları
                                                if int(self.getPlayerCount(True))>=2 and self.countStats:
                                                        maplist = []
                                                        dbcur.execute('select code from mapeditor where perma = 55')
                                                        rrfRows = dbcur.fetchall()
                                                        if rrfRows is None:
                                                                pass
                                                        else:
                                                                for rrf in rrfRows:
                                                                        maplist.append(rrf[0])
                                                        if len(maplist)>=1:
                                                                runthismap = random.choice(maplist)
                                                        else:
                                                                runthismap = ""
                                                        if len(maplist)>=2:
                                                                while runthismap == self.ISCM:
                                                                        runthismap = random.choice(maplist)
                                                        if runthismap=="":
                                                                runthismap = random.choice(LEVEL_LIST)
                                                                while runthismap == self.currentWorld:
                                                                        runthismap = random.choice(LEVEL_LIST)
                                                                if self.specificMap:
                                                                        runthismap = self.currentWorld
                                                                return runthismap
                                                        else:
                                                                mapcode = int(runthismap)
                                                                mapname = self.server.getMapName(mapcode)
                                                                mapxml   = self.server.getMapXML(mapcode)
                                                                yesvotes   = int(self.server.getMapYesVotes(mapcode))
                                                                novotes = int(self.server.getMapNoVotes(mapcode))
                                                                perma     = int(self.server.getMapPerma(mapcode))
                                                                mapnoexist = int(self.server.getMapDel(mapcode))
                                                                self.ISCM = mapcode
                                                                self.ISCMdata = [mapcode, mapname, mapxml, yesvotes, novotes, perma, mapnoexist]
                                                                return "-1"
                                                else:
                                                        self.ISCMstatus=0
                                                        runthismap = random.choice(LEVEL_LIST)
                                                        while runthismap == self.currentWorld:
                                                                runthismap = random.choice(LEVEL_LIST)
                                                        if self.specificMap:
                                                                runthismap = self.currentWorld
                                                        return runthismap
                                        else:
                                                pass #logging.info("Room "+str(self.name)+" got an invalid ISCM Status of "+str(self.ISCMstatus)+".")
                                                self.ISCMstatus=0
                                                runthismap = random.choice(LEVEL_LIST)
                                                while runthismap == self.currentWorld:
                                                        runthismap = random.choice(LEVEL_LIST)
                                                if self.specificMap:
                                                        runthismap = self.currentWorld
                                                return runthismap

        def closeVoting(self):
                self.initVotingMode=False
                self.votingBox=False
                if self.voteCloseTimer:
                        try:
                                self.voteCloseTimer.cancel()
                        except:
                                self.voteCloseTimer=None
                self.worldChange()

        def worldChange(self):
                if self.killAfkTimer:
                        try:
                                self.killAfkTimer.cancel()
                        except:
                                self.killAfkTimer=None
                self.bBarcoEnviado = False
                self.bVentoEnviado = False
                self.bNavegarEnviado = False
                self.bChuvaEnviada = False
                self.bTempestadeEnviada = False
                self.bTrovao1 = False
                self.bTrovao2 = False
                self.bTrovao3 = False
                self.bTrovao4 = False
                self.bTrovao5 = False
                self.bTrovao6 = False
                if self.ZombieTimer:
                        try:
                                self.ZombieTimer.cancel()
                        except:
                                self.ZombieTimer=None

                if self.NavegationStartTimer:
                        try:
                                self.NavegationStartTimer.cancel()
                        except:
                                self.NavegationStartTimer=None

                if self.WindStartTimer:
                        try:
                                self.WindStartTimer.cancel()
                        except:
                                self.WindStartTimer=None

                if self.RainStartTimer:
                        try:
                                self.RainStartTimer.cancel()
                        except:
                                self.RainStartTimer=None

                if self.StormStartTimer:
                        try:
                                self.StormStartTimer.cancel()
                        except:
                                self.StormStartTimer=None

                if self.Thunder1StartTimer:
                        try:
                                self.Thunder1StartTimer.cancel()
                        except:
                                self.Thunder1StartTimer=None

                if self.Thunder2StartTimer:
                        try:
                                self.Thunder2StartTimer.cancel()
                        except:
                                self.Thunder2StartTimer=None

                if self.Thunder3StartTimer:
                        try:
                                self.Thunder3StartTimer.cancel()
                        except:
                                self.Thunder3StartTimer=None

                if self.Thunder4StartTimer:
                        try:
                                self.Thunder4StartTimer.cancel()
                        except:
                                self.Thunder4StartTimer=None

                if self.Thunder5StartTimer:
                        try:
                                self.Thunder5StartTimer.cancel()
                        except:
                                self.Thunder5StartTimer=None

                if self.Thunder6StartTimer:
                        try:
                                self.Thunder6StartTimer.cancel()
                        except:
                                self.Thunder6StartTimer=None
                if self.initVotingMode:
                        if self.votingBox:
                                pass
                                #print "Tried to go to next map during voting."
                        else:
                                if self.ISCMdata[5]==0 and self.ISCM!=-1:
                                        if not self.isTribehouse:
                                                if self.getPlayerCount()>=2:
                                                        self.votingMode=True
                                                        self.votingBox=True
                                                        self.voteCloseTimer = reactor.callLater(8, self.closeVoting)
                                                        for playerCode, client in self.clients.items():
                                                                client.sendVoteBox(self.ISCMdata[1], self.ISCMdata[3], self.ISCMdata[4])
                                                else:
                                                        self.votingMode=False
                                                        self.closeVoting()
                                        else:
                                                self.votingMode=False
                                                self.closeVoting()
                                else:
                                        self.votingMode=False
                                        self.closeVoting()
                elif self.isEditeur and self.ISCMV==0:
                        pass
                elif self.isTribehouse and self.isTribehouseMap:
                        pass
                else:
                        if self.votingMode:
                                TotalYes=self.ISCMdata[3]+self.recievedYes
                                TotalNo=self.ISCMdata[4]+self.recievedNo
                                if TotalYes+TotalNo>=100:
                                        TotalVotes=TotalYes+TotalNo
                                        Rating=(1.0*TotalYes/TotalVotes)*100
                                        Rating, adecimal, somejunk = str(Rating).partition(".")
                                        if int(Rating)<50:
                                                dbcur.execute('UPDATE mapeditor SET perma = %s WHERE code = %s', ("44", self.ISCMdata[0]))
                                                dbcon.commit()
                                dbcur.execute('UPDATE mapeditor SET yesvotes = %s WHERE code = %s', (int(TotalYes), self.ISCMdata[0]))
                                dbcur.execute('UPDATE mapeditor SET novotes = %s WHERE code = %s', (int(TotalNo), self.ISCMdata[0]))
                                dbcon.commit()
                                self.votingMode=False
                                self.recievedYes=0
                                self.recievedNo =0
                                for playerCode, client in self.clients.items():
                                        client.Voted=False
                                        client.QualifiedVoter=False
                        self.initVotingMode=True

                        self.currentSyncroniserCode = None
                        self.isCurrentlyPlayingRoom = False
                        self.identifiantTemporaire=-1
                        NextCodePartie=self.CodePartieEnCours+1
                        if NextCodePartie>9999:
                                NextCodePartie=1
                        self.CodePartieEnCours=NextCodePartie
                        self.CheckedPhysics=False

                        self.ISCMstatus+=1
                        if self.isSurvivor:
                                if self.ISCMstatus>7:
                                        self.ISCMstatus=0
                        else:
                                if self.ISCMstatus>13:
                                        self.ISCMstatus=0
                        if self.isKanat:
                                if self.ISCMstatus>15:
                                        self.ISCMstatus=0
                        if self.isRacing or self.isDefilante:
                                self.rounds+=1
                        else:
                                self.rounds=1
                                        
                        self.isHardSham=False

                        for playerCode, client in self.clients.items():
                                client.isAfk=True

                        if self.isSurvivor and self.getPlayerCount(True)>=3:
                                for playerCode, client in self.clients.items():
                                        if not client.isDead and not client.isZombie:
                                                client.score += 10
                                                client.shopcheese += 1
                                                client.sendGiveCurrency(0, 1)

                        if self.isCatchTheCheeseMap==True:
                                self.isCatchTheCheeseMap=False
                        else:
                                if self.isDoubleMap:
                                        numCompleted = self.FSnumCompleted-1
                                else:
                                        numCompleted = self.numCompleted-1
                                if numCompleted < 0:
                                        numCompleted = 0
                                for playerCode, client in self.clients.items():
                                        if client.playerCode == self.currentShamanCode:
                                                client.score = numCompleted
                                if self.currentShamanName:
                                        self.sendAll("\x08" + "\x11",[self.currentShamanName, numCompleted])
                                        for playerCode, client in self.clients.items():
                                                if not client.privilegeLevel==0 and self.currentShamanName == client.username:
                                                        l = client.levelcount.split('/')
                                                        lks = int(numCompleted)*10
                                                        client.nextlevel += int(lks)
                                                        if int(l[1]) < int(client.nextlevel) or int(l[1]) == int(client.nextlevel):
                                                                ns = (int(client.nextlevel)-int(l[1]))
                                                                if not ns == 0:
                                                                        lks = int(ns)
                                                                        client.nextlevel = int(ns)
                                                                else:
                                                                        client.nextlevel = 0
                                                                if not l[0] > 30:
                                                                        lehel = int(l[0])+1
                                                                        z = int(lehel)*2
                                                                        n=int(z)+int(l[1])
                                                                else:
                                                                        lehel = int(l[0])+1
                                                                        z = int(lehel)*10
                                                                        n=int(z)+int(l[1])
                                                                if int(l[1]) < int(client.nextlevel) or int(l[1]) == int(client.nextlevel):
                                                                        ns = (int(client.nextlevel)-int(l[1]))
                                                                        if not ns == 0:
                                                                                lks = int(ns)
                                                                                client.nextlevel = int(ns)
                                                                        else:
                                                                                client.nextlevel = 0
                                                                        if not l[0] > 30:
                                                                                lehel = int(l[0])+2
                                                                                z = int(lehel)*2
                                                                                n=int(z)+int(l[1])
                                                                        else:
                                                                                lehel = int(l[0])+2
                                                                                z = int(lehel)*10
                                                                                n=int(z)+int(l[1])
                                                                        if int(l[1]) < int(client.nextlevel) or int(l[1]) == int(client.nextlevel):
                                                                                ns = (int(client.nextlevel)-int(l[1]))
                                                                                if not ns == 0:
                                                                                        lks = int(ns)
                                                                                        client.nextlevel = int(ns)
                                                                                else:
                                                                                        client.nextlevel = 0
                                                                                if not l[0] > 30:
                                                                                        lehel = int(l[0])+3
                                                                                        z = int(lehel)*2
                                                                                        n=int(z)+int(l[1])
                                                                                else:
                                                                                        lehel = int(l[0])+3
                                                                                        z = int(lehel)*10
                                                                                        n=int(z)+int(l[1])
                                                                client.sendData("\x08\x08", struct.pack("!bii", int(lehel),int(0),int(n)), True)
                                                                client.levelcount = str(lehel)+"/"+str(n)
                                                        if not int(lks) == 0:
                                                                client.sendData("\x08\x09", struct.pack("!h", int(lks)), True)
                        if self.isDoubleMap:
                                if self.isCatchTheCheeseMap==True:
                                        self.isCatchTheCheeseMap=False
                                else:
                                        numCompleted = self.SSnumCompleted-1
                                        if numCompleted < 0:
                                                numCompleted = 0
                                        for playerCode, client in self.clients.items():
                                                if client.playerCode == self.currentSecondShamanCode:
                                                        client.score = numCompleted
                                        if self.currentSecondShamanName:
                                                self.sendAll("\x08" + "\x11",[self.currentSecondShamanName, numCompleted])
                                                for playerCode, client in self.clients.items():
                                                        if not client.privilegeLevel==0 and self.currentSecondShamanName == client.username:
                                                                l = client.levelcount.split('/')
                                                                lks = int(numCompleted)*10
                                                                client.nextlevel += int(lks)
                                                                if int(l[1]) < int(client.nextlevel) or int(l[1]) == int(client.nextlevel):
                                                                        ns = (int(client.nextlevel)-int(l[1]))
                                                                        if not ns == 0:
                                                                                lks = int(ns)
                                                                                client.nextlevel = int(ns)
                                                                        else:
                                                                                client.nextlevel = 0
                                                                        if not l[0] > 30:
                                                                                lehel = int(l[0])+1
                                                                                z = int(lehel)*2
                                                                                n=int(z)+int(l[1])
                                                                        else:
                                                                                lehel = int(l[0])+1
                                                                                z = int(lehel)*10
                                                                                n=int(z)+int(l[1])
                                                                        if int(l[1]) < int(client.nextlevel) or int(l[1]) == int(client.nextlevel):
                                                                                ns = (int(client.nextlevel)-int(l[1]))
                                                                                if not ns == 0:
                                                                                        lks = int(ns)
                                                                                        client.nextlevel = int(ns)
                                                                                else:
                                                                                        client.nextlevel = 0
                                                                                if not l[0] > 30:
                                                                                        lehel = int(l[0])+2
                                                                                        z = int(lehel)*2
                                                                                        n=int(z)+int(l[1])
                                                                                else:
                                                                                        lehel = int(l[0])+2
                                                                                        z = int(lehel)*10
                                                                                        n=int(z)+int(l[1])
                                                                                if int(l[1]) < int(client.nextlevel) or int(l[1]) == int(client.nextlevel):
                                                                                        ns = (int(client.nextlevel)-int(l[1]))
                                                                                        if not ns == 0:
                                                                                                lks = int(ns)
                                                                                                client.nextlevel = int(ns)
                                                                                        else:
                                                                                                client.nextlevel = 0
                                                                                        if not l[0] > 30:
                                                                                                lehel = int(l[0])+3
                                                                                                z = int(lehel)*2
                                                                                                n=int(z)+int(l[1])
                                                                                        else:
                                                                                                lehel = int(l[0])+3
                                                                                                z = int(lehel)*10
                                                                                                n=int(z)+int(l[1])
                                                                        client.sendData("\x08\x08", struct.pack("!bii", int(lehel),int(0),int(n)), True)
                                                                        client.levelcount = str(lehel)+"/"+str(n)
                                                                if not int(lks) == 0:
                                                                        client.sendData("\x08\x09", struct.pack("!h", int(lks)), True)


                        self.currentShamanCode = None
                        self.currentSecondShamanCode = None
                        self.currentShamanName = None
                        self.currentSecondShamanName = None
                        self.SurvivorVamp = False
                        self.isHalloween = False
                        self.isDone = False
                        self.iceenabled = False
                        self.re = 0

                        for playerCode, client in self.clients.items():
                                client.resetPlay()

                        self.isDoubleMap = False
                        self.anchors = []
                        
                        if not self.specificMap:
                                if self.isTribehouse:
                                        self.ISCM = self.tribehouseCM
                                        self.ISCMdata = self.tribehouseCMdata
                                        self.currentWorld = "-1"
                                else:
                                        runthismap = self.selectMap()
                                        self.currentWorld = runthismap

                        if int(self.currentWorld) in [1, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 136, 137, 138, 139, 140, 141, 142, 143] and int(self.getPlayerCount())>=2:
                                self.isDoubleMap = True
                        if (self.ISCMdata[5] == 8 or self.ISCMdata[5] == 32) and int(self.getPlayerCount())>=2:
                                self.isDoubleMap = True
                        if (self.ISCMdata[5] == 55) and int(self.getPlayerCount())>=2:
                                self.isDoubleMap = True
                        if self.currentWorld != -1:
                                self.WorldFound = random.randint(0, 5)
                        if int(self.currentWorld) in [561, 562, 563, 564, 565] and int(self.getPlayerCount())>=5:
                                threading.Timer(120, self.eventNewYear).start()
                                r = random.choice("abc")
                                n = random.choice("abc")
                                if r == 'a':
                                        threading.Timer(random.randint(20, 120), self.eventCheese).start()
                                if r == 'b':
                                        threading.Timer(random.randint(30, 120), self.eventFraises).start()
                                if r == 'c':
                                        threading.Timer(random.randint(60, 120), self.eventMoney).start()
                                if n == 'a':
                                        threading.Timer(random.randint(20, 120), self.eventCheese).start()
                                if n == 'b':
                                        threading.Timer(random.randint(30, 120), self.eventFraises).start()
                                if n == 'c':
                                        threading.Timer(random.randint(60, 120), self.eventMoney).start()

                        self.vanillaXML()
                        # if int(self.getPlayerCount())>=5:
                        #         self.eventXML()

                        if self.currentWorld==888:
                                self.worldChangeTimer = reactor.callLater(60, self.worldChange)
                        else:
                                if not self.roundTime == 0:
                                        self.worldChangeTimer = reactor.callLater(self.roundTime, self.worldChange)
                        self.killAfkTimer = reactor.callLater(30, self.killAfk)
                        if self.autoRespawn or self.isTribehouseMap:
                                if self.autoRespawnTimer:
                                        try:
                                                self.autoRespawnTimer.cancel()
                                        except:
                                                self.autoRespawnTimer=None
                                self.autoRespawnTimer = reactor.callLater(15, self.respawnMice)
                        if self.isSandbox:
                                try:
                                        self.worldChangeTimer.cancel()
                                except:
                                        self.worldChangeTimer=None
                                try:
                                        self.killAfkTimer.cancel()
                                except:
                                        self.killAfkTimer=None
                        self.gameStartTime = getTime()
                        self.numCompleted = 0
                        self.FSnumCompleted = 0
                        self.SSnumCompleted = 0
                        self.numGotCheese = 0
                        self.changed20secTimer = False
                        
                        if self.isTribehouse:
                                self.isTribehouseMap = True
                        
                        for playerCode, client in self.clients.items():
                                client.startPlay(-1, 0)
                                if client.isHidden:
                                        client.sendPlayerDisconnect(client.playerCode)
                        self.closeRoomRoundJoinTimer = reactor.callLater(2, self.closeRoomRoundJoin)

        def goZombified(self):
                for playerCode, client in self.clients.items():
                    if client.isSyncroniser:
                        if not client.room.SurvivorVamp:
                            client.sendZombieMode()
                    
        def worldChangeSpecific(self, mapnumber, custom = None, special = None):
                self.ShamanRespawn = False
                mapnumber = int(mapnumber)
                self.identifiantTemporaire=-1
                NextCodePartie=self.CodePartieEnCours+1
                if NextCodePartie>9999:
                        NextCodePartie=1
                self.CodePartieEnCours=NextCodePartie
                self.CheckedPhysics=False
                if self.worldChangeTimer:
                        try:
                                self.worldChangeTimer.cancel()
                        except:
                                self.worldChangeTimer=None
                if self.killAfkTimer:
                        try:
                                self.killAfkTimer.cancel()
                        except:
                                self.killAfkTimer=None
                self.currentSyncroniserCode = None
                self.isCurrentlyPlayingRoom = False
                self.isHardSham=False
                for playerCode, client in self.clients.items():
                        client.isAfk=True
                if self.isCatchTheCheeseMap==True:
                        self.isCatchTheCheeseMap=False
                else:
                        if self.isDoubleMap:
                                numCompleted = self.FSnumCompleted-1
                        else:
                                numCompleted = self.numCompleted-1
                        if numCompleted < 0:
                                numCompleted = 0
                        if self.currentShamanName:
                                self.sendAll("\x08" + "\x11",[self.currentShamanName, numCompleted])

                if self.isDoubleMap:
                        for playerCode, client in self.clients.items():
                                if client.playerCode == self.currentSecondShamanCode:
                                        client.score = 0
                        if self.isCatchTheCheeseMap==True:
                                self.isCatchTheCheeseMap=False
                        else:
                                numCompleted = self.SSnumCompleted-1
                                if numCompleted < 0:
                                        numCompleted = 0
                                if self.currentSecondShamanName:
                                        self.sendAll("\x08" + "\x11",[self.currentSecondShamanName, numCompleted])
                self.currentShamanCode = None
                self.currentSecondShamanCode = None
                self.currentShamanName = None
                self.currentSecondShamanName = None
                self.SurvivorVamp = False
                self.isHalloween = False
                self.isDone = False
                for playerCode, client in self.clients.items():
                        client.resetPlay()
                self.isDoubleMap = False
                if special:
                        self.currentWorld = self.selectMapSpecial(mapnumber)
                elif custom:
                        self.currentWorld = self.selectMapSpecific(mapnumber, True)
                else:
                        self.currentWorld = self.selectMapSpecific(mapnumber, False)
                if int(self.currentWorld) in [1, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53] and int(self.getPlayerCount())>=2:
                        self.isDoubleMap = True
                self.vanillaXML()
                # self.eventXML()
                if self.ISCMdata[5] == 8 and int(self.getPlayerCount())>=2:
                        self.isDoubleMap = True
                if self.ISCMdata[5] == 55 and int(self.getPlayerCount())>=2:
                        self.isDoubleMap = True
                if self.currentWorld != -1:
                        self.WorldFound = random.randint(0, 5)
                if self.currentWorld==888:
                        self.worldChangeTimer = reactor.callLater(60, self.worldChange)
                else:
                        if not self.roundTime == 0:
                                self.worldChangeTimer = reactor.callLater(self.roundTime, self.worldChange)
                self.killAfkTimer = reactor.callLater(30, self.killAfk)
                if self.isSandbox:
                        try:
                                self.worldChangeTimer.cancel()
                        except:
                                self.worldChangeTimer=None
                        try:
                                self.killAfkTimer.cancel()
                        except:
                                self.killAfkTimer=None
                self.gameStartTime = getTime()
                self.numCompleted = 0
                self.FSnumCompleted = 0
                self.SSnumCompleted = 0
                self.numGotCheese = 0
                self.changed20secTimer = False
                for playerCode, client in self.clients.items():
                        client.startPlay(-1, 0)
                
                if self.specificMap == 2:
                        self.sendAllBin("\x05" + "\x2c", struct.pack('!h', 1))
                        self.sendAllBin("\x05" + "\x2c", struct.pack('!h', 6))
                        self.sendAllBin("\x05" + "\x2c", struct.pack('!h', 2))
                
                self.closeRoomRoundJoinTimer = reactor.callLater(0, self.closeRoomRoundJoin)
                self.isTribehouseMap = False
        
        def vanillaXML(self):
                code = self.currentWorld
                if os.path.exists("./others/maps/vanilla/"+str(code)+".xml"):
                        mapcode = int(self.currentWorld)
                        mapname = 'Tigrounette'
                        filexml = open('./others/maps/vanilla/'+str(code)+'.xml', 'r')
                        xml = filexml.read()
                        filexml.close()
                        mapxml   = str(xml)
                        mapnoexist = 0
                        self.ISCM = mapcode
                        self.ISCMdata = [mapcode, mapname, mapxml, 0, 0, 2, mapnoexist]
                        self.currentWorld = "-1"

        def eventXML(self):
                code = self.currentWorld
                if os.path.exists("./others/maps/"+str(code)+".xml"):
                        mapcode = int(self.currentWorld)
                        mapname = 'Tigrounette'
                        filexml = open('./others/maps/'+str(code)+'.xml', 'r')
                        xml = filexml.read()
                        filexml.close()
                        mapxml   = str(xml)
                        mapnoexist = 0
                        self.ISCM = mapcode
                        self.ISCMdata = [mapcode, mapname, mapxml, 0, 0, 2, mapnoexist]
                        self.currentWorld = "-1"

        def eventNewYear(self):
                for playerCode, client in self.clients.items():
                        self.worldChangeSpecific(560)

        def eventCheese(self):
                for playerCode, client in self.clients.items():
                        client.sendCheese()

        def eventFraises(self):
                for playerCode, client in self.clients.items():
                        client.sendFraises()

        def eventMoney(self):
                for playerCode, client in self.clients.items():
                        client.sendMoney()

        def checkShouldChangeWorld(self):
                if self.isBootcamp or self.noAutoRespawn:
                        pass
                elif self.isTribehouse and self.isTribehouseMap:
                        pass
                elif self.isSandbox:
                        pass
                elif self.roundTime == 0:
                        pass
                else:
                        if all(client.isDead for client in self.clients.values()):
                                try:
                                        self.worldChangeTimer.cancel()
                                except:
                                        self.worldChangeTimer=None
                                if self.killAfkTimer:
                                        try:
                                                self.killAfkTimer.cancel()
                                        except:
                                                self.killAfkTimer=None
                                if self.closeRoomRoundJoinTimer:
                                        try:
                                                self.closeRoomRoundJoinTimer.cancel()
                                        except:
                                                self.closeRoomRoundJoinTimer=None
                                self.worldChange()

        def giveShamanHardSave(self):
                for playerCode, client in self.clients.items():
                        if client.playerCode == self.currentShamanCode:
                                client.hardModeSaves += 1
                                if client.privilegeLevel != 0:
                                        if client.hardModeSaves in client.hardShamTitleCheckList:
                                                unlockedtitle=client.hardShamTitleDictionary[client.hardModeSaves]
                                                client.sendUnlockedTitle(client.playerCode, unlockedtitle)
                                                client.HardModeTitleList=client.HardModeTitleList+[unlockedtitle]
                                                client.titleList = ["0"]+client.GiftTitleList+client.ShamanTitleList+client.HardModeTitleList+client.CheeseTitleList+client.FirstTitleList+client.ShopTitleList+client.BootcampTitleList
                                                if client.privilegeLevel==10:
                                                        client.titleList = client.titleList+ADMIN_TITLES
                                                client.titleList = filter(None, client.titleList)
                                                client.sendTitleList()
                                return 1
                return 0

        def giveShamanSave(self):
                for playerCode, client in self.clients.items():
                        if client.playerCode == self.currentShamanCode:
                                client.micesaves += 1
                                if client.privilegeLevel != 0:
                                        if client.micesaves in client.shamanTitleCheckList:
                                                unlockedtitle=client.shamanTitleDictionary[client.micesaves]
                                                client.sendUnlockedTitle(client.playerCode, unlockedtitle)
                                                client.ShamanTitleList=client.ShamanTitleList+[unlockedtitle]
                                                client.titleList = ["0"]+client.GiftTitleList+client.ShamanTitleList+client.HardModeTitleList+client.CheeseTitleList+client.FirstTitleList+client.ShopTitleList+client.BootcampTitleList
                                                if client.privilegeLevel==10:
                                                        client.titleList = client.titleList+ADMIN_TITLES
                                                client.titleList = filter(None, client.titleList)
                                                client.sendTitleList()
                                return 1
                return 0

        def giveSecondShamanSave(self):
                for playerCode, client in self.clients.items():
                        if client.playerCode == self.currentSecondShamanCode:
                                client.micesaves += 1
                                if client.privilegeLevel != 0:
                                        if client.micesaves in client.shamanTitleCheckList:
                                                unlockedtitle=client.shamanTitleDictionary[client.micesaves]
                                                client.sendUnlockedTitle(client.playerCode, unlockedtitle)
                                                client.ShamanTitleList=client.ShamanTitleList+[unlockedtitle]
                                                client.titleList = ["0"]+client.GiftTitleList+client.ShamanTitleList+client.CheeseTitleList+client.FirstTitleList+client.ShopTitleList
                                                if client.privilegeLevel==10:
                                                        client.titleList = client.titleList+ADMIN_TITLES
                                                client.titleList = filter(None, client.titleList)
                                                client.sendTitleList()
                                return 1
                return 0

        def checkDeathCount(self):
                counts=[0,0] #Dead, Alive
                for playerCode, client in self.clients.items():
                        if client.isDead:
                                counts[0]=counts[0]+1
                        else:
                                counts[1]=counts[1]+1
                return counts
        def checkIfTooFewRemaining(self):
                counts=[0,0] #Dead, Alive
                for playerCode, client in self.clients.items():
                        if client.isDead:
                                counts[0]=counts[0]+1
                        else:
                                counts[1]=counts[1]+1
                if self.getPlayerCount>=2:
                        if counts[1]<=2:
                                return True
                return False
        def checkIfDoubleShamansAreDead(self):
                result=0
                for playerCode, client in self.clients.items():
                        if client.playerCode == self.currentShamanCode or client.playerCode == self.currentSecondShamanCode:
                                if client.isDead:
                                        result+=1
                                else:
                                        pass
                if result==2:
                        return True
                else:
                        return False
        def checkIfShamanIsDead(self):
                for playerCode, client in self.clients.items():
                        if client.playerCode == self.currentShamanCode:
                                if client.isDead:
                                        pass
                                else:
                                        return False
                return True

        def checkIfShamanCanGoIn(self):
                allgone=1
                #if all(client.isDead for client in self.clients.values()):
                for playerCode, client in self.clients.items():
                        if client.playerCode != self.currentShamanCode:
                                if client.isDead:
                                        pass
                                else:
                                        allgone=0
                if allgone==1:
                        return 1
                else:
                        return 0

        def checkIfDoubleShamanCanGoIn(self):
                counts=[0,0,0,0] #Dead Shamans, Dead Mice, Not Dead Shamans, Not Dead Mice
                #if all(client.isDead for client in self.clients.values()):
                for playerCode, client in self.clients.items():
                        if client.isDead:
                                if client.playerCode == self.currentShamanCode:
                                        counts[0]=counts[0]+1
                                elif client.playerCode == self.currentSecondShamanCode:
                                        counts[0]=counts[0]+1
                                else:
                                        counts[1]=counts[1]+1
                        else:
                                if client.playerCode == self.currentShamanCode:
                                        counts[2]=counts[2]+1
                                elif client.playerCode == self.currentSecondShamanCode:
                                        counts[2]=counts[2]+1
                                else:
                                        counts[3]=counts[3]+1
                #print counts
                if counts[3]==0:
                        return True
                else:
                        return False

        def resetSandbox(self):
                if self.isSandbox:
                        for playerCode, client in self.clients.items():
                                resetpscore=0
                                client.sendPlayerDied(client.playerCode, resetpscore)
                                client.isDead=True
                        if all(client.isDead for client in self.clients.values()):
                                #self.worldChangeTimer.cancel()
                                #self.worldChange()
                                for playerCode, client in self.clients.items():
                                        client.resetPlay()
                                self.currentWorld = self.currentWorld
                                for playerCode, client in self.clients.items():
                                        client.startPlay(-1,0)
                else:
                        pass
        def resetRoom(self):
                if self.worldChangeTimer:
                        try:
                                self.worldChangeTimer.cancel()
                        except:
                                self.worldChangeTimer=None
                if self.killAfkTimer:
                        try:
                                self.killAfkTimer.cancel()
                        except:
                                self.killAfkTimer=None
                if self.autoRespawnTimer:
                        try:
                                self.autoRespawnTimer.cancel()
                        except:
                                self.autoRespawnTimer=None
                for playerCode, client in self.clients.items():
                        resetpscore=0
                        client.sendPlayerDied(client.playerCode, resetpscore)
                        client.isDead=True
                if all(client.isDead for client in self.clients.values()):
                        self.worldChange()
                        #for playerCode, client in self.clients.items():
                        #       client.resetPlay()
                        #self.currentWorld = self.currentWorld
                        #for playerCode, client in self.clients.items():
                        #       client.startPlay(0,0)
        def moveAllRoomClients(self, name, rec = False):
                if rec:
                        for playerCode, client in self.clients.items():
                                self.MoveTimer = reactor.callLater(0, client.enterRoom, self.server.recommendRoom(self.Langue))
                else:
                        for playerCode, client in self.clients.items():
                                self.MoveTimer = reactor.callLater(0, client.enterRoom, str(name))

        def addClient(self, newClient):
                SPEC = 0

                if self.isCurrentlyPlayingRoom:
                        newClient.isDead=True
                        SPEC = 1

                self.clients[newClient.playerCode] = newClient
                newClient.room = self

                if self.sNP:
                        newClient.sendNewPlayer(newClient.getPlayerData())

                if self.isMinigame:
                        self.minigame.event_enterroom(newClient)

                newClient.startPlay(self.ISCM, SPEC)

                #print self.clients

        def updatesqlserver(self):
                for playerCode, client in self.clients.items():
                        if client.username.startswith("*"):
                                pass
                        else:
                                client.updateSelfSQL()

        def removeClient(self, removeClient):
                if removeClient.playerCode in self.clients:
                        for playerCode, client in self.clients.items():
                                if playerCode == removeClient.playerCode:
                                        if client.username.startswith("*"):
                                                pass
                                        else:
                                                client.updateSelfSQL()

                        if self.isMinigame:
                                self.minigame.event_leaveroom(removeClient)

                        del self.clients[removeClient.playerCode]

                        if self.getPlayerCount() == 0:
                                self.server.closeRoom(self)
                                return

                        removeClient.sendPlayerDisconnect(removeClient.playerCode)
                        if self.currentSyncroniserCode == removeClient.playerCode:
                                newSyncroniser = random.choice(self.clients.values())
                                newSyncroniser.isSyncroniser = True

                                self.currentSyncroniserCode = newSyncroniser.playerCode
                                newSyncroniser.sendSynchroniser(newSyncroniser.playerCode)

                self.checkShouldChangeWorld()

        def changeSyncroniserRandom(self):
                newSyncroniser = random.choice(self.clients.values())
                newSyncroniser.isSyncroniser = True
                self.currentSyncroniserCode = newSyncroniser.playerCode
                newSyncroniser.sendSynchroniser(newSyncroniser.playerCode)

        def changeSyncroniserSpecific(self, username):
                newSyncroniser = False
                for room in self.server.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.username == username:
                                        newSyncroniser = client
                                        break
                if newSyncroniser:
                        newSyncroniser.isSyncroniser = True
                        self.currentSyncroniserCode = newSyncroniser.playerCode
                        newSyncroniser.sendSynchroniser(newSyncroniser.playerCode)

        def changeScore(self, playerCode, score):
                for playerCode, client in self.clients.items():
                        if client.playerCode == playerCode:
                                client.score = score

        def startSnowStorm(self):
                self.sendAll("\x05" + "\x17", ["0"])
                self.isSnowing=True
                self.endSnowStormTimer = reactor.callLater(120, self.endSnowStorm)

        def endSnowStorm(self):
                self.sendAll("\x05" + "\x17", [])
                self.isSnowing=False
                self.snowStormStartTimer = reactor.callLater(random.randrange(900, 1500), self.startSnowStorm)

        def forceEmoteAll(self, emoteCode):
                for playerCode, client in self.clients.items():
                    for playerCode2, client2 in self.clients.items():
                        client.sendPlayerEmote(playerCode2, emoteCode, False)
                        
        def informAll(self, clientFunction, args):
                pass #logging.warning("Deprecated Function \"informAll\". Vars: clientFunction-"+str(clientFunction)+" args-"+str(args))
                for playerCode, client in self.clients.items():
                        clientFunction(client, *args)

        def informAllOthers(self, senderClient, clientFunction, args):
                pass #logging.warning("Deprecated Function \"informAllOthers\". Vars: clientFunction-"+str(clientFunction)+" args-"+str(args))
                for playerCode, client in self.clients.items():
                        if playerCode != senderClient.playerCode:
                                clientFunction(client, *args)

        def sendSync(self, eventTokens, data = None):
                for playerCode, client in self.clients.items():
                        if client.isSyncroniser:
                                client.sendData(eventTokens, data)
        def sendAll(self, eventTokens, data = None):
                for playerCode, client in self.clients.items():
                        client.sendData(eventTokens, data)
        def sendAllOthers(self, senderClient, eventTokens, data):
                for playerCode, client in self.clients.items():
                        if client.playerCode != senderClient.playerCode:
                                client.sendData(eventTokens, data)
        def sendAllOthersAndSelf(self, senderClient, eventTokens, data):
                pass #logging.warning("Deprecated Function \"sendAllOthersAndSelf\". Vars: eventTokens-"+str(repr(eventTokens))+" data-"+str(repr(data)))
                for playerCode, client in self.clients.items():
                        client.sendData(eventTokens, data)

        def sendAllChat(self, sendplayerCode, username, message):
                for playerCode, client in self.clients.items():
                        if client.muteChat:
                                pass
                        else:
                                if client.censorChat:
                                        Cmessage=client.censorMessage(message)
                                        if client.Translating:
                                                try:
                                                        Ltype=LanguageDetector().detect(message).lang_code
                                                except:
                                                        Ltype="br"
                                                if Ltype == "de":
                                                        sendMessage=Cmessage
                                                else:
                                                        try:
                                                                Cmessage=client.safe_str(Translator().translate(Cmessage, lang_to="br"))
                                                        except:
                                                                pass
                                        sendMessage=struct.pack('!h', len(Cmessage))+Cmessage
                                else:
                                        if client.Translating:
                                                try:
                                                        Ltype=LanguageDetector().detect(message).lang_code
                                                except:
                                                        Ltype="br"
                                                if Ltype == "de":
                                                        sendMessage=message
                                                else:
                                                        Tmessage=message
                                                        try:
                                                                Tmessage=client.safe_str(Translator().translate(Tmessage, lang_to="br"))
                                                        except:
                                                                pass
                                                        sendMessage=struct.pack('!h', len(Tmessage))+Tmessage
                                        else:
                                                sendMessage=struct.pack('!h', len(message))+message
                                reactor.callLater(0, client.sendData, "\x06\x06", sendplayerCode+username+"\x06"+sendMessage, True)
        def sendAllChatColored(self, sendplayerCode, username, message):
                for playerCode, client in self.clients.items():
                        if client.muteChat:
                                pass
                        else:
                                if client.censorChat:
                                        Cmessage=client.censorMessage(message)
                                        if client.Translating:
                                                try:
                                                        Ltype=LanguageDetector().detect(message).lang_code
                                                except:
                                                        Ltype="br"
                                                if Ltype == "de":
                                                        sendMessage=Cmessage
                                                else:
                                                        try:
                                                                Cmessage=client.safe_str(Translator().translate(Cmessage, lang_to="br"))
                                                        except:
                                                                pass
                                        sendMessage=struct.pack('!h', len(Cmessage))+Cmessage
                                else:
                                        if client.Translating:
                                                try:
                                                        Ltype=LanguageDetector().detect(message).lang_code
                                                except:
                                                        Ltype="br"
                                                if Ltype == "de":
                                                        sendMessage=message
                                                else:
                                                        Tmessage=message
                                                        try:
                                                                Tmessage=client.safe_str(Translator().translate(Tmessage, lang_to="br"))
                                                        except:
                                                                pass
                                                        sendMessage=struct.pack('!h', len(Tmessage))+Tmessage
                                        else:
                                                sendMessage=struct.pack('!h', len(message))+message
                                if client.isShaman:
                                        username = "Shaman "+username[2:]
                                        sendMessage = "<CH><B>"+sendMessage[2:]+"</B>"
                                else:
                                        username = "<N>"+username[2:]
                                        sendMessage = "<N>"+sendMessage[2:]
                                client.sendMessage("<font color=\"#"+client.chatcolor+"\">["+username+"]</font> "+sendMessage)
                for playerCode, client in self.clients.items():
                        if int(client.playerCode)==int(senderClient.playerCode):
                                if client.muteChat:
                                        pass
                                else:
                                        if client.censorChat:
                                                Cmessage=client.censorMessage(message)
                                                if client.Translating:
                                                        try:
                                                                Ltype=LanguageDetector().detect(message).lang_code
                                                        except:
                                                                Ltype="br"
                                                        if Ltype == "de":
                                                                sendMessage=Cmessage
                                                        else:
                                                                try:
                                                                        Cmessage=client.safe_str(Translator().translate(Cmessage, lang_to="br"))
                                                                except:
                                                                        pass
                                                sendMessage=struct.pack('!h', len(Cmessage))+Cmessage
                                        else:
                                                if client.Translating:
                                                        try:
                                                                Ltype=LanguageDetector().detect(message).lang_code
                                                        except:
                                                                Ltype="br"
                                                        if Ltype == "de":
                                                                sendMessage=message
                                                        else:
                                                                Tmessage=message
                                                                try:
                                                                        Tmessage=client.safe_str(Translator().translate(Tmessage, lang_to="br"))
                                                                except:
                                                                        pass
                                                                sendMessage=struct.pack('!h', len(Tmessage))+Tmessage
                                                else:
                                                        sendMessage=struct.pack('!h', len(message))+message
                                        client.sendData("\x06\x06", sendplayerCode+username+sendMessage+"\x00\x00", True)
        def sendAllChatFColored(self, sendplayerCode, username, message, senderClient):
                for playerCode, client in self.clients.items():
                        if int(client.playerCode)==int(senderClient.playerCode):
                                if client.muteChat:
                                        pass
                                else:
                                        if client.censorChat:
                                                Cmessage=client.censorMessage(message)
                                                if client.Translating:
                                                        try:
                                                                Ltype=LanguageDetector().detect(message).lang_code
                                                        except:
                                                                Ltype="br"
                                                        if Ltype == "de":
                                                                sendMessage=Cmessage
                                                        else:
                                                                try:
                                                                        Cmessage=client.safe_str(Translator().translate(Cmessage, lang_to="br"))
                                                                except:
                                                                        pass
                                                sendMessage=struct.pack('!h', len(Cmessage))+Cmessage
                                        else:
                                                if client.Translating:
                                                        try:
                                                                Ltype=LanguageDetector().detect(message).lang_code
                                                        except:
                                                                Ltype="br"
                                                        if Ltype == "de":
                                                                sendMessage=message
                                                        else:
                                                                Tmessage=message
                                                                try:
                                                                        Tmessage=client.safe_str(Translator().translate(Tmessage, lang_to="br"))
                                                                except:
                                                                        pass
                                                                sendMessage=struct.pack('!h', len(Tmessage))+Tmessage
                                                else:
                                                        sendMessage=struct.pack('!h', len(message))+message
                                        if client.isShaman:
                                                username = "Shaman "+username[2:]
                                                sendMessage = "<CH>"+sendMessage[2:]
                                        else:
                                                username = "<N>"+username[2:]
                                                sendMessage = "<N>"+sendMessage[2:]
                                        client.sendMessage("<font color=\"#"+client.chatcolor+"\">["+username+"]</font> "+sendMessage)
        def sendAllBin(self, eventTokens, data = None):
                for playerCode, client in self.clients.items():
                        client.sendData(eventTokens, data, True)
        def sendAllOthersBin(self, senderClient, eventTokens, data):
                for playerCode, client in self.clients.items():
                        if client.playerCode != senderClient.playerCode:
                                client.sendData(eventTokens, data, True)
        def sendAllPvSpecLocal(self, eventTokens, privlevels, langue, data = None, binary = None):
                for playerCode, client in self.clients.items():
                    if client.privilegeLevel in privlevels and client.Langue == langue or client.privilegeLevel==10:
                        if client.privilegeLevel==10:
                            if eventTokens in ("\x06\x0A"):
                                    if binary:
                                        client.sendData(eventTokens, data, True)
                                    else:
                                        client.sendData(eventTokens, data)
                            else:
                                if binary:
                                    client.sendData(eventTokens, data, True)
                                else:
                                    client.sendData(eventTokens, data)
                        else:
                            if binary:
                                client.sendData(eventTokens, data, True)
                            else:
                                client.sendData(eventTokens, data)
        def sendAllPvSpec(self, eventTokens, privlevels, data = None, binary = None):
                for playerCode, client in self.clients.items():
                        if client.privilegeLevel in privlevels:
                                if binary:
                                        client.sendData(eventTokens, data, True)
                                else:
                                        client.sendData(eventTokens, data)
        def sendAllPvSpecOthers(self, senderClient, eventTokens, privlevels, data = None, binary = None):
                for playerCode, client in self.clients.items():
                        if client.privilegeLevel in privlevels:
                                if client.playerCode != senderClient.playerCode:
                                        if binary:
                                                client.sendData(eventTokens, data, True)
                                        else:
                                                client.sendData(eventTokens, data)
        def sendWholeTribeRoom(self, senderClient, eventTokens, data, binary = None, NotIgnorable = None):
                #Must only be called by TransformiceServer
                for playerCode, client in self.clients.items():
                        if str(client.TribeCode) == str(senderClient.TribeCode):
                                if client.isInTribe:
                                        if binary:
                                                if NotIgnorable:
                                                        client.sendData(eventTokens, data, True)
                                                else:
                                                        if not client.muteTribe:
                                                                client.sendData(eventTokens, data, True)
                                        else:
                                                if NotIgnorable:
                                                        client.sendData(eventTokens, data)
                                                else:
                                                        if not client.muteTribe:
                                                                client.sendData(eventTokens, data)
        def sendWholeTribeOthersRoom(self, senderClient, eventTokens, data, binary = None, NotIgnorable = None):
                #Must only be called by TransformiceServer
                for playerCode, client in self.clients.items():
                        if str(client.TribeCode) == str(senderClient.TribeCode):
                                if client.isInTribe:
                                        if client.playerCode != senderClient.playerCode:
                                                if binary:
                                                        if NotIgnorable:
                                                                client.sendData(eventTokens, data, True)
                                                        else:
                                                                if not client.muteTribe:
                                                                        client.sendData(eventTokens, data, True)
                                                else:
                                                        if NotIgnorable:
                                                                client.sendData(eventTokens, data)
                                                        else:
                                                                if not client.muteTribe:
                                                                        client.sendData(eventTokens, data)
        def sendTribeInfoUpdateRoom(self, code, greeting = None, playerlist = None):
                #Must only be called by TransformiceServer
                for playerCode, client in self.clients.items():
                        if str(client.TribeCode) == str(code):
                                UserTribeInfo=self.server.getUserTribeInfo(client.username)
                                if UserTribeInfo[0]=="":
                                        client.TribeCode        = ""
                                        client.TribeName        = ""
                                        client.TribeFromage = 0
                                        client.TribeMessage = ""
                                        client.TribeInfo        = ""
                                        client.TribeRank        = ""
                                        client.TribeHouse       = "0"
                                        client.isInTribe        = False
                                        client.muteTribe        = False
                                        client.sendTribeZeroGreeting()
                                        client.tribe            = self.server.getTribeName(client.username)
                                else:
                                        TribeData                  = self.server.getTribeData(UserTribeInfo[1])
                                        client.TribeCode        = TribeData[0]
                                        client.TribeName        = TribeData[1]
                                        client.TribeFromage = TribeData[2]
                                        client.TribeMessage = TribeData[3]
                                        client.TribeInfo        = TribeData[4].split("|")
                                        client.TribeRank        = UserTribeInfo[2]
                                        client.TribeHouse       = TribeData[5]
                                        client.isInTribe        = True
                                        if greeting:
                                                client.sendTribeGreeting()
                                        if playerlist:
                                                client.sendTribeList()

        def sendWholeServer(self, senderClient, eventTokens, data, binary = None):
                for room in self.server.rooms.values():
                        if binary:
                                reactor.callLater(0, room.sendAllBin, eventTokens, data)
                        else:
                                reactor.callLater(0, room.sendAll, eventTokens, data)
                        #for playerCode, client in room.clients.items():
                        #       if binary:
                        #               client.sendData(eventTokens, data, True)
                        #       else:
                        #               client.sendData(eventTokens, data)

        def checkRoomInvite(self, senderClient, name):
                for room in self.server.rooms.values():
                        if room.name == "\x03[Private] "+name:
                                if senderClient.username in room.RoomInvite:
                                        return True
                                else:
                                        return False
                return False

        def sendMapCrewChat(self, senderClient, eventTokens, data, binary = None):
                if eventTokens=="\x06\x14":
                    print str(datetime.today())+" [Serveur] "+data[0]

                for room in self.server.rooms.values():
                    for playerCode, client in room.clients.items():
                        if client.privilegeLevel>=4 or client.privilegeLevel==2:
                            if binary:
                                client.sendData(eventTokens, data, True)
                            else:
                                client.sendData(eventTokens, data)
        def sendArbChatLocal(self, senderClient, eventTokens, langue, data, binary = None):
                for room in self.server.rooms.values():
                    if binary:
                        room.sendAllPvSpecLocal(eventTokens, [10,8,6,5,4,3], langue, data, True)
                    else:
                        room.sendAllPvSpecLocal(eventTokens, [10,8,6,5,4,3], langue, data)
     
        def sendArbChat(self, senderClient, eventTokens, data, binary = None):
                for room in self.server.rooms.values():
                        if binary:
                                room.sendAllPvSpec(eventTokens, [10,8,6,5,4,3], data, True)
                        else:
                                room.sendAllPvSpec(eventTokens, [10,8,6,5,4,3], data)
                                
        def sendLuaChat(self, senderClient, eventTokens, data, binary = None):
                for room in self.server.rooms.values():
                        if binary:
                                room.sendAllPvSpec(eventTokens, [10], data, True)
                        else:
                                room.sendAllPvSpec(eventTokens, [10], data)

        def sendModChat(self, senderClient, eventTokens, data, binary = None):
                for room in self.server.rooms.values():
                        if binary:
                                reactor.callLater(0, room.sendAllPvSpec, eventTokens, [10,6,5], data, True)
                        else:
                                reactor.callLater(0, room.sendAllPvSpec, eventTokens, [10,6,5], data)

        def sendArbChatOthers(self, senderClient, eventTokens, data, binary = None):
                for room in self.server.rooms.values():
                        if binary:
                                reactor.callLater(0, room.sendAllPvSpecOthers, senderClient, eventTokens, [10,6,5,3], data, True)
                        else:
                                reactor.callLater(0, room.sendAllPvSpecOthers, senderClient, eventTokens, [10,6,5,3], data)
                        #for playerCode, client in room.clients.items():
                        #       if client.privilegeLevel==10 or client.privilegeLevel==6 or client.privilegeLevel==5 or client.privilegeLevel==3:
                        #               if client.playerCode != senderClient.playerCode:
                        #                       if binary:
                        #                               client.sendData(eventTokens, data, True)
                        #                       else:
                        #                               client.sendData(eventTokens, data)
        def sendModChatOthers(self, senderClient, eventTokens, data, binary = None):
                for room in self.server.rooms.values():
                        if binary:
                                reactor.callLater(0, room.sendAllPvSpecOthers, senderClient, eventTokens, [10,6,5], data, True)
                        else:
                                reactor.callLater(0, room.sendAllPvSpecOthers, senderClient, eventTokens, [10,6,5], data)
                        #for playerCode, client in room.clients.items():
                        #       if client.privilegeLevel==10 or client.privilegeLevel==6 or client.privilegeLevel==5:
                        #               if client.playerCode != senderClient.playerCode:
                        #                       if binary:
                        #                               client.sendData(eventTokens, data, True)
                        #                       else:
                        #                               client.sendData(eventTokens, data)
        def sendArbChatOthersLogin(self, senderClient, eventTokens, name):
                for room in self.server.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.privilegeLevel==10 or client.privilegeLevel==6 or client.privilegeLevel==5 or client.privilegeLevel==3:
                                        #if client.playerCode != senderClient.playerCode:
                                        sname="-"
                                        if client.Langue=="EN":
                                                message = name+" connected."
                                        elif client.Langue=="BR":
                                                message = name+" acabou de se conectar."
                                        elif client.Langue=="FR":
                                                message = name+" vient de se connecter."
                                        elif client.Langue=="RU":
                                                message = name+" подключился."
                                        elif client.Langue=="TR":
                                                message = name+" connected."
                                        elif client.Langue=="CN":
                                                message = name+" ?????."
                                        else:
                                                message = name+" connected."
                                        #data="\x02"+struct.pack('!h', len(sname))+sname+struct.pack('!h', len(message))+message+"\x00\x00"
                                        #client.sendData(eventTokens, data, True)
                                        client.sendData("\x1A\x06", [sname, message])
        def sendModChatOthersLogin(self, senderClient, eventTokens, name):
                for room in self.server.rooms.values():
                        for playerCode, client in room.clients.items():
                                if client.privilegeLevel==10 or client.privilegeLevel==6 or client.privilegeLevel==5:
                                        #if client.playerCode != senderClient.playerCode:
                                        sname="-"
                                        if client.Langue=="EN":
                                                message = name+" connected."
                                        elif client.Langue=="BR":
                                                message = name+" acabou de se conectar."
                                        elif client.Langue=="FR":
                                                message = name+" vient de se connecter."
                                        elif client.Langue=="RU":
                                                message = name+" подключился."
                                        elif client.Langue=="TR":
                                                message = name+" connected."
                                        elif client.Langue=="CN":
                                                message = name+" 刚刚上线了."
                                        else:
                                                message = name+" connected."
                                        client.sendData("\x1A\x05", [sname, message])
                                                #data="\x03"+struct.pack('!h', len(sname))+sname+struct.pack('!h', len(message))+message+"\x00\x00"
                                                #client.sendData(eventTokens, data, True)
        def sendAllStaffInRoom(self, senderClient, eventTokens, data, binary = None):
                for playerCode, client in self.clients.items():
                        if client.privilegeLevel==10 or client.privilegeLevel==6 or client.privilegeLevel==5 or client.privilegeLevel==3:
                                if binary:
                                        client.sendData(eventTokens, data, True)
                                else:
                                        client.sendData(eventTokens, data)
        def sendAllStaffInRoomVoteBan(self, senderClient, selfName, username, bancount):
                for playerCode, client in self.clients.items():
                        if client.privilegeLevel==10 or client.privilegeLevel==6 or client.privilegeLevel==5 or client.privilegeLevel==3:
                                #client.sendData(eventTokens, data)
                                if client.Langue=="EN":
                                        client.sendData("\x06"+"\x14",[selfName+" requested ban of "+username+" ("+str(bancount)+"/6)."])
                                elif client.Langue=="FR":
                                        client.sendData("\x06"+"\x14",[selfName+" demande le bannissement de "+username+" ("+str(bancount)+"/6)."])
                                elif client.Langue=="BR":
                                        client.sendData("\x06"+"\x14",[selfName+" votou para banir "+username+" ("+str(bancount)+"/6)."])
                                elif client.Langue=="RU":
                                        client.sendData("\x06"+"\x14",[selfName+" отправил запрос на бан игрока "+username+" ("+str(bancount)+"/10)."])
                                elif client.Langue=="TR":
                                        client.sendData("\x06"+"\x14",[selfName+" (This string has not been translated yet [4746]) "+username+" ("+str(bancount)+"/6)."])
                                elif client.Langue=="CN":
                                        client.sendData("\x06"+"\x14",[selfName+" (This string has not been translated yet [4748]) "+username+" ("+str(bancount)+"/6)."])
                                else:
                                        client.sendData("\x06"+"\x14",[selfName+" requested ban of "+username+" ("+str(bancount)+"/10)."])

        def sendAllStaffInRoomVoteMute(self, senderClient, selfName, username, bancount):
                for playerCode, client in self.clients.items():
                        if client.privilegeLevel==10 or client.privilegeLevel==6 or client.privilegeLevel==5 or client.privilegeLevel==3:
                                #client.sendData(eventTokens, data)
                                if client.Langue=="RU":
                                        client.sendData("\x06"+"\x14",[selfName+" отправил запрос на мут игрока "+username+" ("+str(bancount)+"/5)."])
                                else:
                                        client.sendData("\x06"+"\x14",[selfName+" requested mute of "+username+" ("+str(bancount)+"/5)."])

        def getPlayerCode(self, name, OnlySelf = None):
                if OnlySelf:
                        for playerCode, client in self.clients.items():
                                if client.username == name:
                                        return playerCode
                                        break
                        return 0
                else:
                        for room in self.server.rooms.values():
                                for playerCode, client in room.clients.items():
                                        if client.username == name:
                                                return playerCode
                                                break
                        return 0

        def getCurrentSync(self):
                if self.eSync:
                        return "Everyone"
                elif self.sSync:
                        for playerCode, client in self.clients.items():
                                if client.playerCode == self.currentSyncroniserCode:
                                        return client.username
                                        break
                else:
                        return "Nobody"
                return 0

        def InitEaster(self):
                if self.EasterTimer:
                        try:
                                self.EasterTimer.cancel()
                        except:
                                self.EasterTimer = None
                                
                if int(self.getPlayerCount()) >= int(self.server.NeedsForEaster) and not self.isBootcamp and not self.isSurvivor and not self.isKanat and not self.isTribehouse and not self.isRacing and not self.isEditeur:
                        mapnumber = random.choice(["@1"])
                        self.forceNextMap = mapnumber
                
                self.EasterTimer = reactor.callLater(600, self.InitEaster)

        def killAfk(self):
                if self.isBootcamp:
                        pass
                if self.isTribehouseMap:
                        pass
                elif self.isEditeur:
                        pass
                elif self.noKillAfk:
                        pass
                elif self.isTotemEditeur:
                        pass
                elif self.autoRespawn:
                        pass
                else:
                        if int((getTime()-self.gameStartTime)) > 32 or int((getTime()-self.gameStartTime)) < 29:
                                pass #logging.error('AFK kill timer invalid. Time: '+str(int((getTime()-self.gameStartTime))))
                        else:
                                for playerCode, client in self.clients.items():
                                        if not client.isDead:
                                                if client.isAfk == True:
                                                        client.isDead = True
                                                        client.score -= 1
                                                        if client.score < 0:
                                                                client.score = 0
                                                        self.ShamanRespawn = False
                                                        client.sendPlayerDied(client.playerCode, client.score)
                                                else:
                                                        pass
                                self.checkShouldChangeWorld()

        def closeRoomRoundJoin(self):
                self.isCurrentlyPlayingRoom = True

        def killAll(self):
                for playerCode, client in self.clients.items():
                        if not client.isDead:
                                resetpscore=client.score+1
                                client.sendPlayerDied(client.playerCode, resetpscore)
                                client.ShamanRespawn = False
                                client.isDead=True
                self.checkShouldChangeWorld()

        def killAllNoDie(self):
                for playerCode, client in self.clients.items():
                        if not client.isDead:
                                client.isDead=True
                self.checkShouldChangeWorld()

        def killShaman(self):
                for playerCode, client in self.clients.items():
                        if client.playerCode == self.currentShamanCode:
                                client.score -= 1
                                if client.score < 0:
                                        client.score = 0
                                client.sendPlayerDied(client.playerCode, client.score)
                                client.isDead=True
                self.checkShouldChangeWorld()

        def getPlayerCount(self, UniqueIPs = None):
                if UniqueIPs:
                        IPlist=[]
                        for playerCode, client in self.clients.items():
                                if not client.address[0] in IPlist:
                                        IPlist.append(client.address[0])
                        return len(IPlist)
                else:
                        return len(self.clients)

        def getPlayerList(self, Noshop = None):
                if Noshop:
                        for playerCode, client in self.clients.items():
                                yield client.getPlayerData(True)
                else:
                        for playerCode, client in self.clients.items():
                                yield client.getPlayerData()

        def getHighestPlayer(self):
                clientscores = []
                clientcode = 0
                for playerCode, client in self.clients.items():
                        clientscores.append(client.score)
                for playerCode, client in self.clients.items():
                        if client.score==max(clientscores):
                                clientcode=playerCode
                                clientname=client.username
                return clientcode

        def getSecondHighestShaman(self):
                clientscores = []
                clientcode = 0
                for playerCode, client in self.clients.items():
                        clientscores.append(client.score)
                clientscores.remove(max(clientscores))
                for playerCode, client in self.clients.items():
                        if client.score==max(clientscores):
                                clientcode=playerCode
                                clientname=client.username
                return clientcode

        def getShamanCode(self):
                if self.currentShamanCode is None:
                        if self.currentWorld in [7, 8, 14, 22, 23, 28, 29, 54, 55, 57, 58, 59, 60, 61, 70, 77, 78, 87, 88, 89, 92, 122, 123, 124, 125, 126, 1007, 888] + range(200,210+1):
                                self.currentShamanCode = 0
                        elif self.SPR_Room and self.spc0:
                                self.currentShamanCode = 0
                        elif self.ISCMdata[5] in [3, 7, 17, 13, 18, 11, 42]:
                                self.currentShamanCode = 0
                        elif self.ISCM == 877 or self.ISCM == 876:
                                self.currentShamanCode = 0
                        elif self.nobodyIsShaman or self.isTribehouseMap or self.isEventMap:
                                self.currentShamanCode = 0
                        elif self.everybodyIsShaman:
                                self.currentShamanCode = 0
                        elif str(self.ISCM) == "1":
                                self.currentShamanCode = 0
                        else:
                                if self.forceNextShaman!=False:
                                        self.currentShamanCode=self.forceNextShaman
                                        self.forceNextShaman=False
                                        for playerCode, client in self.clients.items():
                                                if client.playerCode == self.currentShamanCode:
                                                        self.currentShamanName = client.username
                                        return self.currentShamanCode
                                else:
                                        self.currentShamanCode = self.getHighestPlayer()
                if self.currentShamanCode == 0:
                        self.currentShamanName = None
                else:
                        for playerCode, client in self.clients.items():
                                if client.playerCode == self.currentShamanCode:
                                        self.currentShamanName = client.username
                return self.currentShamanCode

        def getDoubleShamanCode(self):
                if self.forceNextShaman!=False:
                        self.currentShamanCode=self.forceNextShaman
                        self.forceNextShaman=False
                        if self.currentSecondShamanCode is None:
                                self.currentSecondShamanCode = self.getSecondHighestShaman()
                                while self.currentSecondShamanCode == self.currentShamanCode:
                                        self.currentSecondShamanCode = random.choice(self.clients.keys())
                        for playerCode, client in self.clients.items():
                                if client.playerCode == self.currentShamanCode:
                                        self.currentShamanName = client.username
                        for playerCode, client in self.clients.items():
                                if client.playerCode == self.currentSecondShamanCode:
                                        self.currentSecondShamanName = client.username
                        return [self.currentShamanCode, self.currentSecondShamanCode]
                else:
                        if self.currentShamanCode is None:
                                self.currentShamanCode = self.getHighestPlayer()
                        if self.currentSecondShamanCode is None:
                                self.currentSecondShamanCode = self.getSecondHighestShaman()
                                while self.currentSecondShamanCode == self.currentShamanCode:
                                        self.currentSecondShamanCode = random.choice(self.clients.keys())
                        for playerCode, client in self.clients.items():
                                if client.playerCode == self.currentShamanCode:
                                        self.currentShamanName = client.username
                        for playerCode, client in self.clients.items():
                                if client.playerCode == self.currentSecondShamanCode:
                                        self.currentSecondShamanName = client.username
                        return [self.currentShamanCode, self.currentSecondShamanCode]

        def getSyncroniserCode(self):
                if self.currentSyncroniserCode is None:
                        self.currentSyncroniserCode = random.choice(self.clients.keys())
                return self.currentSyncroniserCode

if __name__ == "__main__":

        print"\x1b[36m  _____                           ___                                         "
        print" (_   _)                        /'___)                       _                "
        print"   | | _ __   _ _   ___    ___ | (__   _    _ __   ___ ___  (_)   ___    __   "
        print"   | |( '__)/'_` )/' _ `\/',__)| ,__)/'_`\ ( '__)/' _ ` _ `\| | /'___) /'__`\ "
        print"   | || |  ( (_| || ( ) |\__, \| |  ( (_) )| |   | ( ) ( ) || |( (___ (  ___/ "
        print"   (_)(_)  `\__,_)(_) (_)(____/(_)  `\___/'(_)   (_) (_) (_)(_)`\____)`\____) \x1b[0m"

        TimeUsed = datetime.now() - Start;

        if dbcur in [None]:
                ErrorTitle = "["+str(getTime2())+"] "+"Connecting to DataBase -------------------------> \x1b[31m[ERROR]\x1b[0m ("+str(TimeUsed.seconds)+"s)"
                dberro = ErrorTitle+"\n\n[INFO] Host: "+conf.connect['host']+"\n[INFO] User: "+conf.connect['user']+"\n[INFO] Password: "+conf.connect['pass']+"\n[INFO] DataBase: "+conf.connect['db']+"\n[INFO] Port: "+str(int(conf.connect['port']))+"\n"
                print dberro
                raw_input("Type something to exit")
                sys.exit()

        print "["+str(getTime2())+"] "+"Loading GameServer -----------------------------> \x1b[32m[OK]\x1b[0m ("+str(TimeUsed.seconds)+"s)"

        TFM = TransformiceServer()

        iniports = []
        ports = [444, 44445, 44441, 3725, 6113, 5556, 44446, 44442, 3726, 6114, 5557]
        for port in ports:
                try:
                        reactor.listenTCP(port, TFM)
                        iniports = iniports+[port]
                except:
                        pass
        if iniports == []:
                print("["+str(getTime2())+"] "+"Fail on listen ports, press OK to exit")
                os._exit(20)
        print("["+str(getTime2())+"] "+"Server running in ports: "+str(iniports))
        threading.Thread(target=reactor.run(), args=(False,)).start()
